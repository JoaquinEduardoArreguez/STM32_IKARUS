
Ikarus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007204  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007388  08007388  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007388  08007388  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007388  08007388  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c70  2000017c  0800750c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  0800750c  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0f3  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003875  00000000  00000000  0003a298  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001308  00000000  00000000  0003efc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018038  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a4c  00000000  00000000  00058300  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078b0c  00000000  00000000  0006ad4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005584  00000000  00000000  000e38d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080072f8 	.word	0x080072f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080072f8 	.word	0x080072f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b24      	ldr	r3, [pc, #144]	; (8000204 <MX_GPIO_Init+0xa8>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a23      	ldr	r2, [pc, #140]	; (8000204 <MX_GPIO_Init+0xa8>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b21      	ldr	r3, [pc, #132]	; (8000204 <MX_GPIO_Init+0xa8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b1e      	ldr	r3, [pc, #120]	; (8000204 <MX_GPIO_Init+0xa8>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a1d      	ldr	r2, [pc, #116]	; (8000204 <MX_GPIO_Init+0xa8>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b1b      	ldr	r3, [pc, #108]	; (8000204 <MX_GPIO_Init+0xa8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b18      	ldr	r3, [pc, #96]	; (8000204 <MX_GPIO_Init+0xa8>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a17      	ldr	r2, [pc, #92]	; (8000204 <MX_GPIO_Init+0xa8>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b15      	ldr	r3, [pc, #84]	; (8000204 <MX_GPIO_Init+0xa8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <MX_GPIO_Init+0xa8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a11      	ldr	r2, [pc, #68]	; (8000204 <MX_GPIO_Init+0xa8>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <MX_GPIO_Init+0xa8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	480c      	ldr	r0, [pc, #48]	; (8000208 <MX_GPIO_Init+0xac>)
 80001d8:	f001 fa76 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80001dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e2:	2301      	movs	r3, #1
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	4619      	mov	r1, r3
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <MX_GPIO_Init+0xac>)
 80001f6:	f001 f90d 	bl	8001414 <HAL_GPIO_Init>

}
 80001fa:	bf00      	nop
 80001fc:	3720      	adds	r7, #32
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40021000 	.word	0x40021000
 8000208:	40011000 	.word	0x40011000

0800020c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_I2C2_Init+0x50>)
 8000212:	4a13      	ldr	r2, [pc, #76]	; (8000260 <MX_I2C2_Init+0x54>)
 8000214:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_I2C2_Init+0x50>)
 8000218:	4a12      	ldr	r2, [pc, #72]	; (8000264 <MX_I2C2_Init+0x58>)
 800021a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_I2C2_Init+0x50>)
 800021e:	2200      	movs	r2, #0
 8000220:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <MX_I2C2_Init+0x50>)
 8000224:	2200      	movs	r2, #0
 8000226:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_I2C2_Init+0x50>)
 800022a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800022e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_I2C2_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_I2C2_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_I2C2_Init+0x50>)
 800023e:	2200      	movs	r2, #0
 8000240:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_I2C2_Init+0x50>)
 8000244:	2200      	movs	r2, #0
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_I2C2_Init+0x50>)
 800024a:	f001 fa6d 	bl	8001728 <HAL_I2C_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000254:	f000 f9ce 	bl	80005f4 <Error_Handler>
  }

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200003bc 	.word	0x200003bc
 8000260:	40005800 	.word	0x40005800
 8000264:	000186a0 	.word	0x000186a0

08000268 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000270:	f107 0310 	add.w	r3, r7, #16
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a16      	ldr	r2, [pc, #88]	; (80002dc <HAL_I2C_MspInit+0x74>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d124      	bne.n	80002d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0308 	and.w	r3, r3, #8
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80002a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80002a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002a6:	2312      	movs	r3, #18
 80002a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002aa:	2303      	movs	r3, #3
 80002ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	4619      	mov	r1, r3
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <HAL_I2C_MspInit+0x7c>)
 80002b6:	f001 f8ad 	bl	8001414 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 80002c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c4:	61d3      	str	r3, [r2, #28]
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002ce:	60bb      	str	r3, [r7, #8]
 80002d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80002d2:	bf00      	nop
 80002d4:	3720      	adds	r7, #32
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40005800 	.word	0x40005800
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <HAL_TIM_PWM_Start_AllChannels>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef HAL_TIM_PWM_Start_AllChannels(TIM_HandleTypeDef *htim) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if (HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002f0:	2100      	movs	r1, #0
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f002 ffd4 	bl	80032a0 <HAL_TIM_PWM_Start>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d116      	bne.n	800032c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002fe:	2100      	movs	r1, #0
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f002 ffcd 	bl	80032a0 <HAL_TIM_PWM_Start>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d10f      	bne.n	800032c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 800030c:	2100      	movs	r1, #0
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f002 ffc6 	bl	80032a0 <HAL_TIM_PWM_Start>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d108      	bne.n	800032c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK) {
 800031a:	2100      	movs	r1, #0
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f002 ffbf 	bl	80032a0 <HAL_TIM_PWM_Start>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <HAL_TIM_PWM_Start_AllChannels+0x44>
		return HAL_OK;
 8000328:	2300      	movs	r3, #0
 800032a:	e000      	b.n	800032e <HAL_TIM_PWM_Start_AllChannels+0x46>
	}
	return HAL_ERROR;
 800032c:	2301      	movs	r3, #1
}
 800032e:	4618      	mov	r0, r3
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <set_pmw_handler_all_channels_pulse_width>:
;

void set_pmw_handler_all_channels_pulse_width(TIM_HandleTypeDef handler,
		unsigned int pulseWidth) {
 8000336:	b084      	sub	sp, #16
 8000338:	b490      	push	{r4, r7}
 800033a:	af00      	add	r7, sp, #0
 800033c:	f107 0408 	add.w	r4, r7, #8
 8000340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	handler.Instance->CCR1 = pulseWidth;
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
	handler.Instance->CCR2 = pulseWidth;
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800034e:	639a      	str	r2, [r3, #56]	; 0x38
	handler.Instance->CCR3 = pulseWidth;
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000354:	63da      	str	r2, [r3, #60]	; 0x3c
	handler.Instance->CCR4 = pulseWidth;
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800035a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc90      	pop	{r4, r7}
 8000362:	b004      	add	sp, #16
 8000364:	4770      	bx	lr
	...

08000368 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036a:	b093      	sub	sp, #76	; 0x4c
 800036c:	af0e      	add	r7, sp, #56	; 0x38
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800036e:	f000 febf 	bl	80010f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000372:	f000 f8e5 	bl	8000540 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000376:	f7ff fef1 	bl	800015c <MX_GPIO_Init>
	MX_I2C2_Init();
 800037a:	f7ff ff47 	bl	800020c <MX_I2C2_Init>
	MX_SPI1_Init();
 800037e:	f000 f93f 	bl	8000600 <MX_SPI1_Init>
	MX_SPI2_Init();
 8000382:	f000 f973 	bl	800066c <MX_SPI2_Init>
	MX_TIM1_Init();
 8000386:	f000 faf3 	bl	8000970 <MX_TIM1_Init>
	MX_TIM2_Init();
 800038a:	f000 fba9 	bl	8000ae0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800038e:	f000 fc3d 	bl	8000c0c <MX_TIM3_Init>
	MX_TIM4_Init();
 8000392:	f000 fcd3 	bl	8000d3c <MX_TIM4_Init>
	MX_USB_DEVICE_Init();
 8000396:	f006 fac7 	bl	8006928 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	unsigned int position_minimum = 350;
 800039a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800039e:	60bb      	str	r3, [r7, #8]
	unsigned int position_center = 750;
 80003a0:	f240 23ee 	movw	r3, #750	; 0x2ee
 80003a4:	607b      	str	r3, [r7, #4]
	unsigned int position_maximum = 1250;
 80003a6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80003aa:	603b      	str	r3, [r7, #0]

	unsigned int position = position_center;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	60fb      	str	r3, [r7, #12]

	set_pmw_handler_all_channels_pulse_width(htim1, position);
 80003b0:	4e5e      	ldr	r6, [pc, #376]	; (800052c <main+0x1c4>)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	930c      	str	r3, [sp, #48]	; 0x30
 80003b6:	466d      	mov	r5, sp
 80003b8:	f106 0410 	add.w	r4, r6, #16
 80003bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003d0:	f7ff ffb1 	bl	8000336 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim2, position);
 80003d4:	4e56      	ldr	r6, [pc, #344]	; (8000530 <main+0x1c8>)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	930c      	str	r3, [sp, #48]	; 0x30
 80003da:	466d      	mov	r5, sp
 80003dc:	f106 0410 	add.w	r4, r6, #16
 80003e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003f4:	f7ff ff9f 	bl	8000336 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim3, position);
 80003f8:	4e4e      	ldr	r6, [pc, #312]	; (8000534 <main+0x1cc>)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	930c      	str	r3, [sp, #48]	; 0x30
 80003fe:	466d      	mov	r5, sp
 8000400:	f106 0410 	add.w	r4, r6, #16
 8000404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800040a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800040c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000410:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000414:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000418:	f7ff ff8d 	bl	8000336 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim4, position);
 800041c:	4e46      	ldr	r6, [pc, #280]	; (8000538 <main+0x1d0>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	930c      	str	r3, [sp, #48]	; 0x30
 8000422:	466d      	mov	r5, sp
 8000424:	f106 0410 	add.w	r4, r6, #16
 8000428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800042a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800042c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800042e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000430:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000434:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000438:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800043c:	f7ff ff7b 	bl	8000336 <set_pmw_handler_all_channels_pulse_width>

	HAL_TIM_PWM_Start_AllChannels(&htim1);
 8000440:	483a      	ldr	r0, [pc, #232]	; (800052c <main+0x1c4>)
 8000442:	f7ff ff51 	bl	80002e8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim2);
 8000446:	483a      	ldr	r0, [pc, #232]	; (8000530 <main+0x1c8>)
 8000448:	f7ff ff4e 	bl	80002e8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim3);
 800044c:	4839      	ldr	r0, [pc, #228]	; (8000534 <main+0x1cc>)
 800044e:	f7ff ff4b 	bl	80002e8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim4);
 8000452:	4839      	ldr	r0, [pc, #228]	; (8000538 <main+0x1d0>)
 8000454:	f7ff ff48 	bl	80002e8 <HAL_TIM_PWM_Start_AllChannels>
			uint8_t Buf[] = "\r\nWe are ON baby\r\n";
			CDC_Transmit_FS(Buf, sizeof(Buf));
		}
		*/

		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8000458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045c:	4837      	ldr	r0, [pc, #220]	; (800053c <main+0x1d4>)
 800045e:	f001 f94b 	bl	80016f8 <HAL_GPIO_TogglePin>

		set_pmw_handler_all_channels_pulse_width(htim1, position);
 8000462:	4e32      	ldr	r6, [pc, #200]	; (800052c <main+0x1c4>)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	930c      	str	r3, [sp, #48]	; 0x30
 8000468:	466d      	mov	r5, sp
 800046a:	f106 0410 	add.w	r4, r6, #16
 800046e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000476:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800047a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800047e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000482:	f7ff ff58 	bl	8000336 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim2, position);
 8000486:	4e2a      	ldr	r6, [pc, #168]	; (8000530 <main+0x1c8>)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	930c      	str	r3, [sp, #48]	; 0x30
 800048c:	466d      	mov	r5, sp
 800048e:	f106 0410 	add.w	r4, r6, #16
 8000492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800049a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800049e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004a6:	f7ff ff46 	bl	8000336 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim3, position);
 80004aa:	4e22      	ldr	r6, [pc, #136]	; (8000534 <main+0x1cc>)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	930c      	str	r3, [sp, #48]	; 0x30
 80004b0:	466d      	mov	r5, sp
 80004b2:	f106 0410 	add.w	r4, r6, #16
 80004b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004ca:	f7ff ff34 	bl	8000336 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim4, position);
 80004ce:	4e1a      	ldr	r6, [pc, #104]	; (8000538 <main+0x1d0>)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	930c      	str	r3, [sp, #48]	; 0x30
 80004d4:	466d      	mov	r5, sp
 80004d6:	f106 0410 	add.w	r4, r6, #16
 80004da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004ee:	f7ff ff22 	bl	8000336 <set_pmw_handler_all_channels_pulse_width>

		position++;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
		if (position >= position_maximum) {
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d30f      	bcc.n	8000520 <main+0x1b8>
			position = position_minimum;
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	60fb      	str	r3, [r7, #12]
			htim2.Instance->CCR1 = position;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <main+0x1c8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin,
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <main+0x1d4>)
 8000514:	f001 f8d8 	bl	80016c8 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_Delay(600);
 8000518:	f44f 7016 	mov.w	r0, #600	; 0x258
 800051c:	f000 fe4a 	bl	80011b4 <HAL_Delay>
		}

		HAL_Delay(5000);
 8000520:	f241 3088 	movw	r0, #5000	; 0x1388
 8000524:	f000 fe46 	bl	80011b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8000528:	e796      	b.n	8000458 <main+0xf0>
 800052a:	bf00      	nop
 800052c:	20000808 	.word	0x20000808
 8000530:	20000848 	.word	0x20000848
 8000534:	200007c8 	.word	0x200007c8
 8000538:	20000788 	.word	0x20000788
 800053c:	40011000 	.word	0x40011000

08000540 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	2228      	movs	r2, #40	; 0x28
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f006 fec9 	bl	80072e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f8d0 	bl	800273c <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x66>
		Error_Handler();
 80005a2:	f000 f827 	bl	80005f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fb3a 	bl	8002c3c <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x92>
		Error_Handler();
 80005ce:	f000 f811 	bl	80005f4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005d2:	2310      	movs	r3, #16
 80005d4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fcb5 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xac>
		Error_Handler();
 80005e8:	f000 f804 	bl	80005f4 <Error_Handler>
	}
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_SPI1_Init+0x64>)
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <MX_SPI1_Init+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_SPI1_Init+0x64>)
 800060c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_SPI1_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_SPI1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_SPI1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_SPI1_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_SPI1_Init+0x64>)
 800062c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_SPI1_Init+0x64>)
 8000634:	2208      	movs	r2, #8
 8000636:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_SPI1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_SPI1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_SPI1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_SPI1_Init+0x64>)
 800064c:	220a      	movs	r2, #10
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_SPI1_Init+0x64>)
 8000652:	f002 fd31 	bl	80030b8 <HAL_SPI_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800065c:	f7ff ffca 	bl	80005f4 <Error_Handler>
  }

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000730 	.word	0x20000730
 8000668:	40013000 	.word	0x40013000

0800066c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <MX_SPI2_Init+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_SPI2_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_SPI2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_SPI2_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006b6:	220a      	movs	r2, #10
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006bc:	f002 fcfc 	bl	80030b8 <HAL_SPI_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80006c6:	f7ff ff95 	bl	80005f4 <Error_Handler>
  }

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200006d8 	.word	0x200006d8
 80006d4:	40003800 	.word	0x40003800

080006d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a3e      	ldr	r2, [pc, #248]	; (80007ec <HAL_SPI_MspInit+0x114>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d13e      	bne.n	8000776 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f8:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 80006fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a36      	ldr	r2, [pc, #216]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000728:	2328      	movs	r3, #40	; 0x28
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	482e      	ldr	r0, [pc, #184]	; (80007f4 <HAL_SPI_MspInit+0x11c>)
 800073c:	f000 fe6a 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000740:	2310      	movs	r3, #16
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4828      	ldr	r0, [pc, #160]	; (80007f4 <HAL_SPI_MspInit+0x11c>)
 8000754:	f000 fe5e 	bl	8001414 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <HAL_SPI_MspInit+0x120>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800076e:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <HAL_SPI_MspInit+0x120>)
 8000770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000772:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000774:	e036      	b.n	80007e4 <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a20      	ldr	r2, [pc, #128]	; (80007fc <HAL_SPI_MspInit+0x124>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d131      	bne.n	80007e4 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a1a      	ldr	r2, [pc, #104]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_SPI_MspInit+0x118>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80007b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	480b      	ldr	r0, [pc, #44]	; (80007f4 <HAL_SPI_MspInit+0x11c>)
 80007c6:	f000 fe25 	bl	8001414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <HAL_SPI_MspInit+0x11c>)
 80007e0:	f000 fe18 	bl	8001414 <HAL_GPIO_Init>
}
 80007e4:	bf00      	nop
 80007e6:	3730      	adds	r7, #48	; 0x30
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40013000 	.word	0x40013000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010c00 	.word	0x40010c00
 80007f8:	40010000 	.word	0x40010000
 80007fc:	40003800 	.word	0x40003800

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_MspInit+0x5c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_MspInit+0x5c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x5c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_MspInit+0x5c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_MspInit+0x5c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_MspInit+0x60>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_MspInit+0x60>)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40021000 	.word	0x40021000
 8000860:	40010000 	.word	0x40010000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <HardFault_Handler+0x4>

08000876 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <BusFault_Handler+0x4>

08000882 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 fc64 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008be:	f001 f962 	bl	8001b86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000b80 	.word	0x20000b80

080008cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <TIM2_IRQHandler+0x10>)
 80008d2:	f002 fd17 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000848 	.word	0x20000848

080008e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TIM3_IRQHandler+0x10>)
 80008e6:	f002 fd0d 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200007c8 	.word	0x200007c8

080008f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM4_IRQHandler+0x10>)
 80008fa:	f002 fd03 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000788 	.word	0x20000788

08000908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <SystemInit+0x5c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <SystemInit+0x5c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <SystemInit+0x5c>)
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	4911      	ldr	r1, [pc, #68]	; (8000964 <SystemInit+0x5c>)
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <SystemInit+0x60>)
 8000920:	4013      	ands	r3, r2
 8000922:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <SystemInit+0x5c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <SystemInit+0x5c>)
 800092a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800092e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000932:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SystemInit+0x5c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <SystemInit+0x5c>)
 800093a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800093e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <SystemInit+0x5c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <SystemInit+0x5c>)
 8000946:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800094a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SystemInit+0x5c>)
 800094e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000952:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SystemInit+0x64>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095a:	609a      	str	r2, [r3, #8]
#endif 
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000
 8000968:	f8ff0000 	.word	0xf8ff0000
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b096      	sub	sp, #88	; 0x58
 8000974:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2220      	movs	r2, #32
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f006 fc9c 	bl	80072e6 <memset>

  htim1.Instance = TIM1;
 80009ae:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009b0:	4a4a      	ldr	r2, [pc, #296]	; (8000adc <MX_TIM1_Init+0x16c>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144-1;
 80009b4:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009b6:	228f      	movs	r2, #143	; 0x8f
 80009b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009c0:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80009c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009da:	483f      	ldr	r0, [pc, #252]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009dc:	f002 fbcd 	bl	800317a <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009e6:	f7ff fe05 	bl	80005f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009f4:	4619      	mov	r1, r3
 80009f6:	4838      	ldr	r0, [pc, #224]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009f8:	f002 feb2 	bl	8003760 <HAL_TIM_ConfigClockSource>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a02:	f7ff fdf7 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a06:	4834      	ldr	r0, [pc, #208]	; (8000ad8 <MX_TIM1_Init+0x168>)
 8000a08:	f002 fbe2 	bl	80031d0 <HAL_TIM_OC_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a12:	f7ff fdef 	bl	80005f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a22:	4619      	mov	r1, r3
 8000a24:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <MX_TIM1_Init+0x168>)
 8000a26:	f003 fa23 	bl	8003e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a30:	f7ff fde0 	bl	80005f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	4619      	mov	r1, r3
 8000a58:	481f      	ldr	r0, [pc, #124]	; (8000ad8 <MX_TIM1_Init+0x168>)
 8000a5a:	f002 fd5b 	bl	8003514 <HAL_TIM_OC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a64:	f7ff fdc6 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <MX_TIM1_Init+0x168>)
 8000a72:	f002 fd4f 	bl	8003514 <HAL_TIM_OC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a7c:	f7ff fdba 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	2208      	movs	r2, #8
 8000a86:	4619      	mov	r1, r3
 8000a88:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <MX_TIM1_Init+0x168>)
 8000a8a:	f002 fd43 	bl	8003514 <HAL_TIM_OC_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a94:	f7ff fdae 	bl	80005f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <MX_TIM1_Init+0x168>)
 8000abc:	f003 fa1c 	bl	8003ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000ac6:	f7ff fd95 	bl	80005f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <MX_TIM1_Init+0x168>)
 8000acc:	f000 fa3e 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 8000ad0:	bf00      	nop
 8000ad2:	3758      	adds	r7, #88	; 0x58
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000808 	.word	0x20000808
 8000adc:	40012c00 	.word	0x40012c00

08000ae0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000b10:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000b18:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b1a:	228f      	movs	r2, #143	; 0x8f
 8000b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000b24:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b26:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b38:	4833      	ldr	r0, [pc, #204]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b3a:	f002 fb1e 	bl	800317a <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b44:	f7ff fd56 	bl	80005f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b52:	4619      	mov	r1, r3
 8000b54:	482c      	ldr	r0, [pc, #176]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b56:	f002 fe03 	bl	8003760 <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b60:	f7ff fd48 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b64:	4828      	ldr	r0, [pc, #160]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b66:	f002 fb67 	bl	8003238 <HAL_TIM_PWM_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b70:	f7ff fd40 	bl	80005f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4619      	mov	r1, r3
 8000b82:	4821      	ldr	r0, [pc, #132]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000b84:	f003 f974 	bl	8003e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b8e:	f7ff fd31 	bl	80005f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b92:	2360      	movs	r3, #96	; 0x60
 8000b94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4817      	ldr	r0, [pc, #92]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000baa:	f002 fd13 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bb4:	f7ff fd1e 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4812      	ldr	r0, [pc, #72]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000bc0:	f002 fd08 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bca:	f7ff fd13 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000bd6:	f002 fcfd 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000be0:	f7ff fd08 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	220c      	movs	r2, #12
 8000be8:	4619      	mov	r1, r3
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000bec:	f002 fcf2 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000bf6:	f7ff fcfd 	bl	80005f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <MX_TIM2_Init+0x128>)
 8000bfc:	f000 f9a6 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 8000c00:	bf00      	nop
 8000c02:	3738      	adds	r7, #56	; 0x38
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000848 	.word	0x20000848

08000c0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	; (8000d38 <MX_TIM3_Init+0x12c>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 144-1;
 8000c42:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c44:	228f      	movs	r2, #143	; 0x8f
 8000c46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000c4e:	4b39      	ldr	r3, [pc, #228]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c50:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b37      	ldr	r3, [pc, #220]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c62:	4834      	ldr	r0, [pc, #208]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c64:	f002 fa89 	bl	800317a <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c6e:	f7ff fcc1 	bl	80005f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	482d      	ldr	r0, [pc, #180]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c80:	f002 fd6e 	bl	8003760 <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c8a:	f7ff fcb3 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c8e:	4829      	ldr	r0, [pc, #164]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000c90:	f002 fad2 	bl	8003238 <HAL_TIM_PWM_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c9a:	f7ff fcab 	bl	80005f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	4619      	mov	r1, r3
 8000cac:	4821      	ldr	r0, [pc, #132]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000cae:	f003 f8df 	bl	8003e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000cb8:	f7ff fc9c 	bl	80005f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbc:	2360      	movs	r3, #96	; 0x60
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000cd4:	f002 fc7e 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cde:	f7ff fc89 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000cea:	f002 fc73 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000cf4:	f7ff fc7e 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000d00:	f002 fc68 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000d0a:	f7ff fc73 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	220c      	movs	r2, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000d16:	f002 fc5d 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000d20:	f7ff fc68 	bl	80005f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM3_Init+0x128>)
 8000d26:	f000 f911 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 8000d2a:	bf00      	nop
 8000d2c:	3738      	adds	r7, #56	; 0x38
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200007c8 	.word	0x200007c8
 8000d38:	40000400 	.word	0x40000400

08000d3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000d6c:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000d6e:	4a3e      	ldr	r2, [pc, #248]	; (8000e68 <MX_TIM4_Init+0x12c>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8000d72:	4b3c      	ldr	r3, [pc, #240]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000d74:	228f      	movs	r2, #143	; 0x8f
 8000d76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000d80:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d86:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d92:	4834      	ldr	r0, [pc, #208]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000d94:	f002 f9f1 	bl	800317a <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d9e:	f7ff fc29 	bl	80005f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dac:	4619      	mov	r1, r3
 8000dae:	482d      	ldr	r0, [pc, #180]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000db0:	f002 fcd6 	bl	8003760 <HAL_TIM_ConfigClockSource>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000dba:	f7ff fc1b 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dbe:	4829      	ldr	r0, [pc, #164]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000dc0:	f002 fa3a 	bl	8003238 <HAL_TIM_PWM_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000dca:	f7ff fc13 	bl	80005f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4821      	ldr	r0, [pc, #132]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000dde:	f003 f847 	bl	8003e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000de8:	f7ff fc04 	bl	80005f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dec:	2360      	movs	r3, #96	; 0x60
 8000dee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000e04:	f002 fbe6 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e0e:	f7ff fbf1 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2204      	movs	r2, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4812      	ldr	r0, [pc, #72]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000e1a:	f002 fbdb 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e24:	f7ff fbe6 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480d      	ldr	r0, [pc, #52]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000e30:	f002 fbd0 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000e3a:	f7ff fbdb 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	220c      	movs	r2, #12
 8000e42:	4619      	mov	r1, r3
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000e46:	f002 fbc5 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000e50:	f7ff fbd0 	bl	80005f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <MX_TIM4_Init+0x128>)
 8000e56:	f000 f879 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 8000e5a:	bf00      	nop
 8000e5c:	3738      	adds	r7, #56	; 0x38
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000788 	.word	0x20000788
 8000e68:	40000800 	.word	0x40000800

08000e6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a30      	ldr	r2, [pc, #192]	; (8000f3c <HAL_TIM_Base_MspInit+0xd0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10c      	bne.n	8000e98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e96:	e04c      	b.n	8000f32 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea0:	d114      	bne.n	8000ecc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea2:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	f000 fa71 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec4:	201c      	movs	r0, #28
 8000ec6:	f000 fa8a 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000eca:	e032      	b.n	8000f32 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_TIM_Base_MspInit+0xd8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d114      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	61d3      	str	r3, [r2, #28]
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	201d      	movs	r0, #29
 8000ef4:	f000 fa57 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ef8:	201d      	movs	r0, #29
 8000efa:	f000 fa70 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000efe:	e018      	b.n	8000f32 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_TIM_Base_MspInit+0xdc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d113      	bne.n	8000f32 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	61d3      	str	r3, [r2, #28]
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_TIM_Base_MspInit+0xd4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	201e      	movs	r0, #30
 8000f28:	f000 fa3d 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f2c:	201e      	movs	r0, #30
 8000f2e:	f000 fa56 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40012c00 	.word	0x40012c00
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40000400 	.word	0x40000400
 8000f48:	40000800 	.word	0x40000800

08000f4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a49      	ldr	r2, [pc, #292]	; (800108c <HAL_TIM_MspPostInit+0x140>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d119      	bne.n	8000fa0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b48      	ldr	r3, [pc, #288]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a47      	ldr	r2, [pc, #284]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b45      	ldr	r3, [pc, #276]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f84:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	4619      	mov	r1, r3
 8000f98:	483e      	ldr	r0, [pc, #248]	; (8001094 <HAL_TIM_MspPostInit+0x148>)
 8000f9a:	f000 fa3b 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f9e:	e071      	b.n	8001084 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa8:	d118      	bne.n	8000fdc <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a38      	ldr	r2, [pc, #224]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482f      	ldr	r0, [pc, #188]	; (8001094 <HAL_TIM_MspPostInit+0x148>)
 8000fd6:	f000 fa1d 	bl	8001414 <HAL_GPIO_Init>
}
 8000fda:	e053      	b.n	8001084 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a2d      	ldr	r2, [pc, #180]	; (8001098 <HAL_TIM_MspPostInit+0x14c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d130      	bne.n	8001048 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a29      	ldr	r2, [pc, #164]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001016:	23c0      	movs	r3, #192	; 0xc0
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2302      	movs	r3, #2
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	4619      	mov	r1, r3
 8001028:	481a      	ldr	r0, [pc, #104]	; (8001094 <HAL_TIM_MspPostInit+0x148>)
 800102a:	f000 f9f3 	bl	8001414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2302      	movs	r3, #2
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	4619      	mov	r1, r3
 8001040:	4816      	ldr	r0, [pc, #88]	; (800109c <HAL_TIM_MspPostInit+0x150>)
 8001042:	f000 f9e7 	bl	8001414 <HAL_GPIO_Init>
}
 8001046:	e01d      	b.n	8001084 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_TIM_MspPostInit+0x154>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d118      	bne.n	8001084 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_TIM_MspPostInit+0x144>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800106a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2302      	movs	r3, #2
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4619      	mov	r1, r3
 800107e:	4807      	ldr	r0, [pc, #28]	; (800109c <HAL_TIM_MspPostInit+0x150>)
 8001080:	f000 f9c8 	bl	8001414 <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	; 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012c00 	.word	0x40012c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40010800 	.word	0x40010800
 8001098:	40000400 	.word	0x40000400
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40000800 	.word	0x40000800

080010a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010a6:	e003      	b.n	80010b0 <LoopCopyDataInit>

080010a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010ae:	3104      	adds	r1, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010b8:	d3f6      	bcc.n	80010a8 <CopyDataInit>
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010bc:	e002      	b.n	80010c4 <LoopFillZerobss>

080010be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010c0:	f842 3b04 	str.w	r3, [r2], #4

080010c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010c8:	d3f9      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ca:	f7ff fc1d 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f006 f8db 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d2:	f7ff f949 	bl	8000368 <main>
  bx lr
 80010d6:	4770      	bx	lr
  ldr r3, =_sidata
 80010d8:	08007390 	.word	0x08007390
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010e0:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80010e4:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80010e8:	20000dec 	.word	0x20000dec

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x28>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x28>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f945 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fb78 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f95d 	bl	80013fa <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f925 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	20000008 	.word	0x20000008
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <HAL_IncTick+0x20>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000008 	.word	0x20000008
 800119c:	20000888 	.word	0x20000888

080011a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	20000888 	.word	0x20000888

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff fff0 	bl	80011a0 <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_Delay+0x40>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffe0 	bl	80011a0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4906      	ldr	r1, [pc, #24]	; (8001290 <__NVIC_EnableIRQ+0x34>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff90 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff2d 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff42 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff90 	bl	80012e8 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5f 	bl	8001294 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff35 	bl	800125c <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b08b      	sub	sp, #44	; 0x2c
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	e127      	b.n	8001678 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001428:	2201      	movs	r2, #1
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8116 	bne.w	8001672 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b12      	cmp	r3, #18
 800144c:	d034      	beq.n	80014b8 <HAL_GPIO_Init+0xa4>
 800144e:	2b12      	cmp	r3, #18
 8001450:	d80d      	bhi.n	800146e <HAL_GPIO_Init+0x5a>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d02b      	beq.n	80014ae <HAL_GPIO_Init+0x9a>
 8001456:	2b02      	cmp	r3, #2
 8001458:	d804      	bhi.n	8001464 <HAL_GPIO_Init+0x50>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d031      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d01c      	beq.n	800149c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001462:	e048      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001464:	2b03      	cmp	r3, #3
 8001466:	d043      	beq.n	80014f0 <HAL_GPIO_Init+0xdc>
 8001468:	2b11      	cmp	r3, #17
 800146a:	d01b      	beq.n	80014a4 <HAL_GPIO_Init+0x90>
          break;
 800146c:	e043      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800146e:	4a89      	ldr	r2, [pc, #548]	; (8001694 <HAL_GPIO_Init+0x280>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d026      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001474:	4a87      	ldr	r2, [pc, #540]	; (8001694 <HAL_GPIO_Init+0x280>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d806      	bhi.n	8001488 <HAL_GPIO_Init+0x74>
 800147a:	4a87      	ldr	r2, [pc, #540]	; (8001698 <HAL_GPIO_Init+0x284>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d020      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001480:	4a86      	ldr	r2, [pc, #536]	; (800169c <HAL_GPIO_Init+0x288>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01d      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
          break;
 8001486:	e036      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001488:	4a85      	ldr	r2, [pc, #532]	; (80016a0 <HAL_GPIO_Init+0x28c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 800148e:	4a85      	ldr	r2, [pc, #532]	; (80016a4 <HAL_GPIO_Init+0x290>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d016      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001494:	4a84      	ldr	r2, [pc, #528]	; (80016a8 <HAL_GPIO_Init+0x294>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
          break;
 800149a:	e02c      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e028      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	3304      	adds	r3, #4
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e023      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	3308      	adds	r3, #8
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e01e      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	330c      	adds	r3, #12
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e019      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ca:	2304      	movs	r3, #4
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e012      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d8:	2308      	movs	r3, #8
 80014da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	611a      	str	r2, [r3, #16]
          break;
 80014e2:	e008      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e4:	2308      	movs	r3, #8
 80014e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	615a      	str	r2, [r3, #20]
          break;
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2bff      	cmp	r3, #255	; 0xff
 80014fa:	d801      	bhi.n	8001500 <HAL_GPIO_Init+0xec>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	e001      	b.n	8001504 <HAL_GPIO_Init+0xf0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3304      	adds	r3, #4
 8001504:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2bff      	cmp	r3, #255	; 0xff
 800150a:	d802      	bhi.n	8001512 <HAL_GPIO_Init+0xfe>
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x104>
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	3b08      	subs	r3, #8
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	210f      	movs	r1, #15
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	6a39      	ldr	r1, [r7, #32]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	431a      	orrs	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8096 	beq.w	8001672 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001546:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_GPIO_Init+0x298>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_GPIO_Init+0x298>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b56      	ldr	r3, [pc, #344]	; (80016ac <HAL_GPIO_Init+0x298>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800155e:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_GPIO_Init+0x29c>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <HAL_GPIO_Init+0x2a0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x19e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <HAL_GPIO_Init+0x2a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x19a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_GPIO_Init+0x2a8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x196>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_GPIO_Init+0x2ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x192>
 80015a2:	2303      	movs	r3, #3
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015b2:	2300      	movs	r3, #0
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015c4:	493a      	ldr	r1, [pc, #232]	; (80016b0 <HAL_GPIO_Init+0x29c>)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4938      	ldr	r1, [pc, #224]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
 80015ea:	e006      	b.n	80015fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4933      	ldr	r1, [pc, #204]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	492e      	ldr	r1, [pc, #184]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	43db      	mvns	r3, r3
 800161c:	4929      	ldr	r1, [pc, #164]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800161e:	4013      	ands	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	4924      	ldr	r1, [pc, #144]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	43db      	mvns	r3, r3
 8001644:	491f      	ldr	r1, [pc, #124]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001646:	4013      	ands	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	491a      	ldr	r1, [pc, #104]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	60cb      	str	r3, [r1, #12]
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	43db      	mvns	r3, r3
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800166e:	4013      	ands	r3, r2
 8001670:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	3301      	adds	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	f47f aed0 	bne.w	8001428 <HAL_GPIO_Init+0x14>
  }
}
 8001688:	bf00      	nop
 800168a:	372c      	adds	r7, #44	; 0x2c
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	10210000 	.word	0x10210000
 8001698:	10110000 	.word	0x10110000
 800169c:	10120000 	.word	0x10120000
 80016a0:	10310000 	.word	0x10310000
 80016a4:	10320000 	.word	0x10320000
 80016a8:	10220000 	.word	0x10220000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40010800 	.word	0x40010800
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40011400 	.word	0x40011400
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	611a      	str	r2, [r3, #16]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001710:	887a      	ldrh	r2, [r7, #2]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001716:	e002      	b.n	800171e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001718:	887a      	ldrh	r2, [r7, #2]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	611a      	str	r2, [r3, #16]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e10f      	b.n	800195a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe fd8a 	bl	8000268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2224      	movs	r2, #36	; 0x24
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800176c:	f001 fbbc 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8001770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a7b      	ldr	r2, [pc, #492]	; (8001964 <HAL_I2C_Init+0x23c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d807      	bhi.n	800178c <HAL_I2C_Init+0x64>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a7a      	ldr	r2, [pc, #488]	; (8001968 <HAL_I2C_Init+0x240>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e006      	b.n	800179a <HAL_I2C_Init+0x72>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4a77      	ldr	r2, [pc, #476]	; (800196c <HAL_I2C_Init+0x244>)
 8001790:	4293      	cmp	r3, r2
 8001792:	bf94      	ite	ls
 8001794:	2301      	movls	r3, #1
 8001796:	2300      	movhi	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0db      	b.n	800195a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4a72      	ldr	r2, [pc, #456]	; (8001970 <HAL_I2C_Init+0x248>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a64      	ldr	r2, [pc, #400]	; (8001964 <HAL_I2C_Init+0x23c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d802      	bhi.n	80017dc <HAL_I2C_Init+0xb4>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3301      	adds	r3, #1
 80017da:	e009      	b.n	80017f0 <HAL_I2C_Init+0xc8>
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4a63      	ldr	r2, [pc, #396]	; (8001974 <HAL_I2C_Init+0x24c>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	3301      	adds	r3, #1
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4956      	ldr	r1, [pc, #344]	; (8001964 <HAL_I2C_Init+0x23c>)
 800180c:	428b      	cmp	r3, r1
 800180e:	d80d      	bhi.n	800182c <HAL_I2C_Init+0x104>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1e59      	subs	r1, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fbb1 f3f3 	udiv	r3, r1, r3
 800181e:	3301      	adds	r3, #1
 8001820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001824:	2b04      	cmp	r3, #4
 8001826:	bf38      	it	cc
 8001828:	2304      	movcc	r3, #4
 800182a:	e04f      	b.n	80018cc <HAL_I2C_Init+0x1a4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <HAL_I2C_Init+0x130>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e58      	subs	r0, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	440b      	add	r3, r1
 8001842:	fbb0 f3f3 	udiv	r3, r0, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e012      	b.n	800187e <HAL_I2C_Init+0x156>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	0099      	lsls	r1, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Init+0x15e>
 8001882:	2301      	movs	r3, #1
 8001884:	e022      	b.n	80018cc <HAL_I2C_Init+0x1a4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10e      	bne.n	80018ac <HAL_I2C_Init+0x184>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e58      	subs	r0, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	440b      	add	r3, r1
 800189c:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018aa:	e00f      	b.n	80018cc <HAL_I2C_Init+0x1a4>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	0099      	lsls	r1, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6809      	ldr	r1, [r1, #0]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6911      	ldr	r1, [r2, #16]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68d2      	ldr	r2, [r2, #12]
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	430b      	orrs	r3, r1
 800190e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	000186a0 	.word	0x000186a0
 8001968:	001e847f 	.word	0x001e847f
 800196c:	003d08ff 	.word	0x003d08ff
 8001970:	431bde83 	.word	0x431bde83
 8001974:	10624dd3 	.word	0x10624dd3

08001978 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	b08b      	sub	sp, #44	; 0x2c
 800197c:	af06      	add	r7, sp, #24
 800197e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0d3      	b.n	8001b32 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f005 f9d4 	bl	8006d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2203      	movs	r2, #3
 80019a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fb2b 	bl	800400c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	687e      	ldr	r6, [r7, #4]
 80019be:	466d      	mov	r5, sp
 80019c0:	f106 0410 	add.w	r4, r6, #16
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	602b      	str	r3, [r5, #0]
 80019cc:	1d33      	adds	r3, r6, #4
 80019ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d0:	6838      	ldr	r0, [r7, #0]
 80019d2:	f002 faf4 	bl	8003fbe <USB_CoreInit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0a4      	b.n	8001b32 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fb28 	bl	8004044 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e035      	b.n	8001a66 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	015b      	lsls	r3, r3, #5
 8001a00:	4413      	add	r3, r2
 8001a02:	3329      	adds	r3, #41	; 0x29
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	015b      	lsls	r3, r3, #5
 8001a0e:	4413      	add	r3, r2
 8001a10:	3328      	adds	r3, #40	; 0x28
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	b291      	uxth	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	4413      	add	r3, r2
 8001a22:	3336      	adds	r3, #54	; 0x36
 8001a24:	460a      	mov	r2, r1
 8001a26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	015b      	lsls	r3, r3, #5
 8001a2e:	4413      	add	r3, r2
 8001a30:	332b      	adds	r3, #43	; 0x2b
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3338      	adds	r3, #56	; 0x38
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	015b      	lsls	r3, r3, #5
 8001a4a:	4413      	add	r3, r2
 8001a4c:	333c      	adds	r3, #60	; 0x3c
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	3302      	adds	r3, #2
 8001a58:	015b      	lsls	r3, r3, #5
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	3301      	adds	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3c4      	bcc.n	80019fa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e031      	b.n	8001ada <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	015b      	lsls	r3, r3, #5
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	015b      	lsls	r3, r3, #5
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	015b      	lsls	r3, r3, #5
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	330a      	adds	r3, #10
 8001acc:	015b      	lsls	r3, r3, #5
 8001ace:	4413      	add	r3, r2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3c8      	bcc.n	8001a76 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	687e      	ldr	r6, [r7, #4]
 8001aec:	466d      	mov	r5, sp
 8001aee:	f106 0410 	add.w	r4, r6, #16
 8001af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	602b      	str	r3, [r5, #0]
 8001afa:	1d33      	adds	r3, r6, #4
 8001afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afe:	6838      	ldr	r0, [r7, #0]
 8001b00:	f002 faac 	bl	800405c <USB_DevInit>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00d      	b.n	8001b32 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fae9 	bl	8005102 <USB_DevDisconnect>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_PCD_Start+0x16>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e016      	b.n	8001b7e <HAL_PCD_Start+0x44>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f005 fb5d 	bl	800721a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fac2 	bl	80050ee <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 fa35 	bl	8003fde <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fabf 	bl	8005116 <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ba2:	d102      	bne.n	8001baa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 faf3 	bl	8002190 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fab1 	bl	8005116 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d112      	bne.n	8001be6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd2:	b292      	uxth	r2, r2
 8001bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f005 f92c 	bl	8006e36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bde:	2100      	movs	r1, #0
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8de 	bl	8001da2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fa93 	bl	8005116 <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bfa:	d10b      	bne.n	8001c14 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fa7c 	bl	8005116 <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c28:	d10b      	bne.n	8001c42 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c3c:	b292      	uxth	r2, r2
 8001c3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fa65 	bl	8005116 <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c56:	d126      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0208 	bic.w	r2, r2, #8
 8001c82:	b292      	uxth	r2, r2
 8001c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f005 f90d 	bl	8006ea8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fa33 	bl	8005116 <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cba:	d13d      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0208 	orr.w	r2, r2, #8
 8001cce:	b292      	uxth	r2, r2
 8001cd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0204 	orr.w	r2, r2, #4
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fa04 	bl	8005116 <USB_ReadInterrupts>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d18:	d10b      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f005 f89e 	bl	8006e74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 f9ea 	bl	8005116 <USB_ReadInterrupts>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4c:	d10e      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d60:	b292      	uxth	r2, r2
 8001d62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f005 f857 	bl	8006e1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f9d0 	bl	8005116 <USB_ReadInterrupts>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d80:	d10b      	bne.n	8001d9a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d94:	b292      	uxth	r2, r2
 8001d96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_PCD_SetAddress+0x1a>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e013      	b.n	8001de4 <HAL_PCD_SetAddress+0x42>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 f977 	bl	80050c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	4608      	mov	r0, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	70fb      	strb	r3, [r7, #3]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	803b      	strh	r3, [r7, #0]
 8001e02:	4613      	mov	r3, r2
 8001e04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da0b      	bge.n	8001e2a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	015b      	lsls	r3, r3, #5
 8001e1a:	3328      	adds	r3, #40	; 0x28
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	705a      	strb	r2, [r3, #1]
 8001e28:	e00b      	b.n	8001e42 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	015b      	lsls	r3, r3, #5
 8001e32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e4e:	883a      	ldrh	r2, [r7, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	78ba      	ldrb	r2, [r7, #2]
 8001e58:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	785b      	ldrb	r3, [r3, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e6c:	78bb      	ldrb	r3, [r7, #2]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d102      	bne.n	8001e78 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_PCD_EP_Open+0x9a>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e00e      	b.n	8001ea4 <HAL_PCD_EP_Open+0xb8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 f905 	bl	80040a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da0b      	bge.n	8001ed8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	015b      	lsls	r3, r3, #5
 8001ec8:	3328      	adds	r3, #40	; 0x28
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	705a      	strb	r2, [r3, #1]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	015b      	lsls	r3, r3, #5
 8001ee0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_PCD_EP_Close+0x5e>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e00e      	b.n	8001f28 <HAL_PCD_EP_Close+0x7c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fbb1 	bl	8004680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	015b      	lsls	r3, r3, #5
 8001f48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2200      	movs	r2, #0
 8001f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d106      	bne.n	8001f8e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 fd10 	bl	80049ac <USB_EPStartXfer>
 8001f8c:	e005      	b.n	8001f9a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6979      	ldr	r1, [r7, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 fd09 	bl	80049ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	330a      	adds	r3, #10
 8001fba:	015b      	lsls	r3, r3, #5
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	681b      	ldr	r3, [r3, #0]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	3328      	adds	r3, #40	; 0x28
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2201      	movs	r2, #1
 8002002:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	b2da      	uxtb	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6979      	ldr	r1, [r7, #20]
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fcc3 	bl	80049ac <USB_EPStartXfer>
 8002026:	e005      	b.n	8002034 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6979      	ldr	r1, [r7, #20]
 800202e:	4618      	mov	r0, r3
 8002030:	f002 fcbc 	bl	80049ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 0207 	and.w	r2, r3, #7
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d901      	bls.n	800205c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e046      	b.n	80020ea <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da0b      	bge.n	800207c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	015b      	lsls	r3, r3, #5
 800206c:	3328      	adds	r3, #40	; 0x28
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	705a      	strb	r2, [r3, #1]
 800207a:	e009      	b.n	8002090 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	015b      	lsls	r3, r3, #5
 8002080:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	b2da      	uxtb	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_PCD_EP_SetStall+0x72>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e01c      	b.n	80020ea <HAL_PCD_EP_SetStall+0xac>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	4618      	mov	r0, r3
 80020c0:	f002 ff2c 	bl	8004f1c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f003 f82a 	bl	8005134 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 020f 	and.w	r2, r3, #15
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d901      	bls.n	8002110 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e03a      	b.n	8002186 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	da0b      	bge.n	8002130 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	015b      	lsls	r3, r3, #5
 8002120:	3328      	adds	r3, #40	; 0x28
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	705a      	strb	r2, [r3, #1]
 800212e:	e00b      	b.n	8002148 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	015b      	lsls	r3, r3, #5
 8002138:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_PCD_EP_ClrStall+0x76>
 8002164:	2302      	movs	r3, #2
 8002166:	e00e      	b.n	8002186 <HAL_PCD_EP_ClrStall+0x94>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	4618      	mov	r0, r3
 8002178:	f002 ff12 	bl	8004fa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002198:	e282      	b.n	80026a0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021a4:	8afb      	ldrh	r3, [r7, #22]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80021ae:	7d7b      	ldrb	r3, [r7, #21]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 8142 	bne.w	800243a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021b6:	8afb      	ldrh	r3, [r7, #22]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d151      	bne.n	8002264 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d0:	b29c      	uxth	r4, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80021da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021de:	b29b      	uxth	r3, r3
 80021e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3328      	adds	r3, #40	; 0x28
 80021e6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	3302      	adds	r3, #2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	441a      	add	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002222:	2100      	movs	r1, #0
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f004 fde1 	bl	8006dec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8234 	beq.w	80026a0 <PCD_EP_ISR_Handler+0x510>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 822f 	bne.w	80026a0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800224e:	b2da      	uxtb	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b292      	uxth	r2, r2
 8002256:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002262:	e21d      	b.n	80026a0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800226a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002274:	8a7b      	ldrh	r3, [r7, #18]
 8002276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227a:	2b00      	cmp	r3, #0
 800227c:	d033      	beq.n	80022e6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002286:	b29b      	uxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	3306      	adds	r3, #6
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f002 ff88 	bl	80051d2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022ce:	4013      	ands	r3, r2
 80022d0:	b29c      	uxth	r4, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80022da:	b292      	uxth	r2, r2
 80022dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f004 fd5a 	bl	8006d98 <HAL_PCD_SetupStageCallback>
 80022e4:	e1dc      	b.n	80026a0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f280 81d8 	bge.w	80026a0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022fc:	4013      	ands	r3, r2
 80022fe:	b29c      	uxth	r4, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002308:	b292      	uxth	r2, r2
 800230a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	3306      	adds	r3, #6
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d019      	beq.n	8002374 <PCD_EP_ISR_Handler+0x1e4>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6959      	ldr	r1, [r3, #20]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002358:	b29b      	uxth	r3, r3
 800235a:	f002 ff3a 	bl	80051d2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	441a      	add	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f004 fd24 	bl	8006dbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461c      	mov	r4, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002382:	b29b      	uxth	r3, r3
 8002384:	441c      	add	r4, r3
 8002386:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800238a:	461c      	mov	r4, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10e      	bne.n	80023b2 <PCD_EP_ISR_Handler+0x222>
 8002394:	8823      	ldrh	r3, [r4, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800239c:	b29b      	uxth	r3, r3
 800239e:	8023      	strh	r3, [r4, #0]
 80023a0:	8823      	ldrh	r3, [r4, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	8023      	strh	r3, [r4, #0]
 80023b0:	e02d      	b.n	800240e <PCD_EP_ISR_Handler+0x27e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b3e      	cmp	r3, #62	; 0x3e
 80023b8:	d812      	bhi.n	80023e0 <PCD_EP_ISR_Handler+0x250>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <PCD_EP_ISR_Handler+0x244>
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	029b      	lsls	r3, r3, #10
 80023da:	b29b      	uxth	r3, r3
 80023dc:	8023      	strh	r3, [r4, #0]
 80023de:	e016      	b.n	800240e <PCD_EP_ISR_Handler+0x27e>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <PCD_EP_ISR_Handler+0x26a>
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	b29b      	uxth	r3, r3
 8002402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240a:	b29b      	uxth	r3, r3
 800240c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800241a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241e:	b29c      	uxth	r4, r3
 8002420:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002424:	b29c      	uxth	r4, r3
 8002426:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800242a:	b29c      	uxth	r4, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4ba2      	ldr	r3, [pc, #648]	; (80026bc <PCD_EP_ISR_Handler+0x52c>)
 8002432:	4323      	orrs	r3, r4
 8002434:	b29b      	uxth	r3, r3
 8002436:	8013      	strh	r3, [r2, #0]
 8002438:	e132      	b.n	80026a0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	7d7b      	ldrb	r3, [r7, #21]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800244a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f280 80d1 	bge.w	80025f6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	7d7b      	ldrb	r3, [r7, #21]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29a      	uxth	r2, r3
 8002464:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002468:	4013      	ands	r3, r2
 800246a:	b29c      	uxth	r4, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	7d7b      	ldrb	r3, [r7, #21]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800247c:	b292      	uxth	r2, r2
 800247e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002480:	7d7b      	ldrb	r3, [r7, #21]
 8002482:	015b      	lsls	r3, r3, #5
 8002484:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	7b1b      	ldrb	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d121      	bne.n	80024da <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	3306      	adds	r3, #6
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024be:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80024c0:	8bfb      	ldrh	r3, [r7, #30]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d072      	beq.n	80025ac <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6959      	ldr	r1, [r3, #20]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	88da      	ldrh	r2, [r3, #6]
 80024d2:	8bfb      	ldrh	r3, [r7, #30]
 80024d4:	f002 fe7d 	bl	80051d2 <USB_ReadPMA>
 80024d8:	e068      	b.n	80025ac <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d021      	beq.n	8002538 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	3302      	adds	r3, #2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800251e:	8bfb      	ldrh	r3, [r7, #30]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d02a      	beq.n	800257a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6959      	ldr	r1, [r3, #20]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	891a      	ldrh	r2, [r3, #8]
 8002530:	8bfb      	ldrh	r3, [r7, #30]
 8002532:	f002 fe4e 	bl	80051d2 <USB_ReadPMA>
 8002536:	e020      	b.n	800257a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	3306      	adds	r3, #6
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002560:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002562:	8bfb      	ldrh	r3, [r7, #30]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6959      	ldr	r1, [r3, #20]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	895a      	ldrh	r2, [r3, #10]
 8002574:	8bfb      	ldrh	r3, [r7, #30]
 8002576:	f002 fe2c 	bl	80051d2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002594:	b29c      	uxth	r4, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	441a      	add	r2, r3
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <PCD_EP_ISR_Handler+0x530>)
 80025a6:	4323      	orrs	r3, r4
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	8bfb      	ldrh	r3, [r7, #30]
 80025b2:	441a      	add	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	8bfb      	ldrh	r3, [r7, #30]
 80025be:	441a      	add	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <PCD_EP_ISR_Handler+0x446>
 80025cc:	8bfa      	ldrh	r2, [r7, #30]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d206      	bcs.n	80025e4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f004 fbed 	bl	8006dbc <HAL_PCD_DataOutStageCallback>
 80025e2:	e008      	b.n	80025f6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	7819      	ldrb	r1, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fc9d 	bl	8001f30 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025f6:	8a7b      	ldrh	r3, [r7, #18]
 80025f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d04f      	beq.n	80026a0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002600:	7d7b      	ldrb	r3, [r7, #21]
 8002602:	015b      	lsls	r3, r3, #5
 8002604:	3328      	adds	r3, #40	; 0x28
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	7d7b      	ldrb	r3, [r7, #21]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002624:	b29c      	uxth	r4, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	7d7b      	ldrb	r3, [r7, #21]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263a:	b29b      	uxth	r3, r3
 800263c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	3302      	adds	r3, #2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	441a      	add	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f004 fbb0 	bl	8006dec <HAL_PCD_DataInStageCallback>
 800268c:	e008      	b.n	80026a0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	7819      	ldrb	r1, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff fc96 	bl	8001fcc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b21b      	sxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f6ff ad74 	blt.w	800219a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3724      	adds	r7, #36	; 0x24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	ffff8080 	.word	0xffff8080
 80026c0:	ffff80c0 	.word	0xffff80c0

080026c4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	817b      	strh	r3, [r7, #10]
 80026d2:	4613      	mov	r3, r2
 80026d4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026d6:	897b      	ldrh	r3, [r7, #10]
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	015b      	lsls	r3, r3, #5
 80026ea:	3328      	adds	r3, #40	; 0x28
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e006      	b.n	8002702 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002702:	893b      	ldrh	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2200      	movs	r2, #0
 800270c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	b29a      	uxth	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	80da      	strh	r2, [r3, #6]
 8002716:	e00b      	b.n	8002730 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2201      	movs	r2, #1
 800271c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	b29a      	uxth	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	b29a      	uxth	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e26c      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8087 	beq.w	800286a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800275c:	4b92      	ldr	r3, [pc, #584]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b04      	cmp	r3, #4
 8002766:	d00c      	beq.n	8002782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002768:	4b8f      	ldr	r3, [pc, #572]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b08      	cmp	r3, #8
 8002772:	d112      	bne.n	800279a <HAL_RCC_OscConfig+0x5e>
 8002774:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d10b      	bne.n	800279a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d06c      	beq.n	8002868 <HAL_RCC_OscConfig+0x12c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d168      	bne.n	8002868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e246      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x76>
 80027a4:	4b80      	ldr	r3, [pc, #512]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7f      	ldr	r2, [pc, #508]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e02e      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x98>
 80027ba:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7a      	ldr	r2, [pc, #488]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e01d      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0xbc>
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6e      	ldr	r2, [pc, #440]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027f8:	4b6b      	ldr	r3, [pc, #428]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6a      	ldr	r2, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a67      	ldr	r2, [pc, #412]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7fe fcc2 	bl	80011a0 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe fcbe 	bl	80011a0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1fa      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0xe4>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe fcae 	bl	80011a0 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe fcaa 	bl	80011a0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1e6      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x10c>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d063      	beq.n	800293e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002876:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b08      	cmp	r3, #8
 800288c:	d11c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x18c>
 800288e:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x176>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e1ba      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4939      	ldr	r1, [pc, #228]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	e03a      	b.n	800293e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d0:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fc63 	bl	80011a0 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe fc5f 	bl	80011a0 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e19b      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4927      	ldr	r1, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
 8002910:	e015      	b.n	800293e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fc42 	bl	80011a0 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7fe fc3e 	bl	80011a0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e17a      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03a      	beq.n	80029c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d019      	beq.n	8002986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_RCC_OscConfig+0x274>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7fe fc22 	bl	80011a0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7fe fc1e 	bl	80011a0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e15a      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800297e:	2001      	movs	r0, #1
 8002980:	f000 fac6 	bl	8002f10 <RCC_Delay>
 8002984:	e01c      	b.n	80029c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_RCC_OscConfig+0x274>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7fe fc08 	bl	80011a0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002992:	e00f      	b.n	80029b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe fc04 	bl	80011a0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d908      	bls.n	80029b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e140      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	42420000 	.word	0x42420000
 80029b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	4b9e      	ldr	r3, [pc, #632]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e9      	bne.n	8002994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a6 	beq.w	8002b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b97      	ldr	r3, [pc, #604]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b94      	ldr	r3, [pc, #592]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a93      	ldr	r2, [pc, #588]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	61d3      	str	r3, [r2, #28]
 80029ea:	4b91      	ldr	r3, [pc, #580]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b8e      	ldr	r3, [pc, #568]	; (8002c34 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b8b      	ldr	r3, [pc, #556]	; (8002c34 <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a8a      	ldr	r2, [pc, #552]	; (8002c34 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fbc5 	bl	80011a0 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe fbc1 	bl	80011a0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0fd      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <HAL_RCC_OscConfig+0x4f8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x312>
 8002a40:	4b7b      	ldr	r3, [pc, #492]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a7a      	ldr	r2, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	e02d      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x334>
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4a75      	ldr	r2, [pc, #468]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6213      	str	r3, [r2, #32]
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x356>
 8002a78:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4a6c      	ldr	r2, [pc, #432]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6213      	str	r3, [r2, #32]
 8002a84:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a69      	ldr	r2, [pc, #420]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a92:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a66      	ldr	r2, [pc, #408]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	4b64      	ldr	r3, [pc, #400]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a63      	ldr	r2, [pc, #396]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d015      	beq.n	8002ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fb75 	bl	80011a0 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fe fb71 	bl	80011a0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0ab      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ee      	beq.n	8002aba <HAL_RCC_OscConfig+0x37e>
 8002adc:	e014      	b.n	8002b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fb5f 	bl	80011a0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fb5b 	bl	80011a0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e095      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afc:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a47      	ldr	r2, [pc, #284]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8081 	beq.w	8002c26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d061      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d146      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCC_OscConfig+0x4fc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fb2f 	bl	80011a0 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe fb2b 	bl	80011a0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e067      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	492d      	ldr	r1, [pc, #180]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a19      	ldr	r1, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	430b      	orrs	r3, r1
 8002b92:	4927      	ldr	r1, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_RCC_OscConfig+0x4fc>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe faff 	bl	80011a0 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe fafb 	bl	80011a0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e037      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x46a>
 8002bc4:	e02f      	b.n	8002c26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <HAL_RCC_OscConfig+0x4fc>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fae8 	bl	80011a0 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fae4 	bl	80011a0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e020      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x498>
 8002bf2:	e018      	b.n	8002c26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e013      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
 8002c38:	42420060 	.word	0x42420060

08002c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0d0      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d910      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4965      	ldr	r1, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ca2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d040      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d115      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e073      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06b      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4936      	ldr	r1, [pc, #216]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fa38 	bl	80011a0 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7fe fa34 	bl	80011a0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e053      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d210      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4922      	ldr	r1, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 f821 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002dce:	4601      	mov	r1, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	fa21 f303 	lsr.w	r3, r1, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1cc>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1d0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f996 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08007370 	.word	0x08007370
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	b490      	push	{r4, r7}
 8002e12:	b08a      	sub	sp, #40	; 0x28
 8002e14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e16:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e18:	1d3c      	adds	r4, r7, #4
 8002e1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d002      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x40>
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0x46>
 8002e4e:	e02d      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e50:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e52:	623b      	str	r3, [r7, #32]
      break;
 8002e54:	e02d      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e62:	4413      	add	r3, r2
 8002e64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c5b      	lsrs	r3, r3, #17
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e82:	4413      	add	r3, r2
 8002e84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e8e:	fb02 f203 	mul.w	r2, r2, r3
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9a:	e004      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	623b      	str	r3, [r7, #32]
      break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eae:	623b      	str	r3, [r7, #32]
      break;
 8002eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc90      	pop	{r4, r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	08007310 	.word	0x08007310
 8002ec4:	08007320 	.word	0x08007320
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	007a1200 	.word	0x007a1200
 8002ed0:	003d0900 	.word	0x003d0900

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eec:	f7ff fff2 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	08007380 	.word	0x08007380

08002f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <RCC_Delay+0x34>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <RCC_Delay+0x38>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a5b      	lsrs	r3, r3, #9
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f2c:	bf00      	nop
  }
  while (Delay --);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	60fa      	str	r2, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <RCC_Delay+0x1c>
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000000 	.word	0x20000000
 8002f48:	10624dd3 	.word	0x10624dd3

08002f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d07d      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6c:	4b4f      	ldr	r3, [pc, #316]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4a4b      	ldr	r2, [pc, #300]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f82:	61d3      	str	r3, [r2, #28]
 8002f84:	4b49      	ldr	r3, [pc, #292]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d118      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa0:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a42      	ldr	r2, [pc, #264]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fac:	f7fe f8f8 	bl	80011a0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb4:	f7fe f8f4 	bl	80011a0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e06d      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d02e      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d027      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff0:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003006:	4a29      	ldr	r2, [pc, #164]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d014      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe f8c3 	bl	80011a0 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe f8bf 	bl	80011a0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e036      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ee      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4917      	ldr	r1, [pc, #92]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	4313      	orrs	r3, r2
 8003050:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	490b      	ldr	r1, [pc, #44]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	4904      	ldr	r1, [pc, #16]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42420440 	.word	0x42420440

080030b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e053      	b.n	8003172 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fd faf7 	bl	80006d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003100:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	0c1a      	lsrs	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f002 0204 	and.w	r2, r2, #4
 8003150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e01d      	b.n	80031c8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fd fe63 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	4610      	mov	r0, r2
 80031ba:	f000 fbb5 	bl	8003928 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e01d      	b.n	800321e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f815 	bl	8003226 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 fb8a 	bl	8003928 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e01d      	b.n	8003286 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f815 	bl	800328e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 fb56 	bl	8003928 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fdb8 	bl	8003e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a10      	ldr	r2, [pc, #64]	; (8003300 <HAL_TIM_PWM_Start+0x60>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d007      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00

08003304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d122      	bne.n	8003360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d11b      	bne.n	8003360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0202 	mvn.w	r2, #2
 8003330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fad3 	bl	80038f2 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fac6 	bl	80038e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fad5 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d122      	bne.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d11b      	bne.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0204 	mvn.w	r2, #4
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 faa9 	bl	80038f2 <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa9c 	bl	80038e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 faab 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d122      	bne.n	8003408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0208 	mvn.w	r2, #8
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2204      	movs	r2, #4
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa7f 	bl	80038f2 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa72 	bl	80038e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa81 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b10      	cmp	r3, #16
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0210 	mvn.w	r2, #16
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2208      	movs	r2, #8
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa55 	bl	80038f2 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa48 	bl	80038e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fa57 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10e      	bne.n	8003488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0201 	mvn.w	r2, #1
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa23 	bl	80038ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fd7c 	bl	8003fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa1b 	bl	8003916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0220 	mvn.w	r2, #32
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fd47 	bl	8003f9a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_TIM_OC_ConfigChannel+0x1a>
 800352a:	2302      	movs	r3, #2
 800352c:	e04e      	b.n	80035cc <HAL_TIM_OC_ConfigChannel+0xb8>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d839      	bhi.n	80035b8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003544:	a201      	add	r2, pc, #4	; (adr r2, 800354c <HAL_TIM_OC_ConfigChannel+0x38>)
 8003546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354a:	bf00      	nop
 800354c:	08003581 	.word	0x08003581
 8003550:	080035b9 	.word	0x080035b9
 8003554:	080035b9 	.word	0x080035b9
 8003558:	080035b9 	.word	0x080035b9
 800355c:	0800358f 	.word	0x0800358f
 8003560:	080035b9 	.word	0x080035b9
 8003564:	080035b9 	.word	0x080035b9
 8003568:	080035b9 	.word	0x080035b9
 800356c:	0800359d 	.word	0x0800359d
 8003570:	080035b9 	.word	0x080035b9
 8003574:	080035b9 	.word	0x080035b9
 8003578:	080035b9 	.word	0x080035b9
 800357c:	080035ab 	.word	0x080035ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fa30 	bl	80039ec <TIM_OC1_SetConfig>
      break;
 800358c:	e015      	b.n	80035ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fa8f 	bl	8003ab8 <TIM_OC2_SetConfig>
      break;
 800359a:	e00e      	b.n	80035ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 faf2 	bl	8003b8c <TIM_OC3_SetConfig>
      break;
 80035a8:	e007      	b.n	80035ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fb55 	bl	8003c60 <TIM_OC4_SetConfig>
      break;
 80035b6:	e000      	b.n	80035ba <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80035b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0b4      	b.n	8003758 <HAL_TIM_PWM_ConfigChannel+0x184>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	f200 809f 	bhi.w	8003744 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003606:	a201      	add	r2, pc, #4	; (adr r2, 800360c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	08003641 	.word	0x08003641
 8003610:	08003745 	.word	0x08003745
 8003614:	08003745 	.word	0x08003745
 8003618:	08003745 	.word	0x08003745
 800361c:	08003681 	.word	0x08003681
 8003620:	08003745 	.word	0x08003745
 8003624:	08003745 	.word	0x08003745
 8003628:	08003745 	.word	0x08003745
 800362c:	080036c3 	.word	0x080036c3
 8003630:	08003745 	.word	0x08003745
 8003634:	08003745 	.word	0x08003745
 8003638:	08003745 	.word	0x08003745
 800363c:	08003703 	.word	0x08003703
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f9d0 	bl	80039ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0208 	orr.w	r2, r2, #8
 800365a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6999      	ldr	r1, [r3, #24]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	619a      	str	r2, [r3, #24]
      break;
 800367e:	e062      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fa16 	bl	8003ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800369a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6999      	ldr	r1, [r3, #24]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	021a      	lsls	r2, r3, #8
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	619a      	str	r2, [r3, #24]
      break;
 80036c0:	e041      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fa5f 	bl	8003b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0208 	orr.w	r2, r2, #8
 80036dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0204 	bic.w	r2, r2, #4
 80036ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69d9      	ldr	r1, [r3, #28]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	61da      	str	r2, [r3, #28]
      break;
 8003700:	e021      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 faa9 	bl	8003c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	021a      	lsls	r2, r3, #8
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	61da      	str	r2, [r3, #28]
      break;
 8003742:	e000      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003744:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_TIM_ConfigClockSource+0x18>
 8003774:	2302      	movs	r3, #2
 8003776:	e0a6      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x166>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800379e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d067      	beq.n	8003880 <HAL_TIM_ConfigClockSource+0x120>
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d80b      	bhi.n	80037cc <HAL_TIM_ConfigClockSource+0x6c>
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d073      	beq.n	80038a0 <HAL_TIM_ConfigClockSource+0x140>
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d802      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x62>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d06f      	beq.n	80038a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037c0:	e078      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d06c      	beq.n	80038a0 <HAL_TIM_ConfigClockSource+0x140>
 80037c6:	2b30      	cmp	r3, #48	; 0x30
 80037c8:	d06a      	beq.n	80038a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037ca:	e073      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037cc:	2b70      	cmp	r3, #112	; 0x70
 80037ce:	d00d      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0x8c>
 80037d0:	2b70      	cmp	r3, #112	; 0x70
 80037d2:	d804      	bhi.n	80037de <HAL_TIM_ConfigClockSource+0x7e>
 80037d4:	2b50      	cmp	r3, #80	; 0x50
 80037d6:	d033      	beq.n	8003840 <HAL_TIM_ConfigClockSource+0xe0>
 80037d8:	2b60      	cmp	r3, #96	; 0x60
 80037da:	d041      	beq.n	8003860 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037dc:	e06a      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e2:	d066      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x152>
 80037e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e8:	d017      	beq.n	800381a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80037ea:	e063      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f000 faf5 	bl	8003dea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800380e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
      break;
 8003818:	e04c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6899      	ldr	r1, [r3, #8]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f000 fade 	bl	8003dea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800383c:	609a      	str	r2, [r3, #8]
      break;
 800383e:	e039      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	461a      	mov	r2, r3
 800384e:	f000 fa55 	bl	8003cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2150      	movs	r1, #80	; 0x50
 8003858:	4618      	mov	r0, r3
 800385a:	f000 faac 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 800385e:	e029      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	461a      	mov	r2, r3
 800386e:	f000 fa73 	bl	8003d58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2160      	movs	r1, #96	; 0x60
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa9c 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 800387e:	e019      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	461a      	mov	r2, r3
 800388e:	f000 fa35 	bl	8003cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2140      	movs	r1, #64	; 0x40
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fa8c 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 800389e:	e009      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f000 fa83 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 80038b0:	e000      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80038b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <TIM_Base_SetConfig+0xb8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00b      	beq.n	8003958 <TIM_Base_SetConfig+0x30>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d007      	beq.n	8003958 <TIM_Base_SetConfig+0x30>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <TIM_Base_SetConfig+0xbc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0x30>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <TIM_Base_SetConfig+0xc0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d108      	bne.n	800396a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <TIM_Base_SetConfig+0xb8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00b      	beq.n	800398a <TIM_Base_SetConfig+0x62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d007      	beq.n	800398a <TIM_Base_SetConfig+0x62>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a19      	ldr	r2, [pc, #100]	; (80039e4 <TIM_Base_SetConfig+0xbc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d003      	beq.n	800398a <TIM_Base_SetConfig+0x62>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <TIM_Base_SetConfig+0xc0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d108      	bne.n	800399c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <TIM_Base_SetConfig+0xb8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d103      	bne.n	80039d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	615a      	str	r2, [r3, #20]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	40000400 	.word	0x40000400
 80039e8:	40000800 	.word	0x40000800

080039ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f023 0201 	bic.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 0302 	bic.w	r3, r3, #2
 8003a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <TIM_OC1_SetConfig+0xc8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10c      	bne.n	8003a62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0308 	bic.w	r3, r3, #8
 8003a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <TIM_OC1_SetConfig+0xc8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d111      	bne.n	8003a8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	621a      	str	r2, [r3, #32]
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00

08003ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0210 	bic.w	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0320 	bic.w	r3, r3, #32
 8003b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <TIM_OC2_SetConfig+0xd0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10d      	bne.n	8003b34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <TIM_OC2_SetConfig+0xd0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d113      	bne.n	8003b64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40012c00 	.word	0x40012c00

08003b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <TIM_OC3_SetConfig+0xd0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10d      	bne.n	8003c06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <TIM_OC3_SetConfig+0xd0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d113      	bne.n	8003c36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40012c00 	.word	0x40012c00

08003c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	031b      	lsls	r3, r3, #12
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a0f      	ldr	r2, [pc, #60]	; (8003cf8 <TIM_OC4_SetConfig+0x98>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d109      	bne.n	8003cd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	019b      	lsls	r3, r3, #6
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00

08003cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 0201 	bic.w	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 030a 	bic.w	r3, r3, #10
 8003d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f023 0210 	bic.w	r2, r3, #16
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	031b      	lsls	r3, r3, #12
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f043 0307 	orr.w	r3, r3, #7
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b087      	sub	sp, #28
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	021a      	lsls	r2, r3, #8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	609a      	str	r2, [r3, #8]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e032      	b.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e03d      	b.n	8003f90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	f107 0014 	add.w	r0, r7, #20
 8003fcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	b004      	add	sp, #16
 8003fdc:	4770      	bx	lr

08003fde <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fe6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fea:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004014:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004018:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004020:	b29b      	uxth	r3, r3
 8004022:	b21a      	sxth	r2, r3
 8004024:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004028:	43db      	mvns	r3, r3
 800402a:	b21b      	sxth	r3, r3
 800402c:	4013      	ands	r3, r2
 800402e:	b21b      	sxth	r3, r3
 8004030:	b29a      	uxth	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800405c:	b084      	sub	sp, #16
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	f107 0014 	add.w	r0, r7, #20
 800406a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ffa5 	bl	8003fde <USB_EnableGlobalInt>

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a0:	b004      	add	sp, #16
 80040a2:	4770      	bx	lr

080040a4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040a4:	b490      	push	{r4, r7}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	78db      	ldrb	r3, [r3, #3]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d819      	bhi.n	8004106 <USB_ActivateEndpoint+0x62>
 80040d2:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <USB_ActivateEndpoint+0x34>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040fd 	.word	0x080040fd
 80040e0:	0800410d 	.word	0x0800410d
 80040e4:	080040f3 	.word	0x080040f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040e8:	89bb      	ldrh	r3, [r7, #12]
 80040ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ee:	81bb      	strh	r3, [r7, #12]
      break;
 80040f0:	e00d      	b.n	800410e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040f2:	89bb      	ldrh	r3, [r7, #12]
 80040f4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040f8:	81bb      	strh	r3, [r7, #12]
      break;
 80040fa:	e008      	b.n	800410e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040fc:	89bb      	ldrh	r3, [r7, #12]
 80040fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004102:	81bb      	strh	r3, [r7, #12]
      break;
 8004104:	e003      	b.n	800410e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      break;
 800410a:	e000      	b.n	800410e <USB_ActivateEndpoint+0x6a>
      break;
 800410c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	89bb      	ldrh	r3, [r7, #12]
 800411a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412a:	b29b      	uxth	r3, r3
 800412c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004144:	b29a      	uxth	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	4313      	orrs	r3, r2
 800414e:	b29c      	uxth	r4, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	4b8a      	ldr	r3, [pc, #552]	; (8004384 <USB_ActivateEndpoint+0x2e0>)
 800415c:	4323      	orrs	r3, r4
 800415e:	b29b      	uxth	r3, r3
 8004160:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	7b1b      	ldrb	r3, [r3, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 8112 	bne.w	8004390 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d067      	beq.n	8004244 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004174:	687c      	ldr	r4, [r7, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417c:	b29b      	uxth	r3, r3
 800417e:	441c      	add	r4, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4423      	add	r3, r4
 8004188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800418c:	461c      	mov	r4, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	88db      	ldrh	r3, [r3, #6]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	b29b      	uxth	r3, r3
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	b29b      	uxth	r3, r3
 800419a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29c      	uxth	r4, r3
 80041aa:	4623      	mov	r3, r4
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d014      	beq.n	80041de <USB_ActivateEndpoint+0x13a>
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	b29c      	uxth	r4, r3
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	441a      	add	r2, r3
 80041d6:	4b6c      	ldr	r3, [pc, #432]	; (8004388 <USB_ActivateEndpoint+0x2e4>)
 80041d8:	4323      	orrs	r3, r4
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	78db      	ldrb	r3, [r3, #3]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d018      	beq.n	8004218 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fc:	b29c      	uxth	r4, r3
 80041fe:	f084 0320 	eor.w	r3, r4, #32
 8004202:	b29c      	uxth	r4, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	4b5d      	ldr	r3, [pc, #372]	; (8004384 <USB_ActivateEndpoint+0x2e0>)
 8004210:	4323      	orrs	r3, r4
 8004212:	b29b      	uxth	r3, r3
 8004214:	8013      	strh	r3, [r2, #0]
 8004216:	e22b      	b.n	8004670 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	b29c      	uxth	r4, r3
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	4b52      	ldr	r3, [pc, #328]	; (8004384 <USB_ActivateEndpoint+0x2e0>)
 800423c:	4323      	orrs	r3, r4
 800423e:	b29b      	uxth	r3, r3
 8004240:	8013      	strh	r3, [r2, #0]
 8004242:	e215      	b.n	8004670 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004244:	687c      	ldr	r4, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424c:	b29b      	uxth	r3, r3
 800424e:	441c      	add	r4, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4423      	add	r3, r4
 8004258:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800425c:	461c      	mov	r4, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	88db      	ldrh	r3, [r3, #6]
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	b29b      	uxth	r3, r3
 800426a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800426c:	687c      	ldr	r4, [r7, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	441c      	add	r4, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4423      	add	r3, r4
 8004280:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004284:	461c      	mov	r4, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10e      	bne.n	80042ac <USB_ActivateEndpoint+0x208>
 800428e:	8823      	ldrh	r3, [r4, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004296:	b29b      	uxth	r3, r3
 8004298:	8023      	strh	r3, [r4, #0]
 800429a:	8823      	ldrh	r3, [r4, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	8023      	strh	r3, [r4, #0]
 80042aa:	e02d      	b.n	8004308 <USB_ActivateEndpoint+0x264>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b3e      	cmp	r3, #62	; 0x3e
 80042b2:	d812      	bhi.n	80042da <USB_ActivateEndpoint+0x236>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <USB_ActivateEndpoint+0x22a>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8023      	strh	r3, [r4, #0]
 80042d8:	e016      	b.n	8004308 <USB_ActivateEndpoint+0x264>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <USB_ActivateEndpoint+0x250>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	029b      	lsls	r3, r3, #10
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004304:	b29b      	uxth	r3, r3
 8004306:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29c      	uxth	r4, r3
 8004316:	4623      	mov	r3, r4
 8004318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d014      	beq.n	800434a <USB_ActivateEndpoint+0x2a6>
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	b29c      	uxth	r4, r3
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <USB_ActivateEndpoint+0x2e8>)
 8004344:	4323      	orrs	r3, r4
 8004346:	b29b      	uxth	r3, r3
 8004348:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	b29c      	uxth	r4, r3
 8004362:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004366:	b29c      	uxth	r4, r3
 8004368:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800436c:	b29c      	uxth	r4, r3
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	4b02      	ldr	r3, [pc, #8]	; (8004384 <USB_ActivateEndpoint+0x2e0>)
 800437a:	4323      	orrs	r3, r4
 800437c:	b29b      	uxth	r3, r3
 800437e:	8013      	strh	r3, [r2, #0]
 8004380:	e176      	b.n	8004670 <USB_ActivateEndpoint+0x5cc>
 8004382:	bf00      	nop
 8004384:	ffff8080 	.word	0xffff8080
 8004388:	ffff80c0 	.word	0xffff80c0
 800438c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	b29c      	uxth	r4, r3
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	4b96      	ldr	r3, [pc, #600]	; (800460c <USB_ActivateEndpoint+0x568>)
 80043b4:	4323      	orrs	r3, r4
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80043ba:	687c      	ldr	r4, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	441c      	add	r4, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4423      	add	r3, r4
 80043ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d2:	461c      	mov	r4, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	891b      	ldrh	r3, [r3, #8]
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	b29b      	uxth	r3, r3
 80043e0:	8023      	strh	r3, [r4, #0]
 80043e2:	687c      	ldr	r4, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	441c      	add	r4, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4423      	add	r3, r4
 80043f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043fa:	461c      	mov	r4, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	895b      	ldrh	r3, [r3, #10]
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	b29b      	uxth	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	b29b      	uxth	r3, r3
 8004408:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 8088 	bne.w	8004524 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29c      	uxth	r4, r3
 8004422:	4623      	mov	r3, r4
 8004424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d014      	beq.n	8004456 <USB_ActivateEndpoint+0x3b2>
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	b29c      	uxth	r4, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	4b70      	ldr	r3, [pc, #448]	; (8004610 <USB_ActivateEndpoint+0x56c>)
 8004450:	4323      	orrs	r3, r4
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29c      	uxth	r4, r3
 8004464:	4623      	mov	r3, r4
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d014      	beq.n	8004498 <USB_ActivateEndpoint+0x3f4>
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	b29c      	uxth	r4, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	4b60      	ldr	r3, [pc, #384]	; (8004614 <USB_ActivateEndpoint+0x570>)
 8004492:	4323      	orrs	r3, r4
 8004494:	b29b      	uxth	r3, r3
 8004496:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	b29c      	uxth	r4, r3
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	4b56      	ldr	r3, [pc, #344]	; (8004614 <USB_ActivateEndpoint+0x570>)
 80044bc:	4323      	orrs	r3, r4
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	b29c      	uxth	r4, r3
 80044da:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80044de:	b29c      	uxth	r4, r3
 80044e0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80044e4:	b29c      	uxth	r4, r3
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	4b49      	ldr	r3, [pc, #292]	; (8004618 <USB_ActivateEndpoint+0x574>)
 80044f2:	4323      	orrs	r3, r4
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450e:	b29c      	uxth	r4, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <USB_ActivateEndpoint+0x574>)
 800451c:	4323      	orrs	r3, r4
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
 8004522:	e0a5      	b.n	8004670 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29c      	uxth	r4, r3
 8004532:	4623      	mov	r3, r4
 8004534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d014      	beq.n	8004566 <USB_ActivateEndpoint+0x4c2>
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	b29c      	uxth	r4, r3
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	441a      	add	r2, r3
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <USB_ActivateEndpoint+0x56c>)
 8004560:	4323      	orrs	r3, r4
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29c      	uxth	r4, r3
 8004574:	4623      	mov	r3, r4
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d014      	beq.n	80045a8 <USB_ActivateEndpoint+0x504>
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	b29c      	uxth	r4, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <USB_ActivateEndpoint+0x570>)
 80045a2:	4323      	orrs	r3, r4
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	b29c      	uxth	r4, r3
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <USB_ActivateEndpoint+0x56c>)
 80045cc:	4323      	orrs	r3, r4
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	78db      	ldrb	r3, [r3, #3]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d020      	beq.n	800461c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f0:	b29c      	uxth	r4, r3
 80045f2:	f084 0320 	eor.w	r3, r4, #32
 80045f6:	b29c      	uxth	r4, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <USB_ActivateEndpoint+0x574>)
 8004604:	4323      	orrs	r3, r4
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
 800460a:	e01c      	b.n	8004646 <USB_ActivateEndpoint+0x5a2>
 800460c:	ffff8180 	.word	0xffff8180
 8004610:	ffffc080 	.word	0xffffc080
 8004614:	ffff80c0 	.word	0xffff80c0
 8004618:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004632:	b29c      	uxth	r4, r3
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <USB_ActivateEndpoint+0x5d8>)
 8004640:	4323      	orrs	r3, r4
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	b29c      	uxth	r4, r3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <USB_ActivateEndpoint+0x5d8>)
 800466a:	4323      	orrs	r3, r4
 800466c:	b29b      	uxth	r3, r3
 800466e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bc90      	pop	{r4, r7}
 800467a:	4770      	bx	lr
 800467c:	ffff8080 	.word	0xffff8080

08004680 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004680:	b490      	push	{r4, r7}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	7b1b      	ldrb	r3, [r3, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d171      	bne.n	8004776 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d036      	beq.n	8004708 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29c      	uxth	r4, r3
 80046a8:	4623      	mov	r3, r4
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <USB_DeactivateEndpoint+0x5c>
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	b29c      	uxth	r4, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	441a      	add	r2, r3
 80046d4:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <USB_DeactivateEndpoint+0x204>)
 80046d6:	4323      	orrs	r3, r4
 80046d8:	b29b      	uxth	r3, r3
 80046da:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f2:	b29c      	uxth	r4, r3
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	4b62      	ldr	r3, [pc, #392]	; (8004888 <USB_DeactivateEndpoint+0x208>)
 8004700:	4323      	orrs	r3, r4
 8004702:	b29b      	uxth	r3, r3
 8004704:	8013      	strh	r3, [r2, #0]
 8004706:	e144      	b.n	8004992 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29c      	uxth	r4, r3
 8004716:	4623      	mov	r3, r4
 8004718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d014      	beq.n	800474a <USB_DeactivateEndpoint+0xca>
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	b29c      	uxth	r4, r3
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	4b52      	ldr	r3, [pc, #328]	; (800488c <USB_DeactivateEndpoint+0x20c>)
 8004744:	4323      	orrs	r3, r4
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004760:	b29c      	uxth	r4, r3
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	4b46      	ldr	r3, [pc, #280]	; (8004888 <USB_DeactivateEndpoint+0x208>)
 800476e:	4323      	orrs	r3, r4
 8004770:	b29b      	uxth	r3, r3
 8004772:	8013      	strh	r3, [r2, #0]
 8004774:	e10d      	b.n	8004992 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 8088 	bne.w	8004890 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29c      	uxth	r4, r3
 800478e:	4623      	mov	r3, r4
 8004790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d014      	beq.n	80047c2 <USB_DeactivateEndpoint+0x142>
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	b29c      	uxth	r4, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	4b34      	ldr	r3, [pc, #208]	; (800488c <USB_DeactivateEndpoint+0x20c>)
 80047bc:	4323      	orrs	r3, r4
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29c      	uxth	r4, r3
 80047d0:	4623      	mov	r3, r4
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <USB_DeactivateEndpoint+0x184>
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	b29c      	uxth	r4, r3
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	441a      	add	r2, r3
 80047fc:	4b21      	ldr	r3, [pc, #132]	; (8004884 <USB_DeactivateEndpoint+0x204>)
 80047fe:	4323      	orrs	r3, r4
 8004800:	b29b      	uxth	r3, r3
 8004802:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	b29c      	uxth	r4, r3
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	4b17      	ldr	r3, [pc, #92]	; (8004884 <USB_DeactivateEndpoint+0x204>)
 8004828:	4323      	orrs	r3, r4
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	b29c      	uxth	r4, r3
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	441a      	add	r2, r3
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <USB_DeactivateEndpoint+0x208>)
 8004852:	4323      	orrs	r3, r4
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486e:	b29c      	uxth	r4, r3
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	4b03      	ldr	r3, [pc, #12]	; (8004888 <USB_DeactivateEndpoint+0x208>)
 800487c:	4323      	orrs	r3, r4
 800487e:	b29b      	uxth	r3, r3
 8004880:	8013      	strh	r3, [r2, #0]
 8004882:	e086      	b.n	8004992 <USB_DeactivateEndpoint+0x312>
 8004884:	ffff80c0 	.word	0xffff80c0
 8004888:	ffff8080 	.word	0xffff8080
 800488c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29c      	uxth	r4, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d014      	beq.n	80048d2 <USB_DeactivateEndpoint+0x252>
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	b29c      	uxth	r4, r3
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <USB_DeactivateEndpoint+0x320>)
 80048cc:	4323      	orrs	r3, r4
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29c      	uxth	r4, r3
 80048e0:	4623      	mov	r3, r4
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d014      	beq.n	8004914 <USB_DeactivateEndpoint+0x294>
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	b29c      	uxth	r4, r3
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	4b25      	ldr	r3, [pc, #148]	; (80049a4 <USB_DeactivateEndpoint+0x324>)
 800490e:	4323      	orrs	r3, r4
 8004910:	b29b      	uxth	r3, r3
 8004912:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	b29c      	uxth	r4, r3
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <USB_DeactivateEndpoint+0x320>)
 8004938:	4323      	orrs	r3, r4
 800493a:	b29b      	uxth	r3, r3
 800493c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004954:	b29c      	uxth	r4, r3
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <USB_DeactivateEndpoint+0x328>)
 8004962:	4323      	orrs	r3, r4
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	b29c      	uxth	r4, r3
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <USB_DeactivateEndpoint+0x328>)
 800498c:	4323      	orrs	r3, r4
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bc90      	pop	{r4, r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	ffffc080 	.word	0xffffc080
 80049a4:	ffff80c0 	.word	0xffff80c0
 80049a8:	ffff8080 	.word	0xffff8080

080049ac <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b08d      	sub	sp, #52	; 0x34
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	f040 8160 	bne.w	8004c80 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d909      	bls.n	80049e0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	1ad2      	subs	r2, r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	619a      	str	r2, [r3, #24]
 80049de:	e005      	b.n	80049ec <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2200      	movs	r2, #0
 80049ea:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	7b1b      	ldrb	r3, [r3, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d119      	bne.n	8004a28 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6959      	ldr	r1, [r3, #20]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	88da      	ldrh	r2, [r3, #6]
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fba2 	bl	800514a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a06:	687c      	ldr	r4, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	441c      	add	r4, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	4423      	add	r3, r4
 8004a1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a1e:	461c      	mov	r4, r3
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8023      	strh	r3, [r4, #0]
 8004a26:	e10f      	b.n	8004c48 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d065      	beq.n	8004b0a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a3e:	687c      	ldr	r4, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d148      	bne.n	8004ada <USB_EPStartXfer+0x12e>
 8004a48:	687c      	ldr	r4, [r7, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	441c      	add	r4, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	4423      	add	r3, r4
 8004a5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a60:	461c      	mov	r4, r3
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10e      	bne.n	8004a86 <USB_EPStartXfer+0xda>
 8004a68:	8823      	ldrh	r3, [r4, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8023      	strh	r3, [r4, #0]
 8004a74:	8823      	ldrh	r3, [r4, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8023      	strh	r3, [r4, #0]
 8004a84:	e03d      	b.n	8004b02 <USB_EPStartXfer+0x156>
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	2b3e      	cmp	r3, #62	; 0x3e
 8004a8a:	d810      	bhi.n	8004aae <USB_EPStartXfer+0x102>
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <USB_EPStartXfer+0xf6>
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	029b      	lsls	r3, r3, #10
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8023      	strh	r3, [r4, #0]
 8004aac:	e029      	b.n	8004b02 <USB_EPStartXfer+0x156>
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <USB_EPStartXfer+0x118>
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	029b      	lsls	r3, r3, #10
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8023      	strh	r3, [r4, #0]
 8004ad8:	e013      	b.n	8004b02 <USB_EPStartXfer+0x156>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10f      	bne.n	8004b02 <USB_EPStartXfer+0x156>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	441c      	add	r4, r3
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	4423      	add	r3, r4
 8004af4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	895b      	ldrh	r3, [r3, #10]
 8004b06:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b08:	e063      	b.n	8004bd2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d148      	bne.n	8004ba4 <USB_EPStartXfer+0x1f8>
 8004b12:	687c      	ldr	r4, [r7, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	441c      	add	r4, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	4423      	add	r3, r4
 8004b26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b2a:	461c      	mov	r4, r3
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10e      	bne.n	8004b50 <USB_EPStartXfer+0x1a4>
 8004b32:	8823      	ldrh	r3, [r4, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8023      	strh	r3, [r4, #0]
 8004b3e:	8823      	ldrh	r3, [r4, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	8023      	strh	r3, [r4, #0]
 8004b4e:	e03d      	b.n	8004bcc <USB_EPStartXfer+0x220>
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	2b3e      	cmp	r3, #62	; 0x3e
 8004b54:	d810      	bhi.n	8004b78 <USB_EPStartXfer+0x1cc>
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <USB_EPStartXfer+0x1c0>
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8023      	strh	r3, [r4, #0]
 8004b76:	e029      	b.n	8004bcc <USB_EPStartXfer+0x220>
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <USB_EPStartXfer+0x1e2>
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	029b      	lsls	r3, r3, #10
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	8023      	strh	r3, [r4, #0]
 8004ba2:	e013      	b.n	8004bcc <USB_EPStartXfer+0x220>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d10f      	bne.n	8004bcc <USB_EPStartXfer+0x220>
 8004bac:	687c      	ldr	r4, [r7, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	441c      	add	r4, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	4423      	add	r3, r4
 8004bc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bc4:	461c      	mov	r4, r3
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	891b      	ldrh	r3, [r3, #8]
 8004bd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6959      	ldr	r1, [r3, #20]
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fab4 	bl	800514a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d115      	bne.n	8004c16 <USB_EPStartXfer+0x26a>
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c00:	b29c      	uxth	r4, r3
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	4b9a      	ldr	r3, [pc, #616]	; (8004e78 <USB_EPStartXfer+0x4cc>)
 8004c0e:	4323      	orrs	r3, r4
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	8013      	strh	r3, [r2, #0]
 8004c14:	e018      	b.n	8004c48 <USB_EPStartXfer+0x29c>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d114      	bne.n	8004c48 <USB_EPStartXfer+0x29c>
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	b29c      	uxth	r4, r3
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	441a      	add	r2, r3
 8004c40:	4b8e      	ldr	r3, [pc, #568]	; (8004e7c <USB_EPStartXfer+0x4d0>)
 8004c42:	4323      	orrs	r3, r4
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5e:	b29c      	uxth	r4, r3
 8004c60:	f084 0310 	eor.w	r3, r4, #16
 8004c64:	b29c      	uxth	r4, r3
 8004c66:	f084 0320 	eor.w	r3, r4, #32
 8004c6a:	b29c      	uxth	r4, r3
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	4b82      	ldr	r3, [pc, #520]	; (8004e80 <USB_EPStartXfer+0x4d4>)
 8004c78:	4323      	orrs	r3, r4
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8013      	strh	r3, [r2, #0]
 8004c7e:	e146      	b.n	8004f0e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699a      	ldr	r2, [r3, #24]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d909      	bls.n	8004ca0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	1ad2      	subs	r2, r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	619a      	str	r2, [r3, #24]
 8004c9e:	e005      	b.n	8004cac <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	7b1b      	ldrb	r3, [r3, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d148      	bne.n	8004d46 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004cb4:	687c      	ldr	r4, [r7, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	441c      	add	r4, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	4423      	add	r3, r4
 8004cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ccc:	461c      	mov	r4, r3
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10e      	bne.n	8004cf2 <USB_EPStartXfer+0x346>
 8004cd4:	8823      	ldrh	r3, [r4, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8023      	strh	r3, [r4, #0]
 8004ce0:	8823      	ldrh	r3, [r4, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	8023      	strh	r3, [r4, #0]
 8004cf0:	e0f2      	b.n	8004ed8 <USB_EPStartXfer+0x52c>
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf6:	d810      	bhi.n	8004d1a <USB_EPStartXfer+0x36e>
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <USB_EPStartXfer+0x362>
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	029b      	lsls	r3, r3, #10
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	8023      	strh	r3, [r4, #0]
 8004d18:	e0de      	b.n	8004ed8 <USB_EPStartXfer+0x52c>
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <USB_EPStartXfer+0x384>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8023      	strh	r3, [r4, #0]
 8004d44:	e0c8      	b.n	8004ed8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d148      	bne.n	8004de0 <USB_EPStartXfer+0x434>
 8004d4e:	687c      	ldr	r4, [r7, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	441c      	add	r4, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	4423      	add	r3, r4
 8004d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d66:	461c      	mov	r4, r3
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10e      	bne.n	8004d8c <USB_EPStartXfer+0x3e0>
 8004d6e:	8823      	ldrh	r3, [r4, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8023      	strh	r3, [r4, #0]
 8004d7a:	8823      	ldrh	r3, [r4, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8023      	strh	r3, [r4, #0]
 8004d8a:	e03d      	b.n	8004e08 <USB_EPStartXfer+0x45c>
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d90:	d810      	bhi.n	8004db4 <USB_EPStartXfer+0x408>
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <USB_EPStartXfer+0x3fc>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	3301      	adds	r3, #1
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8023      	strh	r3, [r4, #0]
 8004db2:	e029      	b.n	8004e08 <USB_EPStartXfer+0x45c>
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <USB_EPStartXfer+0x41e>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8023      	strh	r3, [r4, #0]
 8004dde:	e013      	b.n	8004e08 <USB_EPStartXfer+0x45c>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d10f      	bne.n	8004e08 <USB_EPStartXfer+0x45c>
 8004de8:	687c      	ldr	r4, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	441c      	add	r4, r3
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	4423      	add	r3, r4
 8004dfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e00:	461c      	mov	r4, r3
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	8023      	strh	r3, [r4, #0]
 8004e08:	687c      	ldr	r4, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d14e      	bne.n	8004eb0 <USB_EPStartXfer+0x504>
 8004e12:	687c      	ldr	r4, [r7, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	441c      	add	r4, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	4423      	add	r3, r4
 8004e26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e2a:	461c      	mov	r4, r3
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10e      	bne.n	8004e50 <USB_EPStartXfer+0x4a4>
 8004e32:	8823      	ldrh	r3, [r4, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8023      	strh	r3, [r4, #0]
 8004e3e:	8823      	ldrh	r3, [r4, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8023      	strh	r3, [r4, #0]
 8004e4e:	e043      	b.n	8004ed8 <USB_EPStartXfer+0x52c>
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	2b3e      	cmp	r3, #62	; 0x3e
 8004e54:	d816      	bhi.n	8004e84 <USB_EPStartXfer+0x4d8>
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <USB_EPStartXfer+0x4c0>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	029b      	lsls	r3, r3, #10
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8023      	strh	r3, [r4, #0]
 8004e76:	e02f      	b.n	8004ed8 <USB_EPStartXfer+0x52c>
 8004e78:	ffff80c0 	.word	0xffff80c0
 8004e7c:	ffffc080 	.word	0xffffc080
 8004e80:	ffff8080 	.word	0xffff8080
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <USB_EPStartXfer+0x4ee>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	029b      	lsls	r3, r3, #10
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	8023      	strh	r3, [r4, #0]
 8004eae:	e013      	b.n	8004ed8 <USB_EPStartXfer+0x52c>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d10f      	bne.n	8004ed8 <USB_EPStartXfer+0x52c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	441c      	add	r4, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	4423      	add	r3, r4
 8004eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	b29c      	uxth	r4, r3
 8004ef0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ef4:	b29c      	uxth	r4, r3
 8004ef6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004efa:	b29c      	uxth	r4, r3
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <USB_EPStartXfer+0x56c>)
 8004f08:	4323      	orrs	r3, r4
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3734      	adds	r7, #52	; 0x34
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd90      	pop	{r4, r7, pc}
 8004f18:	ffff8080 	.word	0xffff8080

08004f1c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f1c:	b490      	push	{r4, r7}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d018      	beq.n	8004f60 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f44:	b29c      	uxth	r4, r3
 8004f46:	f084 0310 	eor.w	r3, r4, #16
 8004f4a:	b29c      	uxth	r4, r3
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <USB_EPSetStall+0x80>)
 8004f58:	4323      	orrs	r3, r4
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	8013      	strh	r3, [r2, #0]
 8004f5e:	e017      	b.n	8004f90 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	b29c      	uxth	r4, r3
 8004f78:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f7c:	b29c      	uxth	r4, r3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <USB_EPSetStall+0x80>)
 8004f8a:	4323      	orrs	r3, r4
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc90      	pop	{r4, r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	ffff8080 	.word	0xffff8080

08004fa0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fa0:	b490      	push	{r4, r7}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	7b1b      	ldrb	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d17d      	bne.n	80050ae <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d03d      	beq.n	8005036 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29c      	uxth	r4, r3
 8004fc8:	4623      	mov	r3, r4
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d014      	beq.n	8004ffc <USB_EPClearStall+0x5c>
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	b29c      	uxth	r4, r3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	4b31      	ldr	r3, [pc, #196]	; (80050bc <USB_EPClearStall+0x11c>)
 8004ff6:	4323      	orrs	r3, r4
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	78db      	ldrb	r3, [r3, #3]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d054      	beq.n	80050ae <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501a:	b29c      	uxth	r4, r3
 800501c:	f084 0320 	eor.w	r3, r4, #32
 8005020:	b29c      	uxth	r4, r3
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <USB_EPClearStall+0x120>)
 800502e:	4323      	orrs	r3, r4
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
 8005034:	e03b      	b.n	80050ae <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29c      	uxth	r4, r3
 8005044:	4623      	mov	r3, r4
 8005046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d014      	beq.n	8005078 <USB_EPClearStall+0xd8>
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	b29c      	uxth	r4, r3
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <USB_EPClearStall+0x124>)
 8005072:	4323      	orrs	r3, r4
 8005074:	b29b      	uxth	r3, r3
 8005076:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	b29c      	uxth	r4, r3
 8005090:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005094:	b29c      	uxth	r4, r3
 8005096:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800509a:	b29c      	uxth	r4, r3
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <USB_EPClearStall+0x120>)
 80050a8:	4323      	orrs	r3, r4
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc90      	pop	{r4, r7}
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	ffff80c0 	.word	0xffff80c0
 80050c0:	ffff8080 	.word	0xffff8080
 80050c4:	ffffc080 	.word	0xffffc080

080050c8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d103      	bne.n	80050e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005124:	b29b      	uxth	r3, r3
 8005126:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005128:	68fb      	ldr	r3, [r7, #12]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800514a:	b480      	push	{r7}
 800514c:	b08d      	sub	sp, #52	; 0x34
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	4611      	mov	r1, r2
 8005156:	461a      	mov	r2, r3
 8005158:	460b      	mov	r3, r1
 800515a:	80fb      	strh	r3, [r7, #6]
 800515c:	4613      	mov	r3, r2
 800515e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005160:	88bb      	ldrh	r3, [r7, #4]
 8005162:	3301      	adds	r3, #1
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	005a      	lsls	r2, r3, #1
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005182:	e01e      	b.n	80051c2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	3301      	adds	r3, #1
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	b29b      	uxth	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	3302      	adds	r3, #2
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	3302      	adds	r3, #2
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	3301      	adds	r3, #1
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	3b01      	subs	r3, #1
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1dd      	bne.n	8005184 <USB_WritePMA+0x3a>
  }
}
 80051c8:	bf00      	nop
 80051ca:	3734      	adds	r7, #52	; 0x34
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b08b      	sub	sp, #44	; 0x2c
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	4611      	mov	r1, r2
 80051de:	461a      	mov	r2, r3
 80051e0:	460b      	mov	r3, r1
 80051e2:	80fb      	strh	r3, [r7, #6]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80051e8:	88bb      	ldrh	r3, [r7, #4]
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	005a      	lsls	r2, r3, #1
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005204:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	e01b      	b.n	8005244 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	3302      	adds	r3, #2
 8005218:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	b2da      	uxtb	r2, r3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	3302      	adds	r3, #2
 800523c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	3b01      	subs	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e0      	bne.n	800520c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800524a:	88bb      	ldrh	r3, [r7, #4]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	701a      	strb	r2, [r3, #0]
  }
}
 8005266:	bf00      	nop
 8005268:	372c      	adds	r7, #44	; 0x2c
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7c1b      	ldrb	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d115      	bne.n	80052b4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800528c:	2202      	movs	r2, #2
 800528e:	2181      	movs	r1, #129	; 0x81
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fe8c 	bl	8006fae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800529c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a0:	2202      	movs	r2, #2
 80052a2:	2101      	movs	r1, #1
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 fe82 	bl	8006fae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80052b2:	e012      	b.n	80052da <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	2202      	movs	r2, #2
 80052b8:	2181      	movs	r1, #129	; 0x81
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fe77 	bl	8006fae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052c6:	2340      	movs	r3, #64	; 0x40
 80052c8:	2202      	movs	r2, #2
 80052ca:	2101      	movs	r1, #1
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fe6e 	bl	8006fae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052da:	2308      	movs	r3, #8
 80052dc:	2203      	movs	r2, #3
 80052de:	2182      	movs	r1, #130	; 0x82
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 fe64 	bl	8006fae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052f0:	f001 ff7e 	bl	80071f0 <USBD_static_malloc>
 80052f4:	4602      	mov	r2, r0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005306:	2301      	movs	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
 800530a:	e026      	b.n	800535a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005312:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7c1b      	ldrb	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800533c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005340:	2101      	movs	r1, #1
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 ff1d 	bl	8007182 <USBD_LL_PrepareReceive>
 8005348:	e007      	b.n	800535a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005350:	2340      	movs	r3, #64	; 0x40
 8005352:	2101      	movs	r1, #1
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 ff14 	bl	8007182 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005374:	2181      	movs	r1, #129	; 0x81
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f001 fe3f 	bl	8006ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005382:	2101      	movs	r1, #1
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fe38 	bl	8006ffa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005392:	2182      	movs	r1, #130	; 0x82
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 fe30 	bl	8006ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00e      	beq.n	80053c8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 ff24 	bl	8007208 <USBD_static_free>
    pdev->pClassData = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d039      	beq.n	8005470 <USBD_CDC_Setup+0x9e>
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d17c      	bne.n	80054fa <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	88db      	ldrh	r3, [r3, #6]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d029      	beq.n	800545c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	b25b      	sxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	da11      	bge.n	8005436 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800541e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	88d2      	ldrh	r2, [r2, #6]
 8005424:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005426:	6939      	ldr	r1, [r7, #16]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	88db      	ldrh	r3, [r3, #6]
 800542c:	461a      	mov	r2, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 f9f6 	bl	8006820 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005434:	e068      	b.n	8005508 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	785a      	ldrb	r2, [r3, #1]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	88db      	ldrh	r3, [r3, #6]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800544c:	6939      	ldr	r1, [r7, #16]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	88db      	ldrh	r3, [r3, #6]
 8005452:	461a      	mov	r2, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f001 fa11 	bl	800687c <USBD_CtlPrepareRx>
      break;
 800545a:	e055      	b.n	8005508 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	7850      	ldrb	r0, [r2, #1]
 8005468:	2200      	movs	r2, #0
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	4798      	blx	r3
      break;
 800546e:	e04b      	b.n	8005508 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b0a      	cmp	r3, #10
 8005476:	d017      	beq.n	80054a8 <USBD_CDC_Setup+0xd6>
 8005478:	2b0b      	cmp	r3, #11
 800547a:	d029      	beq.n	80054d0 <USBD_CDC_Setup+0xfe>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d133      	bne.n	80054e8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005486:	2b03      	cmp	r3, #3
 8005488:	d107      	bne.n	800549a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800548a:	f107 030c 	add.w	r3, r7, #12
 800548e:	2202      	movs	r2, #2
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f001 f9c4 	bl	8006820 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005498:	e02e      	b.n	80054f8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800549a:	6839      	ldr	r1, [r7, #0]
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 f955 	bl	800674c <USBD_CtlError>
            ret = USBD_FAIL;
 80054a2:	2302      	movs	r3, #2
 80054a4:	75fb      	strb	r3, [r7, #23]
          break;
 80054a6:	e027      	b.n	80054f8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d107      	bne.n	80054c2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80054b2:	f107 030f 	add.w	r3, r7, #15
 80054b6:	2201      	movs	r2, #1
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 f9b0 	bl	8006820 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054c0:	e01a      	b.n	80054f8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f941 	bl	800674c <USBD_CtlError>
            ret = USBD_FAIL;
 80054ca:	2302      	movs	r3, #2
 80054cc:	75fb      	strb	r3, [r7, #23]
          break;
 80054ce:	e013      	b.n	80054f8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d00d      	beq.n	80054f6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f935 	bl	800674c <USBD_CtlError>
            ret = USBD_FAIL;
 80054e2:	2302      	movs	r3, #2
 80054e4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80054e6:	e006      	b.n	80054f6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 f92e 	bl	800674c <USBD_CtlError>
          ret = USBD_FAIL;
 80054f0:	2302      	movs	r3, #2
 80054f2:	75fb      	strb	r3, [r7, #23]
          break;
 80054f4:	e000      	b.n	80054f8 <USBD_CDC_Setup+0x126>
          break;
 80054f6:	bf00      	nop
      }
      break;
 80054f8:	e006      	b.n	8005508 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f001 f925 	bl	800674c <USBD_CtlError>
      ret = USBD_FAIL;
 8005502:	2302      	movs	r3, #2
 8005504:	75fb      	strb	r3, [r7, #23]
      break;
 8005506:	bf00      	nop
  }

  return ret;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005524:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800552c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d037      	beq.n	80055a8 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	331c      	adds	r3, #28
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d026      	beq.n	800559c <USBD_CDC_DataIn+0x8a>
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	331c      	adds	r3, #28
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	0152      	lsls	r2, r2, #5
 8005566:	440a      	add	r2, r1
 8005568:	3238      	adds	r2, #56	; 0x38
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005570:	fb02 f201 	mul.w	r2, r2, r1
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d110      	bne.n	800559c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800557a:	78fa      	ldrb	r2, [r7, #3]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	331c      	adds	r3, #28
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800558e:	78f9      	ldrb	r1, [r7, #3]
 8005590:	2300      	movs	r3, #0
 8005592:	2200      	movs	r2, #0
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f001 fdd1 	bl	800713c <USBD_LL_Transmit>
 800559a:	e003      	b.n	80055a4 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	e000      	b.n	80055aa <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80055a8:	2302      	movs	r3, #2
  }
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	460b      	mov	r3, r1
 80055bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 fdfc 	bl	80071c8 <USBD_LL_GetRxDataSize>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80055f6:	4611      	mov	r1, r2
 80055f8:	4798      	blx	r3

    return USBD_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005616:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800561e:	2b00      	cmp	r3, #0
 8005620:	d015      	beq.n	800564e <USBD_CDC_EP0_RxReady+0x46>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005628:	2bff      	cmp	r3, #255	; 0xff
 800562a:	d010      	beq.n	800564e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800563a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005642:	b292      	uxth	r2, r2
 8005644:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	22ff      	movs	r2, #255	; 0xff
 800564a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2243      	movs	r2, #67	; 0x43
 8005664:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000094 	.word	0x20000094

08005678 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2243      	movs	r2, #67	; 0x43
 8005684:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005686:	4b03      	ldr	r3, [pc, #12]	; (8005694 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000050 	.word	0x20000050

08005698 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2243      	movs	r2, #67	; 0x43
 80056a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80056a6:	4b03      	ldr	r3, [pc, #12]	; (80056b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	200000d8 	.word	0x200000d8

080056b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	220a      	movs	r2, #10
 80056c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80056c6:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	2000000c 	.word	0x2000000c

080056d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80056e2:	2302      	movs	r3, #2
 80056e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005718:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr

08005736 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005746:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800576a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01c      	beq.n	80057b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800577c:	2b00      	cmp	r3, #0
 800577e:	d115      	bne.n	80057ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2181      	movs	r1, #129	; 0x81
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f001 fcca 	bl	800713c <USBD_LL_Transmit>

      return USBD_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e002      	b.n	80057b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d017      	beq.n	8005804 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	7c1b      	ldrb	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e6:	2101      	movs	r1, #1
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 fcca 	bl	8007182 <USBD_LL_PrepareReceive>
 80057ee:	e007      	b.n	8005800 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057f6:	2340      	movs	r3, #64	; 0x40
 80057f8:	2101      	movs	r1, #1
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 fcc1 	bl	8007182 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005822:	2302      	movs	r3, #2
 8005824:	e01a      	b.n	800585c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	79fa      	ldrb	r2, [r7, #7]
 8005852:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f001 fb35 	bl	8006ec4 <USBD_LL_Init>

  return USBD_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d006      	beq.n	8005886 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e001      	b.n	800588a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005886:	2302      	movs	r3, #2
 8005888:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800588a:	7bfb      	ldrb	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr

08005896 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 fb6a 	bl	8006f78 <USBD_LL_Start>

  return USBD_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058ce:	2302      	movs	r3, #2
 80058d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	4611      	mov	r1, r2
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	78fa      	ldrb	r2, [r7, #3]
 8005916:	4611      	mov	r1, r2
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3

  return USBD_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fecb 	bl	80066d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800594c:	461a      	mov	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2b01      	cmp	r3, #1
 8005960:	d00c      	beq.n	800597c <USBD_LL_SetupStage+0x56>
 8005962:	2b01      	cmp	r3, #1
 8005964:	d302      	bcc.n	800596c <USBD_LL_SetupStage+0x46>
 8005966:	2b02      	cmp	r3, #2
 8005968:	d010      	beq.n	800598c <USBD_LL_SetupStage+0x66>
 800596a:	e017      	b.n	800599c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f9cb 	bl	8005d10 <USBD_StdDevReq>
      break;
 800597a:	e01a      	b.n	80059b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa2d 	bl	8005de4 <USBD_StdItfReq>
      break;
 800598a:	e012      	b.n	80059b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fa6b 	bl	8005e70 <USBD_StdEPReq>
      break;
 800599a:	e00a      	b.n	80059b2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fb44 	bl	8007038 <USBD_LL_StallEP>
      break;
 80059b0:	bf00      	nop
  }

  return USBD_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	460b      	mov	r3, r1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d14b      	bne.n	8005a68 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d134      	bne.n	8005a4c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d919      	bls.n	8005a22 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d203      	bcs.n	8005a10 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	e002      	b.n	8005a16 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 ff4c 	bl	80068b8 <USBD_CtlContinueRx>
 8005a20:	e038      	b.n	8005a94 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d105      	bne.n	8005a44 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 ff49 	bl	80068dc <USBD_CtlSendStatus>
 8005a4a:	e023      	b.n	8005a94 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a52:	2b05      	cmp	r3, #5
 8005a54:	d11e      	bne.n	8005a94 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005a5e:	2100      	movs	r1, #0
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f001 fae9 	bl	8007038 <USBD_LL_StallEP>
 8005a66:	e015      	b.n	8005a94 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00d      	beq.n	8005a90 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d108      	bne.n	8005a90 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	7afa      	ldrb	r2, [r7, #11]
 8005a88:	4611      	mov	r1, r2
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	4798      	blx	r3
 8005a8e:	e001      	b.n	8005a94 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a90:	2302      	movs	r3, #2
 8005a92:	e000      	b.n	8005a96 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005aac:	7afb      	ldrb	r3, [r7, #11]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d17f      	bne.n	8005bb2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d15c      	bne.n	8005b7c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d915      	bls.n	8005afa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 feb6 	bl	8006858 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005aec:	2300      	movs	r3, #0
 8005aee:	2200      	movs	r2, #0
 8005af0:	2100      	movs	r1, #0
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f001 fb45 	bl	8007182 <USBD_LL_PrepareReceive>
 8005af8:	e04e      	b.n	8005b98 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	6912      	ldr	r2, [r2, #16]
 8005b02:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b06:	fb02 f201 	mul.w	r2, r2, r1
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11c      	bne.n	8005b4a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d316      	bcc.n	8005b4a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d20f      	bcs.n	8005b4a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fe92 	bl	8006858 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2100      	movs	r1, #0
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f001 fb1d 	bl	8007182 <USBD_LL_PrepareReceive>
 8005b48:	e026      	b.n	8005b98 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d105      	bne.n	8005b6c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005b6c:	2180      	movs	r1, #128	; 0x80
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f001 fa62 	bl	8007038 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fec4 	bl	8006902 <USBD_CtlReceiveStatus>
 8005b7a:	e00d      	b.n	8005b98 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d004      	beq.n	8005b90 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f001 fa50 	bl	8007038 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d11d      	bne.n	8005bde <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff fe83 	bl	80058ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bb0:	e015      	b.n	8005bde <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d108      	bne.n	8005bda <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	7afa      	ldrb	r2, [r7, #11]
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	4798      	blx	r3
 8005bd8:	e001      	b.n	8005bde <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e000      	b.n	8005be0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 f9d9 	bl	8006fae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2240      	movs	r2, #64	; 0x40
 8005c08:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c0c:	2340      	movs	r3, #64	; 0x40
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2180      	movs	r1, #128	; 0x80
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 f9cb 	bl	8006fae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2240      	movs	r2, #64	; 0x40
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6852      	ldr	r2, [r2, #4]
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4798      	blx	r3
  }

  return USBD_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d105      	bne.n	8005cce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr

08005cda <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d10b      	bne.n	8005d04 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d004      	beq.n	8005d34 <USBD_StdDevReq+0x24>
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d002      	beq.n	8005d34 <USBD_StdDevReq+0x24>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <USBD_StdDevReq+0x34>
 8005d32:	e04c      	b.n	8005dce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
      break;
 8005d42:	e049      	b.n	8005dd8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b09      	cmp	r3, #9
 8005d4a:	d83a      	bhi.n	8005dc2 <USBD_StdDevReq+0xb2>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <USBD_StdDevReq+0x44>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005db9 	.word	0x08005db9
 8005d5c:	08005dc3 	.word	0x08005dc3
 8005d60:	08005daf 	.word	0x08005daf
 8005d64:	08005dc3 	.word	0x08005dc3
 8005d68:	08005d87 	.word	0x08005d87
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005dc3 	.word	0x08005dc3
 8005d74:	08005d9b 	.word	0x08005d9b
 8005d78:	08005d91 	.word	0x08005d91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9d4 	bl	800612c <USBD_GetDescriptor>
          break;
 8005d84:	e022      	b.n	8005dcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fb37 	bl	80063fc <USBD_SetAddress>
          break;
 8005d8e:	e01d      	b.n	8005dcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fb74 	bl	8006480 <USBD_SetConfig>
          break;
 8005d98:	e018      	b.n	8005dcc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fbfd 	bl	800659c <USBD_GetConfig>
          break;
 8005da2:	e013      	b.n	8005dcc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fc2c 	bl	8006604 <USBD_GetStatus>
          break;
 8005dac:	e00e      	b.n	8005dcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fc5a 	bl	800666a <USBD_SetFeature>
          break;
 8005db6:	e009      	b.n	8005dcc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fc69 	bl	8006692 <USBD_ClrFeature>
          break;
 8005dc0:	e004      	b.n	8005dcc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fcc1 	bl	800674c <USBD_CtlError>
          break;
 8005dca:	bf00      	nop
      }
      break;
 8005dcc:	e004      	b.n	8005dd8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fcbb 	bl	800674c <USBD_CtlError>
      break;
 8005dd6:	bf00      	nop
  }

  return ret;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop

08005de4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d003      	beq.n	8005e06 <USBD_StdItfReq+0x22>
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d001      	beq.n	8005e06 <USBD_StdItfReq+0x22>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d12a      	bne.n	8005e5c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d81d      	bhi.n	8005e4e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	889b      	ldrh	r3, [r3, #4]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d813      	bhi.n	8005e44 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	88db      	ldrh	r3, [r3, #6]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d110      	bne.n	8005e58 <USBD_StdItfReq+0x74>
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10d      	bne.n	8005e58 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fd4d 	bl	80068dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e42:	e009      	b.n	8005e58 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fc80 	bl	800674c <USBD_CtlError>
          break;
 8005e4c:	e004      	b.n	8005e58 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fc7b 	bl	800674c <USBD_CtlError>
          break;
 8005e56:	e000      	b.n	8005e5a <USBD_StdItfReq+0x76>
          break;
 8005e58:	bf00      	nop
      }
      break;
 8005e5a:	e004      	b.n	8005e66 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fc74 	bl	800674c <USBD_CtlError>
      break;
 8005e64:	bf00      	nop
  }

  return USBD_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	889b      	ldrh	r3, [r3, #4]
 8005e82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d004      	beq.n	8005e9a <USBD_StdEPReq+0x2a>
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d002      	beq.n	8005e9a <USBD_StdEPReq+0x2a>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <USBD_StdEPReq+0x3a>
 8005e98:	e13d      	b.n	8006116 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	4798      	blx	r3
      break;
 8005ea8:	e13a      	b.n	8006120 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d10a      	bne.n	8005ecc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	e12a      	b.n	8006122 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d03e      	beq.n	8005f52 <USBD_StdEPReq+0xe2>
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d002      	beq.n	8005ede <USBD_StdEPReq+0x6e>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d070      	beq.n	8005fbe <USBD_StdEPReq+0x14e>
 8005edc:	e115      	b.n	800610a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d002      	beq.n	8005eee <USBD_StdEPReq+0x7e>
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d015      	beq.n	8005f18 <USBD_StdEPReq+0xa8>
 8005eec:	e02b      	b.n	8005f46 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <USBD_StdEPReq+0x9e>
 8005ef4:	7bbb      	ldrb	r3, [r7, #14]
 8005ef6:	2b80      	cmp	r3, #128	; 0x80
 8005ef8:	d009      	beq.n	8005f0e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 f89a 	bl	8007038 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f04:	2180      	movs	r1, #128	; 0x80
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 f896 	bl	8007038 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f0c:	e020      	b.n	8005f50 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fc1b 	bl	800674c <USBD_CtlError>
              break;
 8005f16:	e01b      	b.n	8005f50 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	885b      	ldrh	r3, [r3, #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10e      	bne.n	8005f3e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <USBD_StdEPReq+0xce>
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d008      	beq.n	8005f3e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	88db      	ldrh	r3, [r3, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 f87d 	bl	8007038 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fccc 	bl	80068dc <USBD_CtlSendStatus>

              break;
 8005f44:	e004      	b.n	8005f50 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fbff 	bl	800674c <USBD_CtlError>
              break;
 8005f4e:	bf00      	nop
          }
          break;
 8005f50:	e0e0      	b.n	8006114 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d002      	beq.n	8005f62 <USBD_StdEPReq+0xf2>
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d015      	beq.n	8005f8c <USBD_StdEPReq+0x11c>
 8005f60:	e026      	b.n	8005fb0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <USBD_StdEPReq+0x112>
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	2b80      	cmp	r3, #128	; 0x80
 8005f6c:	d009      	beq.n	8005f82 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f860 	bl	8007038 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f78:	2180      	movs	r1, #128	; 0x80
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 f85c 	bl	8007038 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f80:	e01c      	b.n	8005fbc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fbe1 	bl	800674c <USBD_CtlError>
              break;
 8005f8a:	e017      	b.n	8005fbc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	885b      	ldrh	r3, [r3, #2]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d112      	bne.n	8005fba <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f9e:	7bbb      	ldrb	r3, [r7, #14]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 f867 	bl	8007076 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fc97 	bl	80068dc <USBD_CtlSendStatus>
              }
              break;
 8005fae:	e004      	b.n	8005fba <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fbca 	bl	800674c <USBD_CtlError>
              break;
 8005fb8:	e000      	b.n	8005fbc <USBD_StdEPReq+0x14c>
              break;
 8005fba:	bf00      	nop
          }
          break;
 8005fbc:	e0aa      	b.n	8006114 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d002      	beq.n	8005fce <USBD_StdEPReq+0x15e>
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d032      	beq.n	8006032 <USBD_StdEPReq+0x1c2>
 8005fcc:	e097      	b.n	80060fe <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <USBD_StdEPReq+0x174>
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d004      	beq.n	8005fe4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fbb5 	bl	800674c <USBD_CtlError>
                break;
 8005fe2:	e091      	b.n	8006108 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da0b      	bge.n	8006004 <USBD_StdEPReq+0x194>
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	3310      	adds	r3, #16
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	4413      	add	r3, r2
 8006000:	3304      	adds	r3, #4
 8006002:	e00b      	b.n	800601c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006004:	7bbb      	ldrb	r3, [r7, #14]
 8006006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	3304      	adds	r3, #4
 800601c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2202      	movs	r2, #2
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fbf8 	bl	8006820 <USBD_CtlSendData>
              break;
 8006030:	e06a      	b.n	8006108 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006036:	2b00      	cmp	r3, #0
 8006038:	da11      	bge.n	800605e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	f003 020f 	and.w	r2, r3, #15
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	3318      	adds	r3, #24
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d117      	bne.n	8006084 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fb78 	bl	800674c <USBD_CtlError>
                  break;
 800605c:	e054      	b.n	8006108 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	f003 020f 	and.w	r2, r3, #15
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fb65 	bl	800674c <USBD_CtlError>
                  break;
 8006082:	e041      	b.n	8006108 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006088:	2b00      	cmp	r3, #0
 800608a:	da0b      	bge.n	80060a4 <USBD_StdEPReq+0x234>
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	3310      	adds	r3, #16
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	3304      	adds	r3, #4
 80060a2:	e00b      	b.n	80060bc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	4413      	add	r3, r2
 80060ba:	3304      	adds	r3, #4
 80060bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <USBD_StdEPReq+0x25a>
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d103      	bne.n	80060d2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e00e      	b.n	80060f0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 ffec 	bl	80070b4 <USBD_LL_IsStallEP>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e002      	b.n	80060f0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2202      	movs	r2, #2
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb92 	bl	8006820 <USBD_CtlSendData>
              break;
 80060fc:	e004      	b.n	8006108 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fb23 	bl	800674c <USBD_CtlError>
              break;
 8006106:	bf00      	nop
          }
          break;
 8006108:	e004      	b.n	8006114 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fb1d 	bl	800674c <USBD_CtlError>
          break;
 8006112:	bf00      	nop
      }
      break;
 8006114:	e004      	b.n	8006120 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb17 	bl	800674c <USBD_CtlError>
      break;
 800611e:	bf00      	nop
  }

  return ret;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	885b      	ldrh	r3, [r3, #2]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	2b06      	cmp	r3, #6
 800614e:	f200 8128 	bhi.w	80063a2 <USBD_GetDescriptor+0x276>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <USBD_GetDescriptor+0x2c>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	08006175 	.word	0x08006175
 800615c:	0800618d 	.word	0x0800618d
 8006160:	080061cd 	.word	0x080061cd
 8006164:	080063a3 	.word	0x080063a3
 8006168:	080063a3 	.word	0x080063a3
 800616c:	08006343 	.word	0x08006343
 8006170:	0800636f 	.word	0x0800636f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	7c12      	ldrb	r2, [r2, #16]
 8006180:	f107 0108 	add.w	r1, r7, #8
 8006184:	4610      	mov	r0, r2
 8006186:	4798      	blx	r3
 8006188:	60f8      	str	r0, [r7, #12]
      break;
 800618a:	e112      	b.n	80063b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	7c1b      	ldrb	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10d      	bne.n	80061b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619c:	f107 0208 	add.w	r2, r7, #8
 80061a0:	4610      	mov	r0, r2
 80061a2:	4798      	blx	r3
 80061a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	2202      	movs	r2, #2
 80061ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061ae:	e100      	b.n	80063b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	f107 0208 	add.w	r2, r7, #8
 80061bc:	4610      	mov	r0, r2
 80061be:	4798      	blx	r3
 80061c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	2202      	movs	r2, #2
 80061c8:	701a      	strb	r2, [r3, #0]
      break;
 80061ca:	e0f2      	b.n	80063b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	885b      	ldrh	r3, [r3, #2]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	f200 80ac 	bhi.w	8006330 <USBD_GetDescriptor+0x204>
 80061d8:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <USBD_GetDescriptor+0xb4>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	080061f9 	.word	0x080061f9
 80061e4:	0800622d 	.word	0x0800622d
 80061e8:	08006261 	.word	0x08006261
 80061ec:	08006295 	.word	0x08006295
 80061f0:	080062c9 	.word	0x080062c9
 80061f4:	080062fd 	.word	0x080062fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00b      	beq.n	800621c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	7c12      	ldrb	r2, [r2, #16]
 8006210:	f107 0108 	add.w	r1, r7, #8
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
 8006218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800621a:	e091      	b.n	8006340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa94 	bl	800674c <USBD_CtlError>
            err++;
 8006224:	7afb      	ldrb	r3, [r7, #11]
 8006226:	3301      	adds	r3, #1
 8006228:	72fb      	strb	r3, [r7, #11]
          break;
 800622a:	e089      	b.n	8006340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	7c12      	ldrb	r2, [r2, #16]
 8006244:	f107 0108 	add.w	r1, r7, #8
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
 800624c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624e:	e077      	b.n	8006340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa7a 	bl	800674c <USBD_CtlError>
            err++;
 8006258:	7afb      	ldrb	r3, [r7, #11]
 800625a:	3301      	adds	r3, #1
 800625c:	72fb      	strb	r3, [r7, #11]
          break;
 800625e:	e06f      	b.n	8006340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	7c12      	ldrb	r2, [r2, #16]
 8006278:	f107 0108 	add.w	r1, r7, #8
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006282:	e05d      	b.n	8006340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa60 	bl	800674c <USBD_CtlError>
            err++;
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	3301      	adds	r3, #1
 8006290:	72fb      	strb	r3, [r7, #11]
          break;
 8006292:	e055      	b.n	8006340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	7c12      	ldrb	r2, [r2, #16]
 80062ac:	f107 0108 	add.w	r1, r7, #8
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
 80062b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b6:	e043      	b.n	8006340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa46 	bl	800674c <USBD_CtlError>
            err++;
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	3301      	adds	r3, #1
 80062c4:	72fb      	strb	r3, [r7, #11]
          break;
 80062c6:	e03b      	b.n	8006340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	7c12      	ldrb	r2, [r2, #16]
 80062e0:	f107 0108 	add.w	r1, r7, #8
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ea:	e029      	b.n	8006340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa2c 	bl	800674c <USBD_CtlError>
            err++;
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	3301      	adds	r3, #1
 80062f8:	72fb      	strb	r3, [r7, #11]
          break;
 80062fa:	e021      	b.n	8006340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	7c12      	ldrb	r2, [r2, #16]
 8006314:	f107 0108 	add.w	r1, r7, #8
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631e:	e00f      	b.n	8006340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa12 	bl	800674c <USBD_CtlError>
            err++;
 8006328:	7afb      	ldrb	r3, [r7, #11]
 800632a:	3301      	adds	r3, #1
 800632c:	72fb      	strb	r3, [r7, #11]
          break;
 800632e:	e007      	b.n	8006340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa0a 	bl	800674c <USBD_CtlError>
          err++;
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	3301      	adds	r3, #1
 800633c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800633e:	e038      	b.n	80063b2 <USBD_GetDescriptor+0x286>
 8006340:	e037      	b.n	80063b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7c1b      	ldrb	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	f107 0208 	add.w	r2, r7, #8
 8006356:	4610      	mov	r0, r2
 8006358:	4798      	blx	r3
 800635a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800635c:	e029      	b.n	80063b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f9f3 	bl	800674c <USBD_CtlError>
        err++;
 8006366:	7afb      	ldrb	r3, [r7, #11]
 8006368:	3301      	adds	r3, #1
 800636a:	72fb      	strb	r3, [r7, #11]
      break;
 800636c:	e021      	b.n	80063b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	7c1b      	ldrb	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f107 0208 	add.w	r2, r7, #8
 8006382:	4610      	mov	r0, r2
 8006384:	4798      	blx	r3
 8006386:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	2207      	movs	r2, #7
 800638e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006390:	e00f      	b.n	80063b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f9d9 	bl	800674c <USBD_CtlError>
        err++;
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	3301      	adds	r3, #1
 800639e:	72fb      	strb	r3, [r7, #11]
      break;
 80063a0:	e007      	b.n	80063b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f9d1 	bl	800674c <USBD_CtlError>
      err++;
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	3301      	adds	r3, #1
 80063ae:	72fb      	strb	r3, [r7, #11]
      break;
 80063b0:	bf00      	nop
  }

  if (err != 0U)
 80063b2:	7afb      	ldrb	r3, [r7, #11]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11c      	bne.n	80063f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80063b8:	893b      	ldrh	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <USBD_GetDescriptor+0x2b6>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	88db      	ldrh	r3, [r3, #6]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	88da      	ldrh	r2, [r3, #6]
 80063ca:	893b      	ldrh	r3, [r7, #8]
 80063cc:	4293      	cmp	r3, r2
 80063ce:	bf28      	it	cs
 80063d0:	4613      	movcs	r3, r2
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063d6:	893b      	ldrh	r3, [r7, #8]
 80063d8:	461a      	mov	r2, r3
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fa1f 	bl	8006820 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	88db      	ldrh	r3, [r3, #6]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa76 	bl	80068dc <USBD_CtlSendStatus>
 80063f0:	e000      	b.n	80063f4 <USBD_GetDescriptor+0x2c8>
    return;
 80063f2:	bf00      	nop
    }
  }
}
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop

080063fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	889b      	ldrh	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d130      	bne.n	8006470 <USBD_SetAddress+0x74>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	88db      	ldrh	r3, [r3, #6]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d12c      	bne.n	8006470 <USBD_SetAddress+0x74>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	885b      	ldrh	r3, [r3, #2]
 800641a:	2b7f      	cmp	r3, #127	; 0x7f
 800641c:	d828      	bhi.n	8006470 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	885b      	ldrh	r3, [r3, #2]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006428:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006430:	2b03      	cmp	r3, #3
 8006432:	d104      	bne.n	800643e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f988 	bl	800674c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643c:	e01c      	b.n	8006478 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	7bfa      	ldrb	r2, [r7, #15]
 8006442:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fe57 	bl	80070fe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa43 	bl	80068dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006464:	e008      	b.n	8006478 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800646e:	e003      	b.n	8006478 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f96a 	bl	800674c <USBD_CtlError>
  }
}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	885b      	ldrh	r3, [r3, #2]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	4b41      	ldr	r3, [pc, #260]	; (8006598 <USBD_SetConfig+0x118>)
 8006492:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006494:	4b40      	ldr	r3, [pc, #256]	; (8006598 <USBD_SetConfig+0x118>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d904      	bls.n	80064a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f954 	bl	800674c <USBD_CtlError>
 80064a4:	e075      	b.n	8006592 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d002      	beq.n	80064b6 <USBD_SetConfig+0x36>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d023      	beq.n	80064fc <USBD_SetConfig+0x7c>
 80064b4:	e062      	b.n	800657c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80064b6:	4b38      	ldr	r3, [pc, #224]	; (8006598 <USBD_SetConfig+0x118>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d01a      	beq.n	80064f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80064be:	4b36      	ldr	r3, [pc, #216]	; (8006598 <USBD_SetConfig+0x118>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2203      	movs	r2, #3
 80064cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064d0:	4b31      	ldr	r3, [pc, #196]	; (8006598 <USBD_SetConfig+0x118>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff f9f3 	bl	80058c2 <USBD_SetClassConfig>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d104      	bne.n	80064ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f931 	bl	800674c <USBD_CtlError>
            return;
 80064ea:	e052      	b.n	8006592 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9f5 	bl	80068dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80064f2:	e04e      	b.n	8006592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f9f1 	bl	80068dc <USBD_CtlSendStatus>
        break;
 80064fa:	e04a      	b.n	8006592 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80064fc:	4b26      	ldr	r3, [pc, #152]	; (8006598 <USBD_SetConfig+0x118>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d112      	bne.n	800652a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800650c:	4b22      	ldr	r3, [pc, #136]	; (8006598 <USBD_SetConfig+0x118>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <USBD_SetConfig+0x118>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff f9ef 	bl	8005900 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9da 	bl	80068dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006528:	e033      	b.n	8006592 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <USBD_SetConfig+0x118>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d01d      	beq.n	8006574 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff f9dd 	bl	8005900 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <USBD_SetConfig+0x118>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <USBD_SetConfig+0x118>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff f9b3 	bl	80058c2 <USBD_SetClassConfig>
 800655c:	4603      	mov	r3, r0
 800655e:	2b02      	cmp	r3, #2
 8006560:	d104      	bne.n	800656c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8f1 	bl	800674c <USBD_CtlError>
            return;
 800656a:	e012      	b.n	8006592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f9b5 	bl	80068dc <USBD_CtlSendStatus>
        break;
 8006572:	e00e      	b.n	8006592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f9b1 	bl	80068dc <USBD_CtlSendStatus>
        break;
 800657a:	e00a      	b.n	8006592 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8e4 	bl	800674c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <USBD_SetConfig+0x118>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff f9b8 	bl	8005900 <USBD_ClrClassConfig>
        break;
 8006590:	bf00      	nop
    }
  }
}
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000198 	.word	0x20000198

0800659c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	88db      	ldrh	r3, [r3, #6]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d004      	beq.n	80065b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f8cb 	bl	800674c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065b6:	e021      	b.n	80065fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	db17      	blt.n	80065f2 <USBD_GetConfig+0x56>
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	dd02      	ble.n	80065cc <USBD_GetConfig+0x30>
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d00b      	beq.n	80065e2 <USBD_GetConfig+0x46>
 80065ca:	e012      	b.n	80065f2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3308      	adds	r3, #8
 80065d6:	2201      	movs	r2, #1
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f920 	bl	8006820 <USBD_CtlSendData>
        break;
 80065e0:	e00c      	b.n	80065fc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3304      	adds	r3, #4
 80065e6:	2201      	movs	r2, #1
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f918 	bl	8006820 <USBD_CtlSendData>
        break;
 80065f0:	e004      	b.n	80065fc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f8a9 	bl	800674c <USBD_CtlError>
        break;
 80065fa:	bf00      	nop
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006614:	3b01      	subs	r3, #1
 8006616:	2b02      	cmp	r3, #2
 8006618:	d81e      	bhi.n	8006658 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d004      	beq.n	800662c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f891 	bl	800674c <USBD_CtlError>
        break;
 800662a:	e01a      	b.n	8006662 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f043 0202 	orr.w	r2, r3, #2
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	330c      	adds	r3, #12
 800664c:	2202      	movs	r2, #2
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8e5 	bl	8006820 <USBD_CtlSendData>
      break;
 8006656:	e004      	b.n	8006662 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f876 	bl	800674c <USBD_CtlError>
      break;
 8006660:	bf00      	nop
  }
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	885b      	ldrh	r3, [r3, #2]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d106      	bne.n	800668a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f929 	bl	80068dc <USBD_CtlSendStatus>
  }
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a2:	3b01      	subs	r3, #1
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d80b      	bhi.n	80066c0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	885b      	ldrh	r3, [r3, #2]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d10c      	bne.n	80066ca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f90f 	bl	80068dc <USBD_CtlSendStatus>
      }
      break;
 80066be:	e004      	b.n	80066ca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f842 	bl	800674c <USBD_CtlError>
      break;
 80066c8:	e000      	b.n	80066cc <USBD_ClrFeature+0x3a>
      break;
 80066ca:	bf00      	nop
  }
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	785a      	ldrb	r2, [r3, #1]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	3302      	adds	r3, #2
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	3303      	adds	r3, #3
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	b29b      	uxth	r3, r3
 8006702:	4413      	add	r3, r2
 8006704:	b29a      	uxth	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	3304      	adds	r3, #4
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b29a      	uxth	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	3305      	adds	r3, #5
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	b29b      	uxth	r3, r3
 800671e:	4413      	add	r3, r2
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	3306      	adds	r3, #6
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	b29a      	uxth	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	3307      	adds	r3, #7
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	b29b      	uxth	r3, r3
 800673a:	4413      	add	r3, r2
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	80da      	strh	r2, [r3, #6]

}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006756:	2180      	movs	r1, #128	; 0x80
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc6d 	bl	8007038 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800675e:	2100      	movs	r1, #0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fc69 	bl	8007038 <USBD_LL_StallEP>
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d032      	beq.n	80067ea <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f834 	bl	80067f2 <USBD_GetLen>
 800678a:	4603      	mov	r3, r0
 800678c:	3301      	adds	r3, #1
 800678e:	b29b      	uxth	r3, r3
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	75fa      	strb	r2, [r7, #23]
 800679e:	461a      	mov	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4413      	add	r3, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	7812      	ldrb	r2, [r2, #0]
 80067a8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	75fa      	strb	r2, [r7, #23]
 80067b0:	461a      	mov	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4413      	add	r3, r2
 80067b6:	2203      	movs	r2, #3
 80067b8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80067ba:	e012      	b.n	80067e2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	60fa      	str	r2, [r7, #12]
 80067c2:	7dfa      	ldrb	r2, [r7, #23]
 80067c4:	1c51      	adds	r1, r2, #1
 80067c6:	75f9      	strb	r1, [r7, #23]
 80067c8:	4611      	mov	r1, r2
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	440a      	add	r2, r1
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	75fa      	strb	r2, [r7, #23]
 80067d8:	461a      	mov	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4413      	add	r3, r2
 80067de:	2200      	movs	r2, #0
 80067e0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e8      	bne.n	80067bc <USBD_GetString+0x4e>
    }
  }
}
 80067ea:	bf00      	nop
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80067fe:	e005      	b.n	800680c <USBD_GetLen+0x1a>
  {
    len++;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	3301      	adds	r3, #1
 8006804:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3301      	adds	r3, #1
 800680a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f5      	bne.n	8006800 <USBD_GetLen+0xe>
  }

  return len;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2202      	movs	r2, #2
 8006832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006836:	88fa      	ldrh	r2, [r7, #6]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800683c:	88fa      	ldrh	r2, [r7, #6]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	2100      	movs	r1, #0
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fc77 	bl	800713c <USBD_LL_Transmit>

  return USBD_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006866:	88fb      	ldrh	r3, [r7, #6]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	2100      	movs	r1, #0
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 fc65 	bl	800713c <USBD_LL_Transmit>

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	4613      	mov	r3, r2
 8006888:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2203      	movs	r2, #3
 800688e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006892:	88fa      	ldrh	r2, [r7, #6]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	2100      	movs	r1, #0
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 fc6a 	bl	8007182 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	2100      	movs	r1, #0
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fc58 	bl	8007182 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2204      	movs	r2, #4
 80068e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068ec:	2300      	movs	r3, #0
 80068ee:	2200      	movs	r2, #0
 80068f0:	2100      	movs	r1, #0
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fc22 	bl	800713c <USBD_LL_Transmit>

  return USBD_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2205      	movs	r2, #5
 800690e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006912:	2300      	movs	r3, #0
 8006914:	2200      	movs	r2, #0
 8006916:	2100      	movs	r1, #0
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fc32 	bl	8007182 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800692c:	2200      	movs	r2, #0
 800692e:	4912      	ldr	r1, [pc, #72]	; (8006978 <MX_USB_DEVICE_Init+0x50>)
 8006930:	4812      	ldr	r0, [pc, #72]	; (800697c <MX_USB_DEVICE_Init+0x54>)
 8006932:	f7fe ff6c 	bl	800580e <USBD_Init>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800693c:	f7f9 fe5a 	bl	80005f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006940:	490f      	ldr	r1, [pc, #60]	; (8006980 <MX_USB_DEVICE_Init+0x58>)
 8006942:	480e      	ldr	r0, [pc, #56]	; (800697c <MX_USB_DEVICE_Init+0x54>)
 8006944:	f7fe ff8e 	bl	8005864 <USBD_RegisterClass>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800694e:	f7f9 fe51 	bl	80005f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006952:	490c      	ldr	r1, [pc, #48]	; (8006984 <MX_USB_DEVICE_Init+0x5c>)
 8006954:	4809      	ldr	r0, [pc, #36]	; (800697c <MX_USB_DEVICE_Init+0x54>)
 8006956:	f7fe febf 	bl	80056d8 <USBD_CDC_RegisterInterface>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006960:	f7f9 fe48 	bl	80005f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006964:	4805      	ldr	r0, [pc, #20]	; (800697c <MX_USB_DEVICE_Init+0x54>)
 8006966:	f7fe ff96 	bl	8005896 <USBD_Start>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006970:	f7f9 fe40 	bl	80005f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006974:	bf00      	nop
 8006976:	bd80      	pop	{r7, pc}
 8006978:	2000012c 	.word	0x2000012c
 800697c:	20000410 	.word	0x20000410
 8006980:	20000018 	.word	0x20000018
 8006984:	2000011c 	.word	0x2000011c

08006988 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800698c:	2200      	movs	r2, #0
 800698e:	4905      	ldr	r1, [pc, #20]	; (80069a4 <CDC_Init_FS+0x1c>)
 8006990:	4805      	ldr	r0, [pc, #20]	; (80069a8 <CDC_Init_FS+0x20>)
 8006992:	f7fe feb7 	bl	8005704 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006996:	4905      	ldr	r1, [pc, #20]	; (80069ac <CDC_Init_FS+0x24>)
 8006998:	4803      	ldr	r0, [pc, #12]	; (80069a8 <CDC_Init_FS+0x20>)
 800699a:	f7fe fecc 	bl	8005736 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800699e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000934 	.word	0x20000934
 80069a8:	20000410 	.word	0x20000410
 80069ac:	20000890 	.word	0x20000890

080069b0 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 80069b4:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr
	...

080069c0 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4603      	mov	r3, r0
 80069c8:	6039      	str	r1, [r7, #0]
 80069ca:	71fb      	strb	r3, [r7, #7]
 80069cc:	4613      	mov	r3, r2
 80069ce:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	2b23      	cmp	r3, #35	; 0x23
 80069d4:	d84a      	bhi.n	8006a6c <CDC_Control_FS+0xac>
 80069d6:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <CDC_Control_FS+0x1c>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	08006a6d 	.word	0x08006a6d
 80069e0:	08006a6d 	.word	0x08006a6d
 80069e4:	08006a6d 	.word	0x08006a6d
 80069e8:	08006a6d 	.word	0x08006a6d
 80069ec:	08006a6d 	.word	0x08006a6d
 80069f0:	08006a6d 	.word	0x08006a6d
 80069f4:	08006a6d 	.word	0x08006a6d
 80069f8:	08006a6d 	.word	0x08006a6d
 80069fc:	08006a6d 	.word	0x08006a6d
 8006a00:	08006a6d 	.word	0x08006a6d
 8006a04:	08006a6d 	.word	0x08006a6d
 8006a08:	08006a6d 	.word	0x08006a6d
 8006a0c:	08006a6d 	.word	0x08006a6d
 8006a10:	08006a6d 	.word	0x08006a6d
 8006a14:	08006a6d 	.word	0x08006a6d
 8006a18:	08006a6d 	.word	0x08006a6d
 8006a1c:	08006a6d 	.word	0x08006a6d
 8006a20:	08006a6d 	.word	0x08006a6d
 8006a24:	08006a6d 	.word	0x08006a6d
 8006a28:	08006a6d 	.word	0x08006a6d
 8006a2c:	08006a6d 	.word	0x08006a6d
 8006a30:	08006a6d 	.word	0x08006a6d
 8006a34:	08006a6d 	.word	0x08006a6d
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006a6d 	.word	0x08006a6d
 8006a40:	08006a6d 	.word	0x08006a6d
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a6d 	.word	0x08006a6d
 8006a50:	08006a6d 	.word	0x08006a6d
 8006a54:	08006a6d 	.word	0x08006a6d
 8006a58:	08006a6d 	.word	0x08006a6d
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006a6d 	.word	0x08006a6d
 8006a64:	08006a6d 	.word	0x08006a6d
 8006a68:	08006a6d 	.word	0x08006a6d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8006a6c:	bf00      	nop
	}

	return (USBD_OK);
 8006a6e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop

08006a7c <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	4813      	ldr	r0, [pc, #76]	; (8006ad8 <CDC_Receive_FS+0x5c>)
 8006a8a:	f7fe fe54 	bl	8005736 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a8e:	4812      	ldr	r0, [pc, #72]	; (8006ad8 <CDC_Receive_FS+0x5c>)
 8006a90:	f7fe fe93 	bl	80057ba <USBD_CDC_ReceivePacket>

	// This function CDC_Receive_FS is a callback function invoked when data is received - add 3 extra lines of code to copy the data to my own buffer
	memcpy(received_data,Buf,*Len);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	480f      	ldr	r0, [pc, #60]	; (8006adc <CDC_Receive_FS+0x60>)
 8006a9e:	f000 fc17 	bl	80072d0 <memcpy>

	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <CDC_Receive_FS+0x5c>)
 8006aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d10f      	bne.n	8006acc <CDC_Receive_FS+0x50>
		strcat(received_data,"\n\r");
 8006aac:	480b      	ldr	r0, [pc, #44]	; (8006adc <CDC_Receive_FS+0x60>)
 8006aae:	f7f9 fb4d 	bl	800014c <strlen>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <CDC_Receive_FS+0x60>)
 8006ab8:	4413      	add	r3, r2
 8006aba:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <CDC_Receive_FS+0x64>)
 8006abc:	8811      	ldrh	r1, [r2, #0]
 8006abe:	7892      	ldrb	r2, [r2, #2]
 8006ac0:	8019      	strh	r1, [r3, #0]
 8006ac2:	709a      	strb	r2, [r3, #2]
		CDC_Transmit_FS(received_data, sizeof(strlen(received_data)));
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	4805      	ldr	r0, [pc, #20]	; (8006adc <CDC_Receive_FS+0x60>)
 8006ac8:	f000 f80c 	bl	8006ae4 <CDC_Transmit_FS>
	}


	return (USBD_OK);
 8006acc:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000410 	.word	0x20000410
 8006adc:	200008d0 	.word	0x200008d0
 8006ae0:	08007324 	.word	0x08007324

08006ae4 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8006af4:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <CDC_Transmit_FS+0x48>)
 8006af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afa:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e00b      	b.n	8006b22 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b0a:	887b      	ldrh	r3, [r7, #2]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4806      	ldr	r0, [pc, #24]	; (8006b2c <CDC_Transmit_FS+0x48>)
 8006b12:	f7fe fdf7 	bl	8005704 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b16:	4805      	ldr	r0, [pc, #20]	; (8006b2c <CDC_Transmit_FS+0x48>)
 8006b18:	f7fe fe20 	bl	800575c <USBD_CDC_TransmitPacket>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000410 	.word	0x20000410

08006b30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2212      	movs	r2, #18
 8006b40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b42:	4b03      	ldr	r3, [pc, #12]	; (8006b50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000148 	.word	0x20000148

08006b54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	6039      	str	r1, [r7, #0]
 8006b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b66:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	2000015c 	.word	0x2000015c

08006b78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	4907      	ldr	r1, [pc, #28]	; (8006bac <USBD_FS_ProductStrDescriptor+0x34>)
 8006b8e:	4808      	ldr	r0, [pc, #32]	; (8006bb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b90:	f7ff fded 	bl	800676e <USBD_GetString>
 8006b94:	e004      	b.n	8006ba0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	4904      	ldr	r1, [pc, #16]	; (8006bac <USBD_FS_ProductStrDescriptor+0x34>)
 8006b9a:	4805      	ldr	r0, [pc, #20]	; (8006bb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b9c:	f7ff fde7 	bl	800676e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ba0:	4b02      	ldr	r3, [pc, #8]	; (8006bac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000980 	.word	0x20000980
 8006bb0:	08007328 	.word	0x08007328

08006bb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	6039      	str	r1, [r7, #0]
 8006bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	4904      	ldr	r1, [pc, #16]	; (8006bd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006bc4:	4804      	ldr	r0, [pc, #16]	; (8006bd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006bc6:	f7ff fdd2 	bl	800676e <USBD_GetString>
  return USBD_StrDesc;
 8006bca:	4b02      	ldr	r3, [pc, #8]	; (8006bd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000980 	.word	0x20000980
 8006bd8:	08007340 	.word	0x08007340

08006bdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	6039      	str	r1, [r7, #0]
 8006be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	221a      	movs	r2, #26
 8006bec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006bee:	f000 f843 	bl	8006c78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006bf2:	4b02      	ldr	r3, [pc, #8]	; (8006bfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20000160 	.word	0x20000160

08006c00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	6039      	str	r1, [r7, #0]
 8006c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d105      	bne.n	8006c1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4907      	ldr	r1, [pc, #28]	; (8006c34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c16:	4808      	ldr	r0, [pc, #32]	; (8006c38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c18:	f7ff fda9 	bl	800676e <USBD_GetString>
 8006c1c:	e004      	b.n	8006c28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4904      	ldr	r1, [pc, #16]	; (8006c34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c22:	4805      	ldr	r0, [pc, #20]	; (8006c38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c24:	f7ff fda3 	bl	800676e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c28:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000980 	.word	0x20000980
 8006c38:	08007354 	.word	0x08007354

08006c3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4907      	ldr	r1, [pc, #28]	; (8006c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c52:	4808      	ldr	r0, [pc, #32]	; (8006c74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c54:	f7ff fd8b 	bl	800676e <USBD_GetString>
 8006c58:	e004      	b.n	8006c64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	4904      	ldr	r1, [pc, #16]	; (8006c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c5e:	4805      	ldr	r0, [pc, #20]	; (8006c74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c60:	f7ff fd85 	bl	800676e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000980 	.word	0x20000980
 8006c74:	08007360 	.word	0x08007360

08006c78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <Get_SerialNum+0x44>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c84:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <Get_SerialNum+0x48>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <Get_SerialNum+0x4c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	4909      	ldr	r1, [pc, #36]	; (8006cc8 <Get_SerialNum+0x50>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f814 	bl	8006cd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ca8:	2204      	movs	r2, #4
 8006caa:	4908      	ldr	r1, [pc, #32]	; (8006ccc <Get_SerialNum+0x54>)
 8006cac:	68b8      	ldr	r0, [r7, #8]
 8006cae:	f000 f80f 	bl	8006cd0 <IntToUnicode>
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	1ffff7e8 	.word	0x1ffff7e8
 8006cc0:	1ffff7ec 	.word	0x1ffff7ec
 8006cc4:	1ffff7f0 	.word	0x1ffff7f0
 8006cc8:	20000162 	.word	0x20000162
 8006ccc:	20000172 	.word	0x20000172

08006cd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75fb      	strb	r3, [r7, #23]
 8006ce6:	e027      	b.n	8006d38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	0f1b      	lsrs	r3, r3, #28
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d80b      	bhi.n	8006d08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	0f1b      	lsrs	r3, r3, #28
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	440b      	add	r3, r1
 8006d00:	3230      	adds	r2, #48	; 0x30
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	e00a      	b.n	8006d1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	0f1b      	lsrs	r3, r3, #28
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4619      	mov	r1, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	440b      	add	r3, r1
 8006d18:	3237      	adds	r2, #55	; 0x37
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	3301      	adds	r3, #1
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	3301      	adds	r3, #1
 8006d36:	75fb      	strb	r3, [r7, #23]
 8006d38:	7dfa      	ldrb	r2, [r7, #23]
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d3d3      	bcc.n	8006ce8 <IntToUnicode+0x18>
  }
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr
	...

08006d4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a0d      	ldr	r2, [pc, #52]	; (8006d90 <HAL_PCD_MspInit+0x44>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d113      	bne.n	8006d86 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <HAL_PCD_MspInit+0x48>)
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	4a0c      	ldr	r2, [pc, #48]	; (8006d94 <HAL_PCD_MspInit+0x48>)
 8006d64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d68:	61d3      	str	r3, [r2, #28]
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <HAL_PCD_MspInit+0x48>)
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006d76:	2200      	movs	r2, #0
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2014      	movs	r0, #20
 8006d7c:	f7fa fb13 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006d80:	2014      	movs	r0, #20
 8006d82:	f7fa fb2c 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40005c00 	.word	0x40005c00
 8006d94:	40021000 	.word	0x40021000

08006d98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7fe fdb9 	bl	8005926 <USBD_LL_SetupStage>
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	015b      	lsls	r3, r3, #5
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	4619      	mov	r1, r3
 8006de0:	f7fe fdec 	bl	80059bc <USBD_LL_DataOutStage>
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	015b      	lsls	r3, r3, #5
 8006e04:	4413      	add	r3, r2
 8006e06:	333c      	adds	r3, #60	; 0x3c
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f7fe fe46 	bl	8005a9e <USBD_LL_DataInStage>
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe ff56 	bl	8005cda <USBD_LL_SOF>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d001      	beq.n	8006e4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e4a:	f7f9 fbd3 	bl	80005f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e54:	7bfa      	ldrb	r2, [r7, #15]
 8006e56:	4611      	mov	r1, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe ff06 	bl	8005c6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe febf 	bl	8005be8 <USBD_LL_Reset>
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe ff00 	bl	8005c88 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <HAL_PCD_SuspendCallback+0x30>)
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	4a03      	ldr	r2, [pc, #12]	; (8006ea4 <HAL_PCD_SuspendCallback+0x30>)
 8006e96:	f043 0306 	orr.w	r3, r3, #6
 8006e9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	e000ed00 	.word	0xe000ed00

08006ea8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fefa 	bl	8005cb0 <USBD_LL_Resume>
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006ecc:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a26      	ldr	r2, [pc, #152]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ed8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006edc:	4b24      	ldr	r3, [pc, #144]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ede:	4a25      	ldr	r2, [pc, #148]	; (8006f74 <USBD_LL_Init+0xb0>)
 8006ee0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006ee2:	4b23      	ldr	r3, [pc, #140]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006ee8:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <USBD_LL_Init+0xac>)
 8006eea:	2202      	movs	r2, #2
 8006eec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006eee:	4b20      	ldr	r3, [pc, #128]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006efa:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <USBD_LL_Init+0xac>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f00:	481b      	ldr	r0, [pc, #108]	; (8006f70 <USBD_LL_Init+0xac>)
 8006f02:	f7fa fd39 	bl	8001978 <HAL_PCD_Init>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f0c:	f7f9 fb72 	bl	80005f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f16:	2318      	movs	r3, #24
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	f7fb fbd2 	bl	80026c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f26:	2358      	movs	r3, #88	; 0x58
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	f7fb fbca 	bl	80026c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f36:	23c0      	movs	r3, #192	; 0xc0
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2181      	movs	r1, #129	; 0x81
 8006f3c:	f7fb fbc2 	bl	80026c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	f7fb fbb9 	bl	80026c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2182      	movs	r1, #130	; 0x82
 8006f60:	f7fb fbb0 	bl	80026c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000b80 	.word	0x20000b80
 8006f74:	40005c00 	.word	0x40005c00

08006f78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fa fdd3 	bl	8001b3a <HAL_PCD_Start>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f948 	bl	8007230 <USBD_Get_USB_Status>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	4608      	mov	r0, r1
 8006fb8:	4611      	mov	r1, r2
 8006fba:	461a      	mov	r2, r3
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	70fb      	strb	r3, [r7, #3]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70bb      	strb	r3, [r7, #2]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fd6:	78bb      	ldrb	r3, [r7, #2]
 8006fd8:	883a      	ldrh	r2, [r7, #0]
 8006fda:	78f9      	ldrb	r1, [r7, #3]
 8006fdc:	f7fa ff06 	bl	8001dec <HAL_PCD_EP_Open>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f922 	bl	8007230 <USBD_Get_USB_Status>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7fa ff47 	bl	8001eac <HAL_PCD_EP_Close>
 800701e:	4603      	mov	r3, r0
 8007020:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f903 	bl	8007230 <USBD_Get_USB_Status>
 800702a:	4603      	mov	r3, r0
 800702c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800702e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	4611      	mov	r1, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f7fa fff1 	bl	800203e <HAL_PCD_EP_SetStall>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f8e4 	bl	8007230 <USBD_Get_USB_Status>
 8007068:	4603      	mov	r3, r0
 800706a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800706c:	7bbb      	ldrb	r3, [r7, #14]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f7fb f82c 	bl	80020f2 <HAL_PCD_EP_ClrStall>
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 f8c5 	bl	8007230 <USBD_Get_USB_Status>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070c6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80070c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	da08      	bge.n	80070e2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	015b      	lsls	r3, r3, #5
 80070da:	4413      	add	r3, r2
 80070dc:	332a      	adds	r3, #42	; 0x2a
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	e008      	b.n	80070f4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	015b      	lsls	r3, r3, #5
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80070f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr

080070fe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f7fa fe40 	bl	8001da2 <HAL_PCD_SetAddress>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 f881 	bl	8007230 <USBD_Get_USB_Status>
 800712e:	4603      	mov	r3, r0
 8007130:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007132:	7bbb      	ldrb	r3, [r7, #14]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	607a      	str	r2, [r7, #4]
 8007146:	461a      	mov	r2, r3
 8007148:	460b      	mov	r3, r1
 800714a:	72fb      	strb	r3, [r7, #11]
 800714c:	4613      	mov	r3, r2
 800714e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800715e:	893b      	ldrh	r3, [r7, #8]
 8007160:	7af9      	ldrb	r1, [r7, #11]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	f7fa ff32 	bl	8001fcc <HAL_PCD_EP_Transmit>
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	4618      	mov	r0, r3
 8007170:	f000 f85e 	bl	8007230 <USBD_Get_USB_Status>
 8007174:	4603      	mov	r3, r0
 8007176:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007178:	7dbb      	ldrb	r3, [r7, #22]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b086      	sub	sp, #24
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	461a      	mov	r2, r3
 800718e:	460b      	mov	r3, r1
 8007190:	72fb      	strb	r3, [r7, #11]
 8007192:	4613      	mov	r3, r2
 8007194:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	7af9      	ldrb	r1, [r7, #11]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	f7fa fec1 	bl	8001f30 <HAL_PCD_EP_Receive>
 80071ae:	4603      	mov	r3, r0
 80071b0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 f83b 	bl	8007230 <USBD_Get_USB_Status>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80071be:	7dbb      	ldrb	r3, [r7, #22]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	4611      	mov	r1, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fa fee0 	bl	8001fa4 <HAL_PCD_EP_GetRxCount>
 80071e4:	4603      	mov	r3, r0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <USBD_static_malloc+0x14>)
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	bc80      	pop	{r7}
 8007202:	4770      	bx	lr
 8007204:	2000019c 	.word	0x2000019c

08007208 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]

}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	2b03      	cmp	r3, #3
 8007242:	d817      	bhi.n	8007274 <USBD_Get_USB_Status+0x44>
 8007244:	a201      	add	r2, pc, #4	; (adr r2, 800724c <USBD_Get_USB_Status+0x1c>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	0800725d 	.word	0x0800725d
 8007250:	08007263 	.word	0x08007263
 8007254:	08007269 	.word	0x08007269
 8007258:	0800726f 	.word	0x0800726f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
    break;
 8007260:	e00b      	b.n	800727a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007262:	2302      	movs	r3, #2
 8007264:	73fb      	strb	r3, [r7, #15]
    break;
 8007266:	e008      	b.n	800727a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
    break;
 800726c:	e005      	b.n	800727a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800726e:	2302      	movs	r3, #2
 8007270:	73fb      	strb	r3, [r7, #15]
    break;
 8007272:	e002      	b.n	800727a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007274:	2302      	movs	r3, #2
 8007276:	73fb      	strb	r3, [r7, #15]
    break;
 8007278:	bf00      	nop
  }
  return usb_status;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	2500      	movs	r5, #0
 800728c:	4e0c      	ldr	r6, [pc, #48]	; (80072c0 <__libc_init_array+0x38>)
 800728e:	4c0d      	ldr	r4, [pc, #52]	; (80072c4 <__libc_init_array+0x3c>)
 8007290:	1ba4      	subs	r4, r4, r6
 8007292:	10a4      	asrs	r4, r4, #2
 8007294:	42a5      	cmp	r5, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	f000 f82e 	bl	80072f8 <_init>
 800729c:	2500      	movs	r5, #0
 800729e:	4e0a      	ldr	r6, [pc, #40]	; (80072c8 <__libc_init_array+0x40>)
 80072a0:	4c0a      	ldr	r4, [pc, #40]	; (80072cc <__libc_init_array+0x44>)
 80072a2:	1ba4      	subs	r4, r4, r6
 80072a4:	10a4      	asrs	r4, r4, #2
 80072a6:	42a5      	cmp	r5, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072b0:	4798      	blx	r3
 80072b2:	3501      	adds	r5, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072ba:	4798      	blx	r3
 80072bc:	3501      	adds	r5, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	08007388 	.word	0x08007388
 80072c4:	08007388 	.word	0x08007388
 80072c8:	08007388 	.word	0x08007388
 80072cc:	0800738c 	.word	0x0800738c

080072d0 <memcpy>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	1e43      	subs	r3, r0, #1
 80072d4:	440a      	add	r2, r1
 80072d6:	4291      	cmp	r1, r2
 80072d8:	d100      	bne.n	80072dc <memcpy+0xc>
 80072da:	bd10      	pop	{r4, pc}
 80072dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e4:	e7f7      	b.n	80072d6 <memcpy+0x6>

080072e6 <memset>:
 80072e6:	4603      	mov	r3, r0
 80072e8:	4402      	add	r2, r0
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d100      	bne.n	80072f0 <memset+0xa>
 80072ee:	4770      	bx	lr
 80072f0:	f803 1b01 	strb.w	r1, [r3], #1
 80072f4:	e7f9      	b.n	80072ea <memset+0x4>
	...

080072f8 <_init>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr

08007304 <_fini>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr
