
Ikarus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007374  08007374  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007374  08007374  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007374  08007374  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007378  08007378  00017378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800737c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  2000017c  080074f8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014c4  080074f8  000214c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bc9  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000386f  00000000  00000000  00039d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  0003d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001308  00000000  00000000  0003ea90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ff3  00000000  00000000  0003fd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000129c3  00000000  00000000  00057d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ae9  00000000  00000000  0006a74e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005560  00000000  00000000  000e32b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080072c8 	.word	0x080072c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080072c8 	.word	0x080072c8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b24      	ldr	r3, [pc, #144]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a23      	ldr	r2, [pc, #140]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b21      	ldr	r3, [pc, #132]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1d      	ldr	r2, [pc, #116]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b18      	ldr	r3, [pc, #96]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	480c      	ldr	r0, [pc, #48]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001c8:	f001 fa92 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80001cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001e6:	f001 f929 	bl	800143c <HAL_GPIO_Init>

}
 80001ea:	bf00      	nop
 80001ec:	3720      	adds	r7, #32
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	40011000 	.word	0x40011000

080001fc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <MX_I2C2_Init+0x50>)
 8000202:	4a13      	ldr	r2, [pc, #76]	; (8000250 <MX_I2C2_Init+0x54>)
 8000204:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000206:	4b11      	ldr	r3, [pc, #68]	; (800024c <MX_I2C2_Init+0x50>)
 8000208:	4a12      	ldr	r2, [pc, #72]	; (8000254 <MX_I2C2_Init+0x58>)
 800020a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <MX_I2C2_Init+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_I2C2_Init+0x50>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <MX_I2C2_Init+0x50>)
 800021a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800021e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000220:	4b0a      	ldr	r3, [pc, #40]	; (800024c <MX_I2C2_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_I2C2_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <MX_I2C2_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <MX_I2C2_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <MX_I2C2_Init+0x50>)
 800023a:	f001 fa89 	bl	8001750 <HAL_I2C_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000244:	f000 f9ea 	bl	800061c <Error_Handler>
  }

}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200003bc 	.word	0x200003bc
 8000250:	40005800 	.word	0x40005800
 8000254:	000186a0 	.word	0x000186a0

08000258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	f107 0310 	add.w	r3, r7, #16
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a16      	ldr	r2, [pc, #88]	; (80002cc <HAL_I2C_MspInit+0x74>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d124      	bne.n	80002c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000290:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000296:	2312      	movs	r3, #18
 8000298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800029a:	2303      	movs	r3, #3
 800029c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <HAL_I2C_MspInit+0x7c>)
 80002a6:	f001 f8c9 	bl	800143c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b4:	61d3      	str	r3, [r2, #28]
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002b8:	69db      	ldr	r3, [r3, #28]
 80002ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80002c2:	bf00      	nop
 80002c4:	3720      	adds	r7, #32
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40005800 	.word	0x40005800
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40010c00 	.word	0x40010c00

080002d8 <HAL_TIM_PWM_Start_AllChannels>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef HAL_TIM_PWM_Start_AllChannels(TIM_HandleTypeDef *htim) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if (HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002e0:	2100      	movs	r1, #0
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f002 fff0 	bl	80032c8 <HAL_TIM_PWM_Start>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d116      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002ee:	2100      	movs	r1, #0
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f002 ffe9 	bl	80032c8 <HAL_TIM_PWM_Start>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10f      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002fc:	2100      	movs	r1, #0
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f002 ffe2 	bl	80032c8 <HAL_TIM_PWM_Start>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d108      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK){
 800030a:	2100      	movs	r1, #0
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f002 ffdb 	bl	80032c8 <HAL_TIM_PWM_Start>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d101      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
		return HAL_OK;
 8000318:	2300      	movs	r3, #0
 800031a:	e000      	b.n	800031e <HAL_TIM_PWM_Start_AllChannels+0x46>
	}
	return HAL_ERROR;
 800031c:	2301      	movs	r3, #1
};
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <set_pmw_handler_all_channels_pulse_width>:

void set_pmw_handler_all_channels_pulse_width(TIM_HandleTypeDef handler,
		unsigned int pulseWidth) {
 8000326:	b084      	sub	sp, #16
 8000328:	b490      	push	{r4, r7}
 800032a:	af00      	add	r7, sp, #0
 800032c:	f107 0408 	add.w	r4, r7, #8
 8000330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	handler.Instance->CCR1 = pulseWidth;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
	handler.Instance->CCR2 = pulseWidth;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800033e:	639a      	str	r2, [r3, #56]	; 0x38
	handler.Instance->CCR3 = pulseWidth;
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000344:	63da      	str	r2, [r3, #60]	; 0x3c
	handler.Instance->CCR4 = pulseWidth;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800034a:	641a      	str	r2, [r3, #64]	; 0x40
};
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc90      	pop	{r4, r7}
 8000352:	b004      	add	sp, #16
 8000354:	4770      	bx	lr
	...

08000358 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035a:	b09b      	sub	sp, #108	; 0x6c
 800035c:	af0e      	add	r7, sp, #56	; 0x38
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800035e:	f000 fedb 	bl	8001118 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000362:	f000 f901 	bl	8000568 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000366:	f7ff fef1 	bl	800014c <MX_GPIO_Init>
	MX_I2C2_Init();
 800036a:	f7ff ff47 	bl	80001fc <MX_I2C2_Init>
	MX_SPI1_Init();
 800036e:	f000 f95b 	bl	8000628 <MX_SPI1_Init>
	MX_SPI2_Init();
 8000372:	f000 f98f 	bl	8000694 <MX_SPI2_Init>
	MX_TIM1_Init();
 8000376:	f000 fb0f 	bl	8000998 <MX_TIM1_Init>
	MX_TIM2_Init();
 800037a:	f000 fbc5 	bl	8000b08 <MX_TIM2_Init>
	MX_TIM3_Init();
 800037e:	f000 fc59 	bl	8000c34 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000382:	f000 fcef 	bl	8000d64 <MX_TIM4_Init>
	MX_USB_DEVICE_Init();
 8000386:	f006 fae3 	bl	8006950 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	unsigned int position_minimum = 350;
 800038a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800038e:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int position_center = 750;
 8000390:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000394:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int position_maximum = 1250;
 8000396:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800039a:	623b      	str	r3, [r7, #32]

	unsigned int position = position_center;
 800039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800039e:	62fb      	str	r3, [r7, #44]	; 0x2c

	set_pmw_handler_all_channels_pulse_width(htim1, position);
 80003a0:	4e6a      	ldr	r6, [pc, #424]	; (800054c <main+0x1f4>)
 80003a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a4:	930c      	str	r3, [sp, #48]	; 0x30
 80003a6:	466d      	mov	r5, sp
 80003a8:	f106 0410 	add.w	r4, r6, #16
 80003ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003c0:	f7ff ffb1 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim2, position);
 80003c4:	4e62      	ldr	r6, [pc, #392]	; (8000550 <main+0x1f8>)
 80003c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003c8:	930c      	str	r3, [sp, #48]	; 0x30
 80003ca:	466d      	mov	r5, sp
 80003cc:	f106 0410 	add.w	r4, r6, #16
 80003d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003e4:	f7ff ff9f 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim3, position);
 80003e8:	4e5a      	ldr	r6, [pc, #360]	; (8000554 <main+0x1fc>)
 80003ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ec:	930c      	str	r3, [sp, #48]	; 0x30
 80003ee:	466d      	mov	r5, sp
 80003f0:	f106 0410 	add.w	r4, r6, #16
 80003f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000400:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000404:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000408:	f7ff ff8d 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim4, position);
 800040c:	4e52      	ldr	r6, [pc, #328]	; (8000558 <main+0x200>)
 800040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000410:	930c      	str	r3, [sp, #48]	; 0x30
 8000412:	466d      	mov	r5, sp
 8000414:	f106 0410 	add.w	r4, r6, #16
 8000418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800041c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000420:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000424:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000428:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800042c:	f7ff ff7b 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>

	HAL_TIM_PWM_Start_AllChannels(&htim1);
 8000430:	4846      	ldr	r0, [pc, #280]	; (800054c <main+0x1f4>)
 8000432:	f7ff ff51 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim2);
 8000436:	4846      	ldr	r0, [pc, #280]	; (8000550 <main+0x1f8>)
 8000438:	f7ff ff4e 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim3);
 800043c:	4845      	ldr	r0, [pc, #276]	; (8000554 <main+0x1fc>)
 800043e:	f7ff ff4b 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim4);
 8000442:	4845      	ldr	r0, [pc, #276]	; (8000558 <main+0x200>)
 8000444:	f7ff ff48 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>

	uint8_t Buf[] = "We are ON baby\n";
 8000448:	4b44      	ldr	r3, [pc, #272]	; (800055c <main+0x204>)
 800044a:	f107 0410 	add.w	r4, r7, #16
 800044e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CDC_Transmit_FS(Buf, sizeof(Buf));
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2110      	movs	r1, #16
 800045a:	4618      	mov	r0, r3
 800045c:	f006 fb36 	bl	8006acc <CDC_Transmit_FS>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		uint8_t Buf1[] = "We are Alive!\n";
 8000460:	4b3f      	ldr	r3, [pc, #252]	; (8000560 <main+0x208>)
 8000462:	463c      	mov	r4, r7
 8000464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000466:	c407      	stmia	r4!, {r0, r1, r2}
 8000468:	8023      	strh	r3, [r4, #0]
 800046a:	3402      	adds	r4, #2
 800046c:	0c1b      	lsrs	r3, r3, #16
 800046e:	7023      	strb	r3, [r4, #0]
		CDC_Transmit_FS(Buf1, sizeof(Buf1));
 8000470:	463b      	mov	r3, r7
 8000472:	210f      	movs	r1, #15
 8000474:	4618      	mov	r0, r3
 8000476:	f006 fb29 	bl	8006acc <CDC_Transmit_FS>

		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	4839      	ldr	r0, [pc, #228]	; (8000564 <main+0x20c>)
 8000480:	f001 f94e 	bl	8001720 <HAL_GPIO_TogglePin>

		set_pmw_handler_all_channels_pulse_width(htim1, position);
 8000484:	4e31      	ldr	r6, [pc, #196]	; (800054c <main+0x1f4>)
 8000486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000488:	930c      	str	r3, [sp, #48]	; 0x30
 800048a:	466d      	mov	r5, sp
 800048c:	f106 0410 	add.w	r4, r6, #16
 8000490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000498:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800049c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004a4:	f7ff ff3f 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim2, position);
 80004a8:	4e29      	ldr	r6, [pc, #164]	; (8000550 <main+0x1f8>)
 80004aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ac:	930c      	str	r3, [sp, #48]	; 0x30
 80004ae:	466d      	mov	r5, sp
 80004b0:	f106 0410 	add.w	r4, r6, #16
 80004b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004c8:	f7ff ff2d 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim3, position);
 80004cc:	4e21      	ldr	r6, [pc, #132]	; (8000554 <main+0x1fc>)
 80004ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d0:	930c      	str	r3, [sp, #48]	; 0x30
 80004d2:	466d      	mov	r5, sp
 80004d4:	f106 0410 	add.w	r4, r6, #16
 80004d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004ec:	f7ff ff1b 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim4, position);
 80004f0:	4e19      	ldr	r6, [pc, #100]	; (8000558 <main+0x200>)
 80004f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f4:	930c      	str	r3, [sp, #48]	; 0x30
 80004f6:	466d      	mov	r5, sp
 80004f8:	f106 0410 	add.w	r4, r6, #16
 80004fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000504:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000508:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800050c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000510:	f7ff ff09 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>

		position++;
 8000514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000516:	3301      	adds	r3, #1
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (position >= position_maximum) {
 800051a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800051c:	6a3b      	ldr	r3, [r7, #32]
 800051e:	429a      	cmp	r2, r3
 8000520:	d30f      	bcc.n	8000542 <main+0x1ea>
			position = position_minimum;
 8000522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
			htim2.Instance->CCR1 = position;
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <main+0x1f8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin,
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <main+0x20c>)
 8000536:	f001 f8db 	bl	80016f0 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_Delay(600);
 800053a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800053e:	f000 fe4d 	bl	80011dc <HAL_Delay>
		}

		HAL_Delay(0.5);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 fe4a 	bl	80011dc <HAL_Delay>
	while (1) {
 8000548:	e78a      	b.n	8000460 <main+0x108>
 800054a:	bf00      	nop
 800054c:	20000540 	.word	0x20000540
 8000550:	20000580 	.word	0x20000580
 8000554:	20000500 	.word	0x20000500
 8000558:	200004c0 	.word	0x200004c0
 800055c:	080072e0 	.word	0x080072e0
 8000560:	080072f0 	.word	0x080072f0
 8000564:	40011000 	.word	0x40011000

08000568 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800056e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000572:	2228      	movs	r2, #40	; 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 fe9e 	bl	80072b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 f8d0 	bl	8002764 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x66>
		Error_Handler();
 80005ca:	f000 f827 	bl	800061c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005de:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fb3a 	bl	8002c64 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x92>
		Error_Handler();
 80005f6:	f000 f811 	bl	800061c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005fa:	2310      	movs	r3, #16
 80005fc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fcb5 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xac>
		Error_Handler();
 8000610:	f000 f804 	bl	800061c <Error_Handler>
	}
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_SPI1_Init+0x64>)
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_SPI1_Init+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_SPI1_Init+0x64>)
 8000634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_SPI1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_SPI1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_SPI1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_SPI1_Init+0x64>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_SPI1_Init+0x64>)
 800065c:	2208      	movs	r2, #8
 800065e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_SPI1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_SPI1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_SPI1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_SPI1_Init+0x64>)
 8000674:	220a      	movs	r2, #10
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_SPI1_Init+0x64>)
 800067a:	f002 fd31 	bl	80030e0 <HAL_SPI_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000684:	f7ff ffca 	bl	800061c <Error_Handler>
  }

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000468 	.word	0x20000468
 8000690:	40013000 	.word	0x40013000

08000694 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI2_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_SPI2_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006de:	220a      	movs	r2, #10
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_SPI2_Init+0x64>)
 80006e4:	f002 fcfc 	bl	80030e0 <HAL_SPI_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80006ee:	f7ff ff95 	bl	800061c <Error_Handler>
  }

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000410 	.word	0x20000410
 80006fc:	40003800 	.word	0x40003800

08000700 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a3e      	ldr	r2, [pc, #248]	; (8000814 <HAL_SPI_MspInit+0x114>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d13e      	bne.n	800079e <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000720:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <HAL_SPI_MspInit+0x118>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <HAL_SPI_MspInit+0x118>)
 8000726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <HAL_SPI_MspInit+0x118>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b37      	ldr	r3, [pc, #220]	; (8000818 <HAL_SPI_MspInit+0x118>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a36      	ldr	r2, [pc, #216]	; (8000818 <HAL_SPI_MspInit+0x118>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b34      	ldr	r3, [pc, #208]	; (8000818 <HAL_SPI_MspInit+0x118>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000750:	2328      	movs	r3, #40	; 0x28
 8000752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	482e      	ldr	r0, [pc, #184]	; (800081c <HAL_SPI_MspInit+0x11c>)
 8000764:	f000 fe6a 	bl	800143c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000768:	2310      	movs	r3, #16
 800076a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4828      	ldr	r0, [pc, #160]	; (800081c <HAL_SPI_MspInit+0x11c>)
 800077c:	f000 fe5e 	bl	800143c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <HAL_SPI_MspInit+0x120>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000788:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <HAL_SPI_MspInit+0x120>)
 8000798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800079c:	e036      	b.n	800080c <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <HAL_SPI_MspInit+0x124>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d131      	bne.n	800080c <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_SPI_MspInit+0x118>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <HAL_SPI_MspInit+0x118>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	61d3      	str	r3, [r2, #28]
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_SPI_MspInit+0x118>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_SPI_MspInit+0x118>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <HAL_SPI_MspInit+0x118>)
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_SPI_MspInit+0x118>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0308 	and.w	r3, r3, #8
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80007d8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <HAL_SPI_MspInit+0x11c>)
 80007ee:	f000 fe25 	bl	800143c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_SPI_MspInit+0x11c>)
 8000808:	f000 fe18 	bl	800143c <HAL_GPIO_Init>
}
 800080c:	bf00      	nop
 800080e:	3730      	adds	r7, #48	; 0x30
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40013000 	.word	0x40013000
 8000818:	40021000 	.word	0x40021000
 800081c:	40010c00 	.word	0x40010c00
 8000820:	40010000 	.word	0x40010000
 8000824:	40003800 	.word	0x40003800

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <HAL_MspInit+0x5c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_MspInit+0x5c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_MspInit+0x60>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_MspInit+0x60>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000
 8000888:	40010000 	.word	0x40010000

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <HardFault_Handler+0x4>

0800089e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <MemManage_Handler+0x4>

080008a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <BusFault_Handler+0x4>

080008aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 fc64 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008e6:	f001 f962 	bl	8001bae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20001258 	.word	0x20001258

080008f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM2_IRQHandler+0x10>)
 80008fa:	f002 fd17 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000580 	.word	0x20000580

08000908 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <TIM3_IRQHandler+0x10>)
 800090e:	f002 fd0d 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000500 	.word	0x20000500

0800091c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM4_IRQHandler+0x10>)
 8000922:	f002 fd03 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200004c0 	.word	0x200004c0

08000930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <SystemInit+0x5c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <SystemInit+0x5c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <SystemInit+0x5c>)
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	4911      	ldr	r1, [pc, #68]	; (800098c <SystemInit+0x5c>)
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <SystemInit+0x60>)
 8000948:	4013      	ands	r3, r2
 800094a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <SystemInit+0x5c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <SystemInit+0x5c>)
 8000952:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <SystemInit+0x5c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SystemInit+0x5c>)
 8000962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000966:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <SystemInit+0x5c>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <SystemInit+0x5c>)
 800096e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000972:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SystemInit+0x5c>)
 8000976:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800097a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SystemInit+0x64>)
 800097e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000982:	609a      	str	r2, [r3, #8]
#endif 
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000
 8000990:	f8ff0000 	.word	0xf8ff0000
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b096      	sub	sp, #88	; 0x58
 800099c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2220      	movs	r2, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 fc71 	bl	80072b8 <memset>

  htim1.Instance = TIM1;
 80009d6:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <MX_TIM1_Init+0x168>)
 80009d8:	4a4a      	ldr	r2, [pc, #296]	; (8000b04 <MX_TIM1_Init+0x16c>)
 80009da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144-1;
 80009dc:	4b48      	ldr	r3, [pc, #288]	; (8000b00 <MX_TIM1_Init+0x168>)
 80009de:	228f      	movs	r2, #143	; 0x8f
 80009e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <MX_TIM1_Init+0x168>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009e8:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <MX_TIM1_Init+0x168>)
 80009ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80009ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <MX_TIM1_Init+0x168>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f6:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <MX_TIM1_Init+0x168>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <MX_TIM1_Init+0x168>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a02:	483f      	ldr	r0, [pc, #252]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000a04:	f002 fbcd 	bl	80031a2 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a0e:	f7ff fe05 	bl	800061c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4838      	ldr	r0, [pc, #224]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000a20:	f002 feb2 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a2a:	f7ff fdf7 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a2e:	4834      	ldr	r0, [pc, #208]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000a30:	f002 fbe2 	bl	80031f8 <HAL_TIM_OC_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a3a:	f7ff fdef 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482c      	ldr	r0, [pc, #176]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000a4e:	f003 fa23 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a58:	f7ff fde0 	bl	800061c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481f      	ldr	r0, [pc, #124]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000a82:	f002 fd5b 	bl	800353c <HAL_TIM_OC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a8c:	f7ff fdc6 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	2204      	movs	r2, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4819      	ldr	r0, [pc, #100]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000a9a:	f002 fd4f 	bl	800353c <HAL_TIM_OC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000aa4:	f7ff fdba 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000ab2:	f002 fd43 	bl	800353c <HAL_TIM_OC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000abc:	f7ff fdae 	bl	800061c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000ae4:	f003 fa1c 	bl	8003f20 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000aee:	f7ff fd95 	bl	800061c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM1_Init+0x168>)
 8000af4:	f000 fa3e 	bl	8000f74 <HAL_TIM_MspPostInit>

}
 8000af8:	bf00      	nop
 8000afa:	3758      	adds	r7, #88	; 0x58
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000540 	.word	0x20000540
 8000b04:	40012c00 	.word	0x40012c00

08000b08 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 0320 	add.w	r3, r7, #32
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]
 8000b36:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000b38:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000b40:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b42:	228f      	movs	r2, #143	; 0x8f
 8000b44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000b4c:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b60:	4833      	ldr	r0, [pc, #204]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b62:	f002 fb1e 	bl	80031a2 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b6c:	f7ff fd56 	bl	800061c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	482c      	ldr	r0, [pc, #176]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b7e:	f002 fe03 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b88:	f7ff fd48 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b8c:	4828      	ldr	r0, [pc, #160]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000b8e:	f002 fb67 	bl	8003260 <HAL_TIM_PWM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b98:	f7ff fd40 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4821      	ldr	r0, [pc, #132]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000bac:	f003 f974 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bb6:	f7ff fd31 	bl	800061c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bba:	2360      	movs	r3, #96	; 0x60
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000bd2:	f002 fd13 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bdc:	f7ff fd1e 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2204      	movs	r2, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000be8:	f002 fd08 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bf2:	f7ff fd13 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000bfe:	f002 fcfd 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000c08:	f7ff fd08 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	220c      	movs	r2, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000c14:	f002 fcf2 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000c1e:	f7ff fcfd 	bl	800061c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000c22:	4803      	ldr	r0, [pc, #12]	; (8000c30 <MX_TIM2_Init+0x128>)
 8000c24:	f000 f9a6 	bl	8000f74 <HAL_TIM_MspPostInit>

}
 8000c28:	bf00      	nop
 8000c2a:	3738      	adds	r7, #56	; 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000580 	.word	0x20000580

08000c34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	f107 0320 	add.w	r3, r7, #32
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000c64:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000c66:	4a3e      	ldr	r2, [pc, #248]	; (8000d60 <MX_TIM3_Init+0x12c>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 144-1;
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000c6c:	228f      	movs	r2, #143	; 0x8f
 8000c6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000c76:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000c78:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c8a:	4834      	ldr	r0, [pc, #208]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000c8c:	f002 fa89 	bl	80031a2 <HAL_TIM_Base_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c96:	f7ff fcc1 	bl	800061c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	482d      	ldr	r0, [pc, #180]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000ca8:	f002 fd6e 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cb2:	f7ff fcb3 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cb6:	4829      	ldr	r0, [pc, #164]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000cb8:	f002 fad2 	bl	8003260 <HAL_TIM_PWM_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cc2:	f7ff fcab 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000cd6:	f003 f8df 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ce0:	f7ff fc9c 	bl	800061c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce4:	2360      	movs	r3, #96	; 0x60
 8000ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4818      	ldr	r0, [pc, #96]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000cfc:	f002 fc7e 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d06:	f7ff fc89 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000d12:	f002 fc73 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d1c:	f7ff fc7e 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2208      	movs	r2, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000d28:	f002 fc68 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000d32:	f7ff fc73 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	220c      	movs	r2, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000d3e:	f002 fc5d 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000d48:	f7ff fc68 	bl	800061c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <MX_TIM3_Init+0x128>)
 8000d4e:	f000 f911 	bl	8000f74 <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000500 	.word	0x20000500
 8000d60:	40000400 	.word	0x40000400

08000d64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000d96:	4a3e      	ldr	r2, [pc, #248]	; (8000e90 <MX_TIM4_Init+0x12c>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000d9c:	228f      	movs	r2, #143	; 0x8f
 8000d9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000da6:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000da8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db4:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dba:	4834      	ldr	r0, [pc, #208]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000dbc:	f002 f9f1 	bl	80031a2 <HAL_TIM_Base_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000dc6:	f7ff fc29 	bl	800061c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	482d      	ldr	r0, [pc, #180]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000dd8:	f002 fcd6 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000de2:	f7ff fc1b 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000de6:	4829      	ldr	r0, [pc, #164]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000de8:	f002 fa3a 	bl	8003260 <HAL_TIM_PWM_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000df2:	f7ff fc13 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	4619      	mov	r1, r3
 8000e04:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000e06:	f003 f847 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e10:	f7ff fc04 	bl	800061c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e14:	2360      	movs	r3, #96	; 0x60
 8000e16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4818      	ldr	r0, [pc, #96]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000e2c:	f002 fbe6 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e36:	f7ff fbf1 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4812      	ldr	r0, [pc, #72]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000e42:	f002 fbdb 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e4c:	f7ff fbe6 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2208      	movs	r2, #8
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000e58:	f002 fbd0 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000e62:	f7ff fbdb 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	220c      	movs	r2, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000e6e:	f002 fbc5 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000e78:	f7ff fbd0 	bl	800061c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM4_Init+0x128>)
 8000e7e:	f000 f879 	bl	8000f74 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200004c0 	.word	0x200004c0
 8000e90:	40000800 	.word	0x40000800

08000e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a30      	ldr	r2, [pc, #192]	; (8000f64 <HAL_TIM_Base_MspInit+0xd0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ebe:	e04c      	b.n	8000f5a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec8:	d114      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a26      	ldr	r2, [pc, #152]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	201c      	movs	r0, #28
 8000ee8:	f000 fa71 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eec:	201c      	movs	r0, #28
 8000eee:	f000 fa8a 	bl	8001406 <HAL_NVIC_EnableIRQ>
}
 8000ef2:	e032      	b.n	8000f5a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <HAL_TIM_Base_MspInit+0xd8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d114      	bne.n	8000f28 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	201d      	movs	r0, #29
 8000f1c:	f000 fa57 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f000 fa70 	bl	8001406 <HAL_NVIC_EnableIRQ>
}
 8000f26:	e018      	b.n	8000f5a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <HAL_TIM_Base_MspInit+0xdc>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d113      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_TIM_Base_MspInit+0xd4>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201e      	movs	r0, #30
 8000f50:	f000 fa3d 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f54:	201e      	movs	r0, #30
 8000f56:	f000 fa56 	bl	8001406 <HAL_NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	40000800 	.word	0x40000800

08000f74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_TIM_MspPostInit+0x140>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d119      	bne.n	8000fc8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	483e      	ldr	r0, [pc, #248]	; (80010bc <HAL_TIM_MspPostInit+0x148>)
 8000fc2:	f000 fa3b 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fc6:	e071      	b.n	80010ac <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd0:	d118      	bne.n	8001004 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fea:	230f      	movs	r3, #15
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482f      	ldr	r0, [pc, #188]	; (80010bc <HAL_TIM_MspPostInit+0x148>)
 8000ffe:	f000 fa1d 	bl	800143c <HAL_GPIO_Init>
}
 8001002:	e053      	b.n	80010ac <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <HAL_TIM_MspPostInit+0x14c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d130      	bne.n	8001070 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800103e:	23c0      	movs	r3, #192	; 0xc0
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2302      	movs	r3, #2
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	4619      	mov	r1, r3
 8001050:	481a      	ldr	r0, [pc, #104]	; (80010bc <HAL_TIM_MspPostInit+0x148>)
 8001052:	f000 f9f3 	bl	800143c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2302      	movs	r3, #2
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	4619      	mov	r1, r3
 8001068:	4816      	ldr	r0, [pc, #88]	; (80010c4 <HAL_TIM_MspPostInit+0x150>)
 800106a:	f000 f9e7 	bl	800143c <HAL_GPIO_Init>
}
 800106e:	e01d      	b.n	80010ac <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <HAL_TIM_MspPostInit+0x154>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d118      	bne.n	80010ac <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_TIM_MspPostInit+0x144>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001092:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2302      	movs	r3, #2
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4619      	mov	r1, r3
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <HAL_TIM_MspPostInit+0x150>)
 80010a8:	f000 f9c8 	bl	800143c <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3730      	adds	r7, #48	; 0x30
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40000400 	.word	0x40000400
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40000800 	.word	0x40000800

080010cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010e8:	f842 3b04 	str.w	r3, [r2], #4

080010ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010f2:	f7ff fc1d 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f006 f8bb 	bl	8007270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fa:	f7ff f92d 	bl	8000358 <main>
  bx lr
 80010fe:	4770      	bx	lr
  ldr r3, =_sidata
 8001100:	0800737c 	.word	0x0800737c
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001108:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 800110c:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8001110:	200014c4 	.word	0x200014c4

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x28>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f945 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fb78 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f95d 	bl	8001422 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f925 	bl	80013ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <HAL_IncTick+0x20>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20000008 	.word	0x20000008
 80011c4:	200005c0 	.word	0x200005c0

080011c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	200005c0 	.word	0x200005c0

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff fff0 	bl	80011c8 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_Delay+0x40>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffe0 	bl	80011c8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000008 	.word	0x20000008

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4906      	ldr	r1, [pc, #24]	; (80012b8 <__NVIC_EnableIRQ+0x34>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff90 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff2d 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff42 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff90 	bl	8001310 <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5f 	bl	80012bc <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff35 	bl	8001284 <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b08b      	sub	sp, #44	; 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e127      	b.n	80016a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001450:	2201      	movs	r2, #1
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8116 	bne.w	800169a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b12      	cmp	r3, #18
 8001474:	d034      	beq.n	80014e0 <HAL_GPIO_Init+0xa4>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d80d      	bhi.n	8001496 <HAL_GPIO_Init+0x5a>
 800147a:	2b02      	cmp	r3, #2
 800147c:	d02b      	beq.n	80014d6 <HAL_GPIO_Init+0x9a>
 800147e:	2b02      	cmp	r3, #2
 8001480:	d804      	bhi.n	800148c <HAL_GPIO_Init+0x50>
 8001482:	2b00      	cmp	r3, #0
 8001484:	d031      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d01c      	beq.n	80014c4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148a:	e048      	b.n	800151e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800148c:	2b03      	cmp	r3, #3
 800148e:	d043      	beq.n	8001518 <HAL_GPIO_Init+0xdc>
 8001490:	2b11      	cmp	r3, #17
 8001492:	d01b      	beq.n	80014cc <HAL_GPIO_Init+0x90>
          break;
 8001494:	e043      	b.n	800151e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001496:	4a89      	ldr	r2, [pc, #548]	; (80016bc <HAL_GPIO_Init+0x280>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d026      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 800149c:	4a87      	ldr	r2, [pc, #540]	; (80016bc <HAL_GPIO_Init+0x280>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d806      	bhi.n	80014b0 <HAL_GPIO_Init+0x74>
 80014a2:	4a87      	ldr	r2, [pc, #540]	; (80016c0 <HAL_GPIO_Init+0x284>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d020      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 80014a8:	4a86      	ldr	r2, [pc, #536]	; (80016c4 <HAL_GPIO_Init+0x288>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01d      	beq.n	80014ea <HAL_GPIO_Init+0xae>
          break;
 80014ae:	e036      	b.n	800151e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014b0:	4a85      	ldr	r2, [pc, #532]	; (80016c8 <HAL_GPIO_Init+0x28c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 80014b6:	4a85      	ldr	r2, [pc, #532]	; (80016cc <HAL_GPIO_Init+0x290>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d016      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 80014bc:	4a84      	ldr	r2, [pc, #528]	; (80016d0 <HAL_GPIO_Init+0x294>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0xae>
          break;
 80014c2:	e02c      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e028      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	3304      	adds	r3, #4
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e023      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	3308      	adds	r3, #8
 80014dc:	623b      	str	r3, [r7, #32]
          break;
 80014de:	e01e      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	330c      	adds	r3, #12
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e019      	b.n	800151e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014f2:	2304      	movs	r3, #4
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e012      	b.n	800151e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d105      	bne.n	800150c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	611a      	str	r2, [r3, #16]
          break;
 800150a:	e008      	b.n	800151e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800150c:	2308      	movs	r3, #8
 800150e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	615a      	str	r2, [r3, #20]
          break;
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
          break;
 800151c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2bff      	cmp	r3, #255	; 0xff
 8001522:	d801      	bhi.n	8001528 <HAL_GPIO_Init+0xec>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	e001      	b.n	800152c <HAL_GPIO_Init+0xf0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3304      	adds	r3, #4
 800152c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2bff      	cmp	r3, #255	; 0xff
 8001532:	d802      	bhi.n	800153a <HAL_GPIO_Init+0xfe>
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x104>
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3b08      	subs	r3, #8
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	210f      	movs	r1, #15
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	401a      	ands	r2, r3
 8001552:	6a39      	ldr	r1, [r7, #32]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	431a      	orrs	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 8096 	beq.w	800169a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <HAL_GPIO_Init+0x298>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <HAL_GPIO_Init+0x298>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <HAL_GPIO_Init+0x298>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001586:	4a54      	ldr	r2, [pc, #336]	; (80016d8 <HAL_GPIO_Init+0x29c>)
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_GPIO_Init+0x2a0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x19e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x2a4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x19a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_GPIO_Init+0x2a8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x196>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2ac>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x192>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x1a0>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x1a0>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x1a0>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x1a0>
 80015da:	2300      	movs	r3, #0
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4093      	lsls	r3, r2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ec:	493a      	ldr	r1, [pc, #232]	; (80016d8 <HAL_GPIO_Init+0x29c>)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4938      	ldr	r1, [pc, #224]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	43db      	mvns	r3, r3
 800161c:	4933      	ldr	r1, [pc, #204]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800161e:	4013      	ands	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	492e      	ldr	r1, [pc, #184]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	43db      	mvns	r3, r3
 8001644:	4929      	ldr	r1, [pc, #164]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001646:	4013      	ands	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	4924      	ldr	r1, [pc, #144]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	43db      	mvns	r3, r3
 800166c:	491f      	ldr	r1, [pc, #124]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800166e:	4013      	ands	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	491a      	ldr	r1, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	60cb      	str	r3, [r1, #12]
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	43db      	mvns	r3, r3
 8001694:	4915      	ldr	r1, [pc, #84]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001696:	4013      	ands	r3, r2
 8001698:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	3301      	adds	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f aed0 	bne.w	8001450 <HAL_GPIO_Init+0x14>
  }
}
 80016b0:	bf00      	nop
 80016b2:	372c      	adds	r7, #44	; 0x2c
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	10210000 	.word	0x10210000
 80016c0:	10110000 	.word	0x10110000
 80016c4:	10120000 	.word	0x10120000
 80016c8:	10310000 	.word	0x10310000
 80016cc:	10320000 	.word	0x10320000
 80016d0:	10220000 	.word	0x10220000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40010800 	.word	0x40010800
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40011400 	.word	0x40011400
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	611a      	str	r2, [r3, #16]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001738:	887a      	ldrh	r2, [r7, #2]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800173e:	e002      	b.n	8001746 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001740:	887a      	ldrh	r2, [r7, #2]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	611a      	str	r2, [r3, #16]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e10f      	b.n	8001982 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d106      	bne.n	800177c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7fe fd6e 	bl	8000258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2224      	movs	r2, #36	; 0x24
 8001780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001794:	f001 fbbc 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 8001798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a7b      	ldr	r2, [pc, #492]	; (800198c <HAL_I2C_Init+0x23c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d807      	bhi.n	80017b4 <HAL_I2C_Init+0x64>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_I2C_Init+0x240>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	bf94      	ite	ls
 80017ac:	2301      	movls	r3, #1
 80017ae:	2300      	movhi	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	e006      	b.n	80017c2 <HAL_I2C_Init+0x72>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a77      	ldr	r2, [pc, #476]	; (8001994 <HAL_I2C_Init+0x244>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	bf94      	ite	ls
 80017bc:	2301      	movls	r3, #1
 80017be:	2300      	movhi	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0db      	b.n	8001982 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4a72      	ldr	r2, [pc, #456]	; (8001998 <HAL_I2C_Init+0x248>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9b      	lsrs	r3, r3, #18
 80017d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a64      	ldr	r2, [pc, #400]	; (800198c <HAL_I2C_Init+0x23c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d802      	bhi.n	8001804 <HAL_I2C_Init+0xb4>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3301      	adds	r3, #1
 8001802:	e009      	b.n	8001818 <HAL_I2C_Init+0xc8>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	4a63      	ldr	r2, [pc, #396]	; (800199c <HAL_I2C_Init+0x24c>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	3301      	adds	r3, #1
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	430b      	orrs	r3, r1
 800181e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800182a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4956      	ldr	r1, [pc, #344]	; (800198c <HAL_I2C_Init+0x23c>)
 8001834:	428b      	cmp	r3, r1
 8001836:	d80d      	bhi.n	8001854 <HAL_I2C_Init+0x104>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e59      	subs	r1, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fbb1 f3f3 	udiv	r3, r1, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184c:	2b04      	cmp	r3, #4
 800184e:	bf38      	it	cc
 8001850:	2304      	movcc	r3, #4
 8001852:	e04f      	b.n	80018f4 <HAL_I2C_Init+0x1a4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d111      	bne.n	8001880 <HAL_I2C_Init+0x130>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e012      	b.n	80018a6 <HAL_I2C_Init+0x156>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1e58      	subs	r0, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	0099      	lsls	r1, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	fbb0 f3f3 	udiv	r3, r0, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Init+0x15e>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e022      	b.n	80018f4 <HAL_I2C_Init+0x1a4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10e      	bne.n	80018d4 <HAL_I2C_Init+0x184>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1e58      	subs	r0, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6859      	ldr	r1, [r3, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	440b      	add	r3, r1
 80018c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c8:	3301      	adds	r3, #1
 80018ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d2:	e00f      	b.n	80018f4 <HAL_I2C_Init+0x1a4>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	0099      	lsls	r1, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	6809      	ldr	r1, [r1, #0]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69da      	ldr	r2, [r3, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6911      	ldr	r1, [r2, #16]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68d2      	ldr	r2, [r2, #12]
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	430b      	orrs	r3, r1
 8001936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	000186a0 	.word	0x000186a0
 8001990:	001e847f 	.word	0x001e847f
 8001994:	003d08ff 	.word	0x003d08ff
 8001998:	431bde83 	.word	0x431bde83
 800199c:	10624dd3 	.word	0x10624dd3

080019a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	b08b      	sub	sp, #44	; 0x2c
 80019a4:	af06      	add	r7, sp, #24
 80019a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0d3      	b.n	8001b5a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f005 f9b4 	bl	8006d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2203      	movs	r2, #3
 80019d0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fb2b 	bl	8004034 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	687e      	ldr	r6, [r7, #4]
 80019e6:	466d      	mov	r5, sp
 80019e8:	f106 0410 	add.w	r4, r6, #16
 80019ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	602b      	str	r3, [r5, #0]
 80019f4:	1d33      	adds	r3, r6, #4
 80019f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f8:	6838      	ldr	r0, [r7, #0]
 80019fa:	f002 faf4 	bl	8003fe6 <USB_CoreInit>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0a4      	b.n	8001b5a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fb28 	bl	800406c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e035      	b.n	8001a8e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	4413      	add	r3, r2
 8001a2a:	3329      	adds	r3, #41	; 0x29
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	015b      	lsls	r3, r3, #5
 8001a36:	4413      	add	r3, r2
 8001a38:	3328      	adds	r3, #40	; 0x28
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	b291      	uxth	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	4413      	add	r3, r2
 8001a4a:	3336      	adds	r3, #54	; 0x36
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	4413      	add	r3, r2
 8001a58:	332b      	adds	r3, #43	; 0x2b
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	015b      	lsls	r3, r3, #5
 8001a64:	4413      	add	r3, r2
 8001a66:	3338      	adds	r3, #56	; 0x38
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	015b      	lsls	r3, r3, #5
 8001a72:	4413      	add	r3, r2
 8001a74:	333c      	adds	r3, #60	; 0x3c
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	4413      	add	r3, r2
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d3c4      	bcc.n	8001a22 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e031      	b.n	8001b02 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	015b      	lsls	r3, r3, #5
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	015b      	lsls	r3, r3, #5
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	015b      	lsls	r3, r3, #5
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	330a      	adds	r3, #10
 8001af4:	015b      	lsls	r3, r3, #5
 8001af6:	4413      	add	r3, r2
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	3301      	adds	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3c8      	bcc.n	8001a9e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	687e      	ldr	r6, [r7, #4]
 8001b14:	466d      	mov	r5, sp
 8001b16:	f106 0410 	add.w	r4, r6, #16
 8001b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	602b      	str	r3, [r5, #0]
 8001b22:	1d33      	adds	r3, r6, #4
 8001b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b26:	6838      	ldr	r0, [r7, #0]
 8001b28:	f002 faac 	bl	8004084 <USB_DevInit>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00d      	b.n	8001b5a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 fae9 	bl	800512a <USB_DevDisconnect>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_PCD_Start+0x16>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e016      	b.n	8001ba6 <HAL_PCD_Start+0x44>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b80:	2101      	movs	r1, #1
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f005 fb3d 	bl	8007202 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fac2 	bl	8005116 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fa35 	bl	8004006 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fabf 	bl	800513e <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bca:	d102      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 faf3 	bl	80021b8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fab1 	bl	800513e <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be6:	d112      	bne.n	8001c0e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f005 f90c 	bl	8006e1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c06:	2100      	movs	r1, #0
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8de 	bl	8001dca <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fa93 	bl	800513e <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c22:	d10b      	bne.n	8001c3c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c36:	b292      	uxth	r2, r2
 8001c38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fa7c 	bl	800513e <USB_ReadInterrupts>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c50:	d10b      	bne.n	8001c6a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c64:	b292      	uxth	r2, r2
 8001c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fa65 	bl	800513e <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7e:	d126      	bne.n	8001cce <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0204 	bic.w	r2, r2, #4
 8001c92:	b292      	uxth	r2, r2
 8001c94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0208 	bic.w	r2, r2, #8
 8001caa:	b292      	uxth	r2, r2
 8001cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 f8ed 	bl	8006e90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cc8:	b292      	uxth	r2, r2
 8001cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fa33 	bl	800513e <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ce2:	d13d      	bne.n	8001d60 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0208 	orr.w	r2, r2, #8
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0204 	orr.w	r2, r2, #4
 8001d26:	b292      	uxth	r2, r2
 8001d28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fa04 	bl	800513e <USB_ReadInterrupts>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d40:	d10b      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d54:	b292      	uxth	r2, r2
 8001d56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f005 f87e 	bl	8006e5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 f9ea 	bl	800513e <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d74:	d10e      	bne.n	8001d94 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f005 f837 	bl	8006e02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 f9d0 	bl	800513e <USB_ReadInterrupts>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da8:	d10b      	bne.n	8001dc2 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dbc:	b292      	uxth	r2, r2
 8001dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_PCD_SetAddress+0x1a>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e013      	b.n	8001e0c <HAL_PCD_SetAddress+0x42>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 f977 	bl	80050f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4603      	mov	r3, r0
 8001e24:	70fb      	strb	r3, [r7, #3]
 8001e26:	460b      	mov	r3, r1
 8001e28:	803b      	strh	r3, [r7, #0]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da0b      	bge.n	8001e52 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	015b      	lsls	r3, r3, #5
 8001e42:	3328      	adds	r3, #40	; 0x28
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	705a      	strb	r2, [r3, #1]
 8001e50:	e00b      	b.n	8001e6a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	015b      	lsls	r3, r3, #5
 8001e5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e76:	883a      	ldrh	r2, [r7, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	78ba      	ldrb	r2, [r7, #2]
 8001e80:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e94:	78bb      	ldrb	r3, [r7, #2]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d102      	bne.n	8001ea0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_PCD_EP_Open+0x9a>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e00e      	b.n	8001ecc <HAL_PCD_EP_Open+0xb8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68f9      	ldr	r1, [r7, #12]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 f905 	bl	80040cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001eca:	7afb      	ldrb	r3, [r7, #11]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da0b      	bge.n	8001f00 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	015b      	lsls	r3, r3, #5
 8001ef0:	3328      	adds	r3, #40	; 0x28
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	705a      	strb	r2, [r3, #1]
 8001efe:	e00b      	b.n	8001f18 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	015b      	lsls	r3, r3, #5
 8001f08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_EP_Close+0x5e>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e00e      	b.n	8001f50 <HAL_PCD_EP_Close+0x7c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 fbb1 	bl	80046a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	460b      	mov	r3, r1
 8001f66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6979      	ldr	r1, [r7, #20]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fd10 	bl	80049d4 <USB_EPStartXfer>
 8001fb4:	e005      	b.n	8001fc2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6979      	ldr	r1, [r7, #20]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fd09 	bl	80049d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	330a      	adds	r3, #10
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	460b      	mov	r3, r1
 8002002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	015b      	lsls	r3, r3, #5
 800200c:	3328      	adds	r3, #40	; 0x28
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2201      	movs	r2, #1
 800202a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fcc3 	bl	80049d4 <USB_EPStartXfer>
 800204e:	e005      	b.n	800205c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fcbc 	bl	80049d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0207 	and.w	r2, r3, #7
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d901      	bls.n	8002084 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e046      	b.n	8002112 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0b      	bge.n	80020a4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	015b      	lsls	r3, r3, #5
 8002094:	3328      	adds	r3, #40	; 0x28
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	705a      	strb	r2, [r3, #1]
 80020a2:	e009      	b.n	80020b8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	015b      	lsls	r3, r3, #5
 80020a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_EP_SetStall+0x72>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e01c      	b.n	8002112 <HAL_PCD_EP_SetStall+0xac>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 ff2c 	bl	8004f44 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d108      	bne.n	8002108 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f003 f82a 	bl	800515c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d901      	bls.n	8002138 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e03a      	b.n	80021ae <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213c:	2b00      	cmp	r3, #0
 800213e:	da0b      	bge.n	8002158 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	015b      	lsls	r3, r3, #5
 8002148:	3328      	adds	r3, #40	; 0x28
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	705a      	strb	r2, [r3, #1]
 8002156:	e00b      	b.n	8002170 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	015b      	lsls	r3, r3, #5
 8002160:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	b2da      	uxtb	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_PCD_EP_ClrStall+0x76>
 800218c:	2302      	movs	r3, #2
 800218e:	e00e      	b.n	80021ae <HAL_PCD_EP_ClrStall+0x94>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68f9      	ldr	r1, [r7, #12]
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 ff12 	bl	8004fc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021c0:	e282      	b.n	80026c8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ca:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021cc:	8afb      	ldrh	r3, [r7, #22]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80021d6:	7d7b      	ldrb	r3, [r7, #21]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 8142 	bne.w	8002462 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021de:	8afb      	ldrh	r3, [r7, #22]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d151      	bne.n	800228c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f8:	b29c      	uxth	r4, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002206:	b29b      	uxth	r3, r3
 8002208:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3328      	adds	r3, #40	; 0x28
 800220e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	3302      	adds	r3, #2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	441a      	add	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800224a:	2100      	movs	r1, #0
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f004 fdc1 	bl	8006dd4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8234 	beq.w	80026c8 <PCD_EP_ISR_Handler+0x510>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 822f 	bne.w	80026c8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002276:	b2da      	uxtb	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b292      	uxth	r2, r2
 800227e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800228a:	e21d      	b.n	80026c8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002292:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800229c:	8a7b      	ldrh	r3, [r7, #18]
 800229e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d033      	beq.n	800230e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	3306      	adds	r3, #6
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f002 ff88 	bl	80051fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022f6:	4013      	ands	r3, r2
 80022f8:	b29c      	uxth	r4, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002302:	b292      	uxth	r2, r2
 8002304:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f004 fd3a 	bl	8006d80 <HAL_PCD_SetupStageCallback>
 800230c:	e1dc      	b.n	80026c8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800230e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f280 81d8 	bge.w	80026c8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29a      	uxth	r2, r3
 8002320:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002324:	4013      	ands	r3, r2
 8002326:	b29c      	uxth	r4, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002330:	b292      	uxth	r2, r2
 8002332:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	3306      	adds	r3, #6
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d019      	beq.n	800239c <PCD_EP_ISR_Handler+0x1e4>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d015      	beq.n	800239c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6959      	ldr	r1, [r3, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002380:	b29b      	uxth	r3, r3
 8002382:	f002 ff3a 	bl	80051fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	441a      	add	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002394:	2100      	movs	r1, #0
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f004 fd04 	bl	8006da4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461c      	mov	r4, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	441c      	add	r4, r3
 80023ae:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80023b2:	461c      	mov	r4, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10e      	bne.n	80023da <PCD_EP_ISR_Handler+0x222>
 80023bc:	8823      	ldrh	r3, [r4, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	8023      	strh	r3, [r4, #0]
 80023c8:	8823      	ldrh	r3, [r4, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	8023      	strh	r3, [r4, #0]
 80023d8:	e02d      	b.n	8002436 <PCD_EP_ISR_Handler+0x27e>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b3e      	cmp	r3, #62	; 0x3e
 80023e0:	d812      	bhi.n	8002408 <PCD_EP_ISR_Handler+0x250>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <PCD_EP_ISR_Handler+0x244>
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	b29b      	uxth	r3, r3
 8002404:	8023      	strh	r3, [r4, #0]
 8002406:	e016      	b.n	8002436 <PCD_EP_ISR_Handler+0x27e>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <PCD_EP_ISR_Handler+0x26a>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	3b01      	subs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	b29b      	uxth	r3, r3
 8002426:	029b      	lsls	r3, r3, #10
 8002428:	b29b      	uxth	r3, r3
 800242a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002432:	b29b      	uxth	r3, r3
 8002434:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002446:	b29c      	uxth	r4, r3
 8002448:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800244c:	b29c      	uxth	r4, r3
 800244e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002452:	b29c      	uxth	r4, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4ba2      	ldr	r3, [pc, #648]	; (80026e4 <PCD_EP_ISR_Handler+0x52c>)
 800245a:	4323      	orrs	r3, r4
 800245c:	b29b      	uxth	r3, r3
 800245e:	8013      	strh	r3, [r2, #0]
 8002460:	e132      	b.n	80026c8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	7d7b      	ldrb	r3, [r7, #21]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002472:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f280 80d1 	bge.w	800261e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	7d7b      	ldrb	r3, [r7, #21]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29a      	uxth	r2, r3
 800248c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002490:	4013      	ands	r3, r2
 8002492:	b29c      	uxth	r4, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	7d7b      	ldrb	r3, [r7, #21]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80024a4:	b292      	uxth	r2, r2
 80024a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024a8:	7d7b      	ldrb	r3, [r7, #21]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	7b1b      	ldrb	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d121      	bne.n	8002502 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	3306      	adds	r3, #6
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80024e8:	8bfb      	ldrh	r3, [r7, #30]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d072      	beq.n	80025d4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6959      	ldr	r1, [r3, #20]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	88da      	ldrh	r2, [r3, #6]
 80024fa:	8bfb      	ldrh	r3, [r7, #30]
 80024fc:	f002 fe7d 	bl	80051fa <USB_ReadPMA>
 8002500:	e068      	b.n	80025d4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d021      	beq.n	8002560 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	3302      	adds	r3, #2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002546:	8bfb      	ldrh	r3, [r7, #30]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02a      	beq.n	80025a2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6959      	ldr	r1, [r3, #20]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	891a      	ldrh	r2, [r3, #8]
 8002558:	8bfb      	ldrh	r3, [r7, #30]
 800255a:	f002 fe4e 	bl	80051fa <USB_ReadPMA>
 800255e:	e020      	b.n	80025a2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	3306      	adds	r3, #6
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002588:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800258a:	8bfb      	ldrh	r3, [r7, #30]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6959      	ldr	r1, [r3, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	895a      	ldrh	r2, [r3, #10]
 800259c:	8bfb      	ldrh	r3, [r7, #30]
 800259e:	f002 fe2c 	bl	80051fa <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025bc:	b29c      	uxth	r4, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	441a      	add	r2, r3
 80025cc:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <PCD_EP_ISR_Handler+0x530>)
 80025ce:	4323      	orrs	r3, r4
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	8bfb      	ldrh	r3, [r7, #30]
 80025da:	441a      	add	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	8bfb      	ldrh	r3, [r7, #30]
 80025e6:	441a      	add	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <PCD_EP_ISR_Handler+0x446>
 80025f4:	8bfa      	ldrh	r2, [r7, #30]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d206      	bcs.n	800260c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f004 fbcd 	bl	8006da4 <HAL_PCD_DataOutStageCallback>
 800260a:	e008      	b.n	800261e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	7819      	ldrb	r1, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff fc9d 	bl	8001f58 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800261e:	8a7b      	ldrh	r3, [r7, #18]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d04f      	beq.n	80026c8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002628:	7d7b      	ldrb	r3, [r7, #21]
 800262a:	015b      	lsls	r3, r3, #5
 800262c:	3328      	adds	r3, #40	; 0x28
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	7d7b      	ldrb	r3, [r7, #21]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	b29c      	uxth	r4, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	7d7b      	ldrb	r3, [r7, #21]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	441a      	add	r2, r3
 800265a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800265e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002662:	b29b      	uxth	r3, r3
 8002664:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	3302      	adds	r3, #2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	441a      	add	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d106      	bne.n	80026b6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f004 fb90 	bl	8006dd4 <HAL_PCD_DataInStageCallback>
 80026b4:	e008      	b.n	80026c8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	7819      	ldrb	r1, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fc96 	bl	8001ff4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f6ff ad74 	blt.w	80021c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3724      	adds	r7, #36	; 0x24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	ffff8080 	.word	0xffff8080
 80026e8:	ffff80c0 	.word	0xffff80c0

080026ec <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	4613      	mov	r3, r2
 80026fc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800270a:	897b      	ldrh	r3, [r7, #10]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	015b      	lsls	r3, r3, #5
 8002712:	3328      	adds	r3, #40	; 0x28
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e006      	b.n	800272a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800271c:	897b      	ldrh	r3, [r7, #10]
 800271e:	015b      	lsls	r3, r3, #5
 8002720:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800272a:	893b      	ldrh	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2200      	movs	r2, #0
 8002734:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	b29a      	uxth	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	80da      	strh	r2, [r3, #6]
 800273e:	e00b      	b.n	8002758 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2201      	movs	r2, #1
 8002744:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	b29a      	uxth	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	b29a      	uxth	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e26c      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8087 	beq.w	8002892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002784:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b04      	cmp	r3, #4
 800278e:	d00c      	beq.n	80027aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002790:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d112      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5e>
 800279c:	4b8c      	ldr	r3, [pc, #560]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d10b      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027aa:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d06c      	beq.n	8002890 <HAL_RCC_OscConfig+0x12c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d168      	bne.n	8002890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e246      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x76>
 80027cc:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7f      	ldr	r2, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e02e      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x98>
 80027e2:	4b7b      	ldr	r3, [pc, #492]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7a      	ldr	r2, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a77      	ldr	r2, [pc, #476]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e01d      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0xbc>
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a71      	ldr	r2, [pc, #452]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e00b      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 8002820:	4b6b      	ldr	r3, [pc, #428]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe fcc2 	bl	80011c8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe fcbe 	bl	80011c8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1fa      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0xe4>
 8002866:	e014      	b.n	8002892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fcae 	bl	80011c8 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe fcaa 	bl	80011c8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1e6      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x10c>
 800288e:	e000      	b.n	8002892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d063      	beq.n	8002966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d11c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x18c>
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d116      	bne.n	80028f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x176>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e1ba      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4939      	ldr	r1, [pc, #228]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	e03a      	b.n	8002966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x270>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fc63 	bl	80011c8 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002906:	f7fe fc5f 	bl	80011c8 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e19b      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4927      	ldr	r1, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCC_OscConfig+0x270>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe fc42 	bl	80011c8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002948:	f7fe fc3e 	bl	80011c8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e17a      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d03a      	beq.n	80029e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d019      	beq.n	80029ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_RCC_OscConfig+0x274>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fe fc22 	bl	80011c8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fc1e 	bl	80011c8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e15a      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029a6:	2001      	movs	r0, #1
 80029a8:	f000 fac6 	bl	8002f38 <RCC_Delay>
 80029ac:	e01c      	b.n	80029e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_RCC_OscConfig+0x274>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe fc08 	bl	80011c8 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe fc04 	bl	80011c8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d908      	bls.n	80029dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e140      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	42420000 	.word	0x42420000
 80029d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029dc:	4b9e      	ldr	r3, [pc, #632]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e9      	bne.n	80029bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a6 	beq.w	8002b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fa:	4b97      	ldr	r3, [pc, #604]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b94      	ldr	r3, [pc, #592]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4a93      	ldr	r2, [pc, #588]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	61d3      	str	r3, [r2, #28]
 8002a12:	4b91      	ldr	r3, [pc, #580]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b8e      	ldr	r3, [pc, #568]	; (8002c5c <HAL_RCC_OscConfig+0x4f8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d118      	bne.n	8002a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a8a      	ldr	r2, [pc, #552]	; (8002c5c <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fbc5 	bl	80011c8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7fe fbc1 	bl	80011c8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b64      	cmp	r3, #100	; 0x64
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0fd      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCC_OscConfig+0x4f8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x312>
 8002a68:	4b7b      	ldr	r3, [pc, #492]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4a7a      	ldr	r2, [pc, #488]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6213      	str	r3, [r2, #32]
 8002a74:	e02d      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x334>
 8002a7e:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4a75      	ldr	r2, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6213      	str	r3, [r2, #32]
 8002a8a:	4b73      	ldr	r3, [pc, #460]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a72      	ldr	r2, [pc, #456]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	e01c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x356>
 8002aa0:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4a6c      	ldr	r2, [pc, #432]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6213      	str	r3, [r2, #32]
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6213      	str	r3, [r2, #32]
 8002ab8:	e00b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002aba:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a66      	ldr	r2, [pc, #408]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	4b64      	ldr	r3, [pc, #400]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a63      	ldr	r2, [pc, #396]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ada:	f7fe fb75 	bl	80011c8 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fb71 	bl	80011c8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0ab      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ee      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x37e>
 8002b04:	e014      	b.n	8002b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fb5f 	bl	80011c8 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fb5b 	bl	80011c8 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e095      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8081 	beq.w	8002c4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d061      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d146      	bne.n	8002bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCC_OscConfig+0x4fc>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe fb2f 	bl	80011c8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe fb2b 	bl	80011c8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e067      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d108      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	492d      	ldr	r1, [pc, #180]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a19      	ldr	r1, [r3, #32]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	4927      	ldr	r1, [pc, #156]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x4fc>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe faff 	bl	80011c8 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe fafb 	bl	80011c8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e037      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x46a>
 8002bec:	e02f      	b.n	8002c4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_RCC_OscConfig+0x4fc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fae8 	bl	80011c8 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fae4 	bl	80011c8 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e020      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x498>
 8002c1a:	e018      	b.n	8002c4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e013      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	42420060 	.word	0x42420060

08002c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0d0      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4965      	ldr	r1, [pc, #404]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d040      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d115      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e073      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4936      	ldr	r1, [pc, #216]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fa38 	bl	80011c8 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe fa34 	bl	80011c8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e053      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d210      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	4922      	ldr	r1, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4601      	mov	r1, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	fa21 f303 	lsr.w	r3, r1, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1cc>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1d0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f996 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	0800735c 	.word	0x0800735c
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b490      	push	{r4, r7}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e40:	1d3c      	adds	r4, r7, #4
 8002e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x40>
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0x46>
 8002e76:	e02d      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e7a:	623b      	str	r3, [r7, #32]
      break;
 8002e7c:	e02d      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	0c9b      	lsrs	r3, r3, #18
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c5b      	lsrs	r3, r3, #17
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eaa:	4413      	add	r3, r2
 8002eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002eb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eb6:	fb02 f203 	mul.w	r2, r2, r3
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	e004      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	623b      	str	r3, [r7, #32]
      break;
 8002ed2:	e002      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ed6:	623b      	str	r3, [r7, #32]
      break;
 8002ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eda:	6a3b      	ldr	r3, [r7, #32]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc90      	pop	{r4, r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	08007300 	.word	0x08007300
 8002eec:	08007310 	.word	0x08007310
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	007a1200 	.word	0x007a1200
 8002ef8:	003d0900 	.word	0x003d0900

08002efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	20000000 	.word	0x20000000

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f14:	f7ff fff2 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f18:	4601      	mov	r1, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4a03      	ldr	r2, [pc, #12]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	0800736c 	.word	0x0800736c

08002f38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f40:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <RCC_Delay+0x34>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <RCC_Delay+0x38>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0a5b      	lsrs	r3, r3, #9
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f54:	bf00      	nop
  }
  while (Delay --);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e5a      	subs	r2, r3, #1
 8002f5a:	60fa      	str	r2, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f9      	bne.n	8002f54 <RCC_Delay+0x1c>
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	10624dd3 	.word	0x10624dd3

08002f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d07d      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f94:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002faa:	61d3      	str	r3, [r2, #28]
 8002fac:	4b49      	ldr	r3, [pc, #292]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d118      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc8:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd4:	f7fe f8f8 	bl	80011c8 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	e008      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fdc:	f7fe f8f4 	bl	80011c8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e06d      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ffa:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d02e      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d027      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003018:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003022:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800302e:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d014      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe f8c3 	bl	80011c8 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe f8bf 	bl	80011c8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e036      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4917      	ldr	r1, [pc, #92]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003076:	4313      	orrs	r3, r2
 8003078:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	490b      	ldr	r1, [pc, #44]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4904      	ldr	r1, [pc, #16]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40007000 	.word	0x40007000
 80030dc:	42420440 	.word	0x42420440

080030e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e053      	b.n	800319a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd faf7 	bl	8000700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003128:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	ea42 0103 	orr.w	r1, r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	0c1a      	lsrs	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f002 0204 	and.w	r2, r2, #4
 8003178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e01d      	b.n	80031f0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd fe63 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f000 fbb5 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e01d      	b.n	8003246 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f815 	bl	800324e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f000 fb8a 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e01d      	b.n	80032ae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f815 	bl	80032b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 fb56 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fdb8 	bl	8003e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a10      	ldr	r2, [pc, #64]	; (8003328 <HAL_TIM_PWM_Start+0x60>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d107      	bne.n	80032fa <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b06      	cmp	r3, #6
 800330a:	d007      	beq.n	800331c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40012c00 	.word	0x40012c00

0800332c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d122      	bne.n	8003388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b02      	cmp	r3, #2
 800334e:	d11b      	bne.n	8003388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0202 	mvn.w	r2, #2
 8003358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fad3 	bl	800391a <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fac6 	bl	8003908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fad5 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0204 	mvn.w	r2, #4
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 faa9 	bl	800391a <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa9c 	bl	8003908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 faab 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d122      	bne.n	8003430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d11b      	bne.n	8003430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0208 	mvn.w	r2, #8
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2204      	movs	r2, #4
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa7f 	bl	800391a <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa72 	bl	8003908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa81 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b10      	cmp	r3, #16
 800343c:	d122      	bne.n	8003484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	d11b      	bne.n	8003484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0210 	mvn.w	r2, #16
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2208      	movs	r2, #8
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa55 	bl	800391a <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa48 	bl	8003908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fa57 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10e      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d107      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0201 	mvn.w	r2, #1
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa23 	bl	80038f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b80      	cmp	r3, #128	; 0x80
 80034bc:	d10e      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d107      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fd7c 	bl	8003fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d107      	bne.n	8003508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa1b 	bl	800393e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b20      	cmp	r3, #32
 8003514:	d10e      	bne.n	8003534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b20      	cmp	r3, #32
 8003522:	d107      	bne.n	8003534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0220 	mvn.w	r2, #32
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fd47 	bl	8003fc2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003552:	2302      	movs	r3, #2
 8003554:	e04e      	b.n	80035f4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d839      	bhi.n	80035e0 <HAL_TIM_OC_ConfigChannel+0xa4>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_TIM_OC_ConfigChannel+0x38>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035e1 	.word	0x080035e1
 800357c:	080035e1 	.word	0x080035e1
 8003580:	080035e1 	.word	0x080035e1
 8003584:	080035b7 	.word	0x080035b7
 8003588:	080035e1 	.word	0x080035e1
 800358c:	080035e1 	.word	0x080035e1
 8003590:	080035e1 	.word	0x080035e1
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035e1 	.word	0x080035e1
 800359c:	080035e1 	.word	0x080035e1
 80035a0:	080035e1 	.word	0x080035e1
 80035a4:	080035d3 	.word	0x080035d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fa30 	bl	8003a14 <TIM_OC1_SetConfig>
      break;
 80035b4:	e015      	b.n	80035e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fa8f 	bl	8003ae0 <TIM_OC2_SetConfig>
      break;
 80035c2:	e00e      	b.n	80035e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 faf2 	bl	8003bb4 <TIM_OC3_SetConfig>
      break;
 80035d0:	e007      	b.n	80035e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fb55 	bl	8003c88 <TIM_OC4_SetConfig>
      break;
 80035de:	e000      	b.n	80035e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80035e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003612:	2302      	movs	r3, #2
 8003614:	e0b4      	b.n	8003780 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b0c      	cmp	r3, #12
 800362a:	f200 809f 	bhi.w	800376c <HAL_TIM_PWM_ConfigChannel+0x170>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003669 	.word	0x08003669
 8003638:	0800376d 	.word	0x0800376d
 800363c:	0800376d 	.word	0x0800376d
 8003640:	0800376d 	.word	0x0800376d
 8003644:	080036a9 	.word	0x080036a9
 8003648:	0800376d 	.word	0x0800376d
 800364c:	0800376d 	.word	0x0800376d
 8003650:	0800376d 	.word	0x0800376d
 8003654:	080036eb 	.word	0x080036eb
 8003658:	0800376d 	.word	0x0800376d
 800365c:	0800376d 	.word	0x0800376d
 8003660:	0800376d 	.word	0x0800376d
 8003664:	0800372b 	.word	0x0800372b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f9d0 	bl	8003a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0208 	orr.w	r2, r2, #8
 8003682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0204 	bic.w	r2, r2, #4
 8003692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6999      	ldr	r1, [r3, #24]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	619a      	str	r2, [r3, #24]
      break;
 80036a6:	e062      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fa16 	bl	8003ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6999      	ldr	r1, [r3, #24]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	619a      	str	r2, [r3, #24]
      break;
 80036e8:	e041      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fa5f 	bl	8003bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0208 	orr.w	r2, r2, #8
 8003704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0204 	bic.w	r2, r2, #4
 8003714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69d9      	ldr	r1, [r3, #28]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	61da      	str	r2, [r3, #28]
      break;
 8003728:	e021      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 faa9 	bl	8003c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69d9      	ldr	r1, [r3, #28]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	021a      	lsls	r2, r3, #8
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	61da      	str	r2, [r3, #28]
      break;
 800376a:	e000      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800376c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_TIM_ConfigClockSource+0x18>
 800379c:	2302      	movs	r3, #2
 800379e:	e0a6      	b.n	80038ee <HAL_TIM_ConfigClockSource+0x166>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d067      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0x120>
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d80b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x6c>
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d073      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0x140>
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d802      	bhi.n	80037ea <HAL_TIM_ConfigClockSource+0x62>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d06f      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037e8:	e078      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d06c      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0x140>
 80037ee:	2b30      	cmp	r3, #48	; 0x30
 80037f0:	d06a      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037f2:	e073      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d00d      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0x8c>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d804      	bhi.n	8003806 <HAL_TIM_ConfigClockSource+0x7e>
 80037fc:	2b50      	cmp	r3, #80	; 0x50
 80037fe:	d033      	beq.n	8003868 <HAL_TIM_ConfigClockSource+0xe0>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d041      	beq.n	8003888 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003804:	e06a      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380a:	d066      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x152>
 800380c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003810:	d017      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003812:	e063      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6899      	ldr	r1, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f000 faf5 	bl	8003e12 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003836:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	609a      	str	r2, [r3, #8]
      break;
 8003840:	e04c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f000 fade 	bl	8003e12 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003864:	609a      	str	r2, [r3, #8]
      break;
 8003866:	e039      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	461a      	mov	r2, r3
 8003876:	f000 fa55 	bl	8003d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2150      	movs	r1, #80	; 0x50
 8003880:	4618      	mov	r0, r3
 8003882:	f000 faac 	bl	8003dde <TIM_ITRx_SetConfig>
      break;
 8003886:	e029      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	461a      	mov	r2, r3
 8003896:	f000 fa73 	bl	8003d80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2160      	movs	r1, #96	; 0x60
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fa9c 	bl	8003dde <TIM_ITRx_SetConfig>
      break;
 80038a6:	e019      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	461a      	mov	r2, r3
 80038b6:	f000 fa35 	bl	8003d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2140      	movs	r1, #64	; 0x40
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fa8c 	bl	8003dde <TIM_ITRx_SetConfig>
      break;
 80038c6:	e009      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f000 fa83 	bl	8003dde <TIM_ITRx_SetConfig>
      break;
 80038d8:	e000      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80038da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr

08003950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a29      	ldr	r2, [pc, #164]	; (8003a08 <TIM_Base_SetConfig+0xb8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x30>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x30>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <TIM_Base_SetConfig+0xbc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x30>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <TIM_Base_SetConfig+0xc0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <TIM_Base_SetConfig+0xb8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00b      	beq.n	80039b2 <TIM_Base_SetConfig+0x62>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d007      	beq.n	80039b2 <TIM_Base_SetConfig+0x62>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <TIM_Base_SetConfig+0xbc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d003      	beq.n	80039b2 <TIM_Base_SetConfig+0x62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <TIM_Base_SetConfig+0xc0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d108      	bne.n	80039c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <TIM_Base_SetConfig+0xb8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d103      	bne.n	80039f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	615a      	str	r2, [r3, #20]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800

08003a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f023 0302 	bic.w	r3, r3, #2
 8003a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <TIM_OC1_SetConfig+0xc8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10c      	bne.n	8003a8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0308 	bic.w	r3, r3, #8
 8003a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a13      	ldr	r2, [pc, #76]	; (8003adc <TIM_OC1_SetConfig+0xc8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d111      	bne.n	8003ab6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	621a      	str	r2, [r3, #32]
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40012c00 	.word	0x40012c00

08003ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f023 0210 	bic.w	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0320 	bic.w	r3, r3, #32
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <TIM_OC2_SetConfig+0xd0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d10d      	bne.n	8003b5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <TIM_OC2_SetConfig+0xd0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d113      	bne.n	8003b8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00

08003bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <TIM_OC3_SetConfig+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10d      	bne.n	8003c2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <TIM_OC3_SetConfig+0xd0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d113      	bne.n	8003c5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	621a      	str	r2, [r3, #32]
}
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00

08003c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	031b      	lsls	r3, r3, #12
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <TIM_OC4_SetConfig+0x98>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d109      	bne.n	8003cfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	40012c00 	.word	0x40012c00

08003d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f023 030a 	bic.w	r3, r3, #10
 8003d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f023 0210 	bic.w	r2, r3, #16
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003daa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	031b      	lsls	r3, r3, #12
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	621a      	str	r2, [r3, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr

08003dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f043 0307 	orr.w	r3, r3, #7
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b087      	sub	sp, #28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	021a      	lsls	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	609a      	str	r2, [r3, #8]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2201      	movs	r2, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a1a      	ldr	r2, [r3, #32]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	401a      	ands	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1a      	ldr	r2, [r3, #32]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e032      	b.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e03d      	b.n	8003fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	f107 0014 	add.w	r0, r7, #20
 8003ff4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	b004      	add	sp, #16
 8004004:	4770      	bx	lr

08004006 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800400e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004012:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800401a:	b29a      	uxth	r2, r3
 800401c:	89fb      	ldrh	r3, [r7, #14]
 800401e:	4313      	orrs	r3, r2
 8004020:	b29a      	uxth	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800403c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004040:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004048:	b29b      	uxth	r3, r3
 800404a:	b21a      	sxth	r2, r3
 800404c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004050:	43db      	mvns	r3, r3
 8004052:	b21b      	sxth	r3, r3
 8004054:	4013      	ands	r3, r2
 8004056:	b21b      	sxth	r3, r3
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004084:	b084      	sub	sp, #16
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	f107 0014 	add.w	r0, r7, #20
 8004092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ffa5 	bl	8004006 <USB_EnableGlobalInt>

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c8:	b004      	add	sp, #16
 80040ca:	4770      	bx	lr

080040cc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040cc:	b490      	push	{r4, r7}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	78db      	ldrb	r3, [r3, #3]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d819      	bhi.n	800412e <USB_ActivateEndpoint+0x62>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <USB_ActivateEndpoint+0x34>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004111 	.word	0x08004111
 8004104:	08004125 	.word	0x08004125
 8004108:	08004135 	.word	0x08004135
 800410c:	0800411b 	.word	0x0800411b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004110:	89bb      	ldrh	r3, [r7, #12]
 8004112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004116:	81bb      	strh	r3, [r7, #12]
      break;
 8004118:	e00d      	b.n	8004136 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800411a:	89bb      	ldrh	r3, [r7, #12]
 800411c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004120:	81bb      	strh	r3, [r7, #12]
      break;
 8004122:	e008      	b.n	8004136 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004124:	89bb      	ldrh	r3, [r7, #12]
 8004126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800412a:	81bb      	strh	r3, [r7, #12]
      break;
 800412c:	e003      	b.n	8004136 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      break;
 8004132:	e000      	b.n	8004136 <USB_ActivateEndpoint+0x6a>
      break;
 8004134:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	441a      	add	r2, r3
 8004140:	89bb      	ldrh	r3, [r7, #12]
 8004142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004152:	b29b      	uxth	r3, r3
 8004154:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	b29a      	uxth	r2, r3
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	4313      	orrs	r3, r2
 8004176:	b29c      	uxth	r4, r3
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	441a      	add	r2, r3
 8004182:	4b8a      	ldr	r3, [pc, #552]	; (80043ac <USB_ActivateEndpoint+0x2e0>)
 8004184:	4323      	orrs	r3, r4
 8004186:	b29b      	uxth	r3, r3
 8004188:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	7b1b      	ldrb	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 8112 	bne.w	80043b8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d067      	beq.n	800426c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800419c:	687c      	ldr	r4, [r7, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	441c      	add	r4, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	4423      	add	r3, r4
 80041b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b4:	461c      	mov	r4, r3
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	88db      	ldrh	r3, [r3, #6]
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29c      	uxth	r4, r3
 80041d2:	4623      	mov	r3, r4
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d014      	beq.n	8004206 <USB_ActivateEndpoint+0x13a>
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	b29c      	uxth	r4, r3
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	4b6c      	ldr	r3, [pc, #432]	; (80043b0 <USB_ActivateEndpoint+0x2e4>)
 8004200:	4323      	orrs	r3, r4
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d018      	beq.n	8004240 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004224:	b29c      	uxth	r4, r3
 8004226:	f084 0320 	eor.w	r3, r4, #32
 800422a:	b29c      	uxth	r4, r3
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <USB_ActivateEndpoint+0x2e0>)
 8004238:	4323      	orrs	r3, r4
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
 800423e:	e22b      	b.n	8004698 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004256:	b29c      	uxth	r4, r3
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	4b52      	ldr	r3, [pc, #328]	; (80043ac <USB_ActivateEndpoint+0x2e0>)
 8004264:	4323      	orrs	r3, r4
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
 800426a:	e215      	b.n	8004698 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800426c:	687c      	ldr	r4, [r7, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	441c      	add	r4, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4423      	add	r3, r4
 8004280:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004284:	461c      	mov	r4, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	88db      	ldrh	r3, [r3, #6]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	b29b      	uxth	r3, r3
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	b29b      	uxth	r3, r3
 8004292:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004294:	687c      	ldr	r4, [r7, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429c:	b29b      	uxth	r3, r3
 800429e:	441c      	add	r4, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	4423      	add	r3, r4
 80042a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042ac:	461c      	mov	r4, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10e      	bne.n	80042d4 <USB_ActivateEndpoint+0x208>
 80042b6:	8823      	ldrh	r3, [r4, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8023      	strh	r3, [r4, #0]
 80042c2:	8823      	ldrh	r3, [r4, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8023      	strh	r3, [r4, #0]
 80042d2:	e02d      	b.n	8004330 <USB_ActivateEndpoint+0x264>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b3e      	cmp	r3, #62	; 0x3e
 80042da:	d812      	bhi.n	8004302 <USB_ActivateEndpoint+0x236>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <USB_ActivateEndpoint+0x22a>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	029b      	lsls	r3, r3, #10
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8023      	strh	r3, [r4, #0]
 8004300:	e016      	b.n	8004330 <USB_ActivateEndpoint+0x264>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <USB_ActivateEndpoint+0x250>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	3b01      	subs	r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	b29b      	uxth	r3, r3
 8004320:	029b      	lsls	r3, r3, #10
 8004322:	b29b      	uxth	r3, r3
 8004324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432c:	b29b      	uxth	r3, r3
 800432e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29c      	uxth	r4, r3
 800433e:	4623      	mov	r3, r4
 8004340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d014      	beq.n	8004372 <USB_ActivateEndpoint+0x2a6>
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	b29c      	uxth	r4, r3
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	441a      	add	r2, r3
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <USB_ActivateEndpoint+0x2e8>)
 800436c:	4323      	orrs	r3, r4
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004388:	b29c      	uxth	r4, r3
 800438a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800438e:	b29c      	uxth	r4, r3
 8004390:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004394:	b29c      	uxth	r4, r3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	441a      	add	r2, r3
 80043a0:	4b02      	ldr	r3, [pc, #8]	; (80043ac <USB_ActivateEndpoint+0x2e0>)
 80043a2:	4323      	orrs	r3, r4
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8013      	strh	r3, [r2, #0]
 80043a8:	e176      	b.n	8004698 <USB_ActivateEndpoint+0x5cc>
 80043aa:	bf00      	nop
 80043ac:	ffff8080 	.word	0xffff8080
 80043b0:	ffff80c0 	.word	0xffff80c0
 80043b4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	b29c      	uxth	r4, r3
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	4b96      	ldr	r3, [pc, #600]	; (8004634 <USB_ActivateEndpoint+0x568>)
 80043dc:	4323      	orrs	r3, r4
 80043de:	b29b      	uxth	r3, r3
 80043e0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80043e2:	687c      	ldr	r4, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	441c      	add	r4, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4423      	add	r3, r4
 80043f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043fa:	461c      	mov	r4, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	891b      	ldrh	r3, [r3, #8]
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	b29b      	uxth	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	b29b      	uxth	r3, r3
 8004408:	8023      	strh	r3, [r4, #0]
 800440a:	687c      	ldr	r4, [r7, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	441c      	add	r4, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	4423      	add	r3, r4
 800441e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004422:	461c      	mov	r4, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	895b      	ldrh	r3, [r3, #10]
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	b29b      	uxth	r3, r3
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	b29b      	uxth	r3, r3
 8004430:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f040 8088 	bne.w	800454c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29c      	uxth	r4, r3
 800444a:	4623      	mov	r3, r4
 800444c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d014      	beq.n	800447e <USB_ActivateEndpoint+0x3b2>
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	b29c      	uxth	r4, r3
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	4b70      	ldr	r3, [pc, #448]	; (8004638 <USB_ActivateEndpoint+0x56c>)
 8004478:	4323      	orrs	r3, r4
 800447a:	b29b      	uxth	r3, r3
 800447c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29c      	uxth	r4, r3
 800448c:	4623      	mov	r3, r4
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d014      	beq.n	80044c0 <USB_ActivateEndpoint+0x3f4>
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	b29c      	uxth	r4, r3
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	4b60      	ldr	r3, [pc, #384]	; (800463c <USB_ActivateEndpoint+0x570>)
 80044ba:	4323      	orrs	r3, r4
 80044bc:	b29b      	uxth	r3, r3
 80044be:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	b29c      	uxth	r4, r3
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	4b56      	ldr	r3, [pc, #344]	; (800463c <USB_ActivateEndpoint+0x570>)
 80044e4:	4323      	orrs	r3, r4
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004500:	b29c      	uxth	r4, r3
 8004502:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004506:	b29c      	uxth	r4, r3
 8004508:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800450c:	b29c      	uxth	r4, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	441a      	add	r2, r3
 8004518:	4b49      	ldr	r3, [pc, #292]	; (8004640 <USB_ActivateEndpoint+0x574>)
 800451a:	4323      	orrs	r3, r4
 800451c:	b29b      	uxth	r3, r3
 800451e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004536:	b29c      	uxth	r4, r3
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <USB_ActivateEndpoint+0x574>)
 8004544:	4323      	orrs	r3, r4
 8004546:	b29b      	uxth	r3, r3
 8004548:	8013      	strh	r3, [r2, #0]
 800454a:	e0a5      	b.n	8004698 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29c      	uxth	r4, r3
 800455a:	4623      	mov	r3, r4
 800455c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d014      	beq.n	800458e <USB_ActivateEndpoint+0x4c2>
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	b29c      	uxth	r4, r3
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <USB_ActivateEndpoint+0x56c>)
 8004588:	4323      	orrs	r3, r4
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29c      	uxth	r4, r3
 800459c:	4623      	mov	r3, r4
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d014      	beq.n	80045d0 <USB_ActivateEndpoint+0x504>
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	b29c      	uxth	r4, r3
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	4b1c      	ldr	r3, [pc, #112]	; (800463c <USB_ActivateEndpoint+0x570>)
 80045ca:	4323      	orrs	r3, r4
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	b29c      	uxth	r4, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	4b11      	ldr	r3, [pc, #68]	; (8004638 <USB_ActivateEndpoint+0x56c>)
 80045f4:	4323      	orrs	r3, r4
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	78db      	ldrb	r3, [r3, #3]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d020      	beq.n	8004644 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004618:	b29c      	uxth	r4, r3
 800461a:	f084 0320 	eor.w	r3, r4, #32
 800461e:	b29c      	uxth	r4, r3
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <USB_ActivateEndpoint+0x574>)
 800462c:	4323      	orrs	r3, r4
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]
 8004632:	e01c      	b.n	800466e <USB_ActivateEndpoint+0x5a2>
 8004634:	ffff8180 	.word	0xffff8180
 8004638:	ffffc080 	.word	0xffffc080
 800463c:	ffff80c0 	.word	0xffff80c0
 8004640:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465a:	b29c      	uxth	r4, r3
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <USB_ActivateEndpoint+0x5d8>)
 8004668:	4323      	orrs	r3, r4
 800466a:	b29b      	uxth	r3, r3
 800466c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004684:	b29c      	uxth	r4, r3
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <USB_ActivateEndpoint+0x5d8>)
 8004692:	4323      	orrs	r3, r4
 8004694:	b29b      	uxth	r3, r3
 8004696:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc90      	pop	{r4, r7}
 80046a2:	4770      	bx	lr
 80046a4:	ffff8080 	.word	0xffff8080

080046a8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046a8:	b490      	push	{r4, r7}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	7b1b      	ldrb	r3, [r3, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d171      	bne.n	800479e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d036      	beq.n	8004730 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29c      	uxth	r4, r3
 80046d0:	4623      	mov	r3, r4
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d014      	beq.n	8004704 <USB_DeactivateEndpoint+0x5c>
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f0:	b29c      	uxth	r4, r3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	4b6b      	ldr	r3, [pc, #428]	; (80048ac <USB_DeactivateEndpoint+0x204>)
 80046fe:	4323      	orrs	r3, r4
 8004700:	b29b      	uxth	r3, r3
 8004702:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471a:	b29c      	uxth	r4, r3
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	441a      	add	r2, r3
 8004726:	4b62      	ldr	r3, [pc, #392]	; (80048b0 <USB_DeactivateEndpoint+0x208>)
 8004728:	4323      	orrs	r3, r4
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
 800472e:	e144      	b.n	80049ba <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29c      	uxth	r4, r3
 800473e:	4623      	mov	r3, r4
 8004740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d014      	beq.n	8004772 <USB_DeactivateEndpoint+0xca>
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	b29c      	uxth	r4, r3
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	4b52      	ldr	r3, [pc, #328]	; (80048b4 <USB_DeactivateEndpoint+0x20c>)
 800476c:	4323      	orrs	r3, r4
 800476e:	b29b      	uxth	r3, r3
 8004770:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	b29c      	uxth	r4, r3
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <USB_DeactivateEndpoint+0x208>)
 8004796:	4323      	orrs	r3, r4
 8004798:	b29b      	uxth	r3, r3
 800479a:	8013      	strh	r3, [r2, #0]
 800479c:	e10d      	b.n	80049ba <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 8088 	bne.w	80048b8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29c      	uxth	r4, r3
 80047b6:	4623      	mov	r3, r4
 80047b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d014      	beq.n	80047ea <USB_DeactivateEndpoint+0x142>
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	b29c      	uxth	r4, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <USB_DeactivateEndpoint+0x20c>)
 80047e4:	4323      	orrs	r3, r4
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29c      	uxth	r4, r3
 80047f8:	4623      	mov	r3, r4
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d014      	beq.n	800482c <USB_DeactivateEndpoint+0x184>
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004818:	b29c      	uxth	r4, r3
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	441a      	add	r2, r3
 8004824:	4b21      	ldr	r3, [pc, #132]	; (80048ac <USB_DeactivateEndpoint+0x204>)
 8004826:	4323      	orrs	r3, r4
 8004828:	b29b      	uxth	r3, r3
 800482a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	b29c      	uxth	r4, r3
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	441a      	add	r2, r3
 800484e:	4b17      	ldr	r3, [pc, #92]	; (80048ac <USB_DeactivateEndpoint+0x204>)
 8004850:	4323      	orrs	r3, r4
 8004852:	b29b      	uxth	r3, r3
 8004854:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	b29c      	uxth	r4, r3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <USB_DeactivateEndpoint+0x208>)
 800487a:	4323      	orrs	r3, r4
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004896:	b29c      	uxth	r4, r3
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <USB_DeactivateEndpoint+0x208>)
 80048a4:	4323      	orrs	r3, r4
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
 80048aa:	e086      	b.n	80049ba <USB_DeactivateEndpoint+0x312>
 80048ac:	ffff80c0 	.word	0xffff80c0
 80048b0:	ffff8080 	.word	0xffff8080
 80048b4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29c      	uxth	r4, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d014      	beq.n	80048fa <USB_DeactivateEndpoint+0x252>
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	b29c      	uxth	r4, r3
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	441a      	add	r2, r3
 80048f2:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <USB_DeactivateEndpoint+0x320>)
 80048f4:	4323      	orrs	r3, r4
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29c      	uxth	r4, r3
 8004908:	4623      	mov	r3, r4
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d014      	beq.n	800493c <USB_DeactivateEndpoint+0x294>
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004928:	b29c      	uxth	r4, r3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	441a      	add	r2, r3
 8004934:	4b25      	ldr	r3, [pc, #148]	; (80049cc <USB_DeactivateEndpoint+0x324>)
 8004936:	4323      	orrs	r3, r4
 8004938:	b29b      	uxth	r3, r3
 800493a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	b29c      	uxth	r4, r3
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <USB_DeactivateEndpoint+0x320>)
 8004960:	4323      	orrs	r3, r4
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497c:	b29c      	uxth	r4, r3
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <USB_DeactivateEndpoint+0x328>)
 800498a:	4323      	orrs	r3, r4
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	b29c      	uxth	r4, r3
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <USB_DeactivateEndpoint+0x328>)
 80049b4:	4323      	orrs	r3, r4
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc90      	pop	{r4, r7}
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	ffffc080 	.word	0xffffc080
 80049cc:	ffff80c0 	.word	0xffff80c0
 80049d0:	ffff8080 	.word	0xffff8080

080049d4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b08d      	sub	sp, #52	; 0x34
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	785b      	ldrb	r3, [r3, #1]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	f040 8160 	bne.w	8004ca8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	699a      	ldr	r2, [r3, #24]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d909      	bls.n	8004a08 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	1ad2      	subs	r2, r2, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	619a      	str	r2, [r3, #24]
 8004a06:	e005      	b.n	8004a14 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2200      	movs	r2, #0
 8004a12:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	7b1b      	ldrb	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d119      	bne.n	8004a50 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6959      	ldr	r1, [r3, #20]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	88da      	ldrh	r2, [r3, #6]
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fba2 	bl	8005172 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a2e:	687c      	ldr	r4, [r7, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	441c      	add	r4, r3
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	4423      	add	r3, r4
 8004a42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a46:	461c      	mov	r4, r3
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8023      	strh	r3, [r4, #0]
 8004a4e:	e10f      	b.n	8004c70 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d065      	beq.n	8004b32 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a66:	687c      	ldr	r4, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d148      	bne.n	8004b02 <USB_EPStartXfer+0x12e>
 8004a70:	687c      	ldr	r4, [r7, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	441c      	add	r4, r3
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	4423      	add	r3, r4
 8004a84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a88:	461c      	mov	r4, r3
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10e      	bne.n	8004aae <USB_EPStartXfer+0xda>
 8004a90:	8823      	ldrh	r3, [r4, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8023      	strh	r3, [r4, #0]
 8004a9c:	8823      	ldrh	r3, [r4, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8023      	strh	r3, [r4, #0]
 8004aac:	e03d      	b.n	8004b2a <USB_EPStartXfer+0x156>
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ab2:	d810      	bhi.n	8004ad6 <USB_EPStartXfer+0x102>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <USB_EPStartXfer+0xf6>
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	029b      	lsls	r3, r3, #10
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8023      	strh	r3, [r4, #0]
 8004ad4:	e029      	b.n	8004b2a <USB_EPStartXfer+0x156>
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <USB_EPStartXfer+0x118>
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	029b      	lsls	r3, r3, #10
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8023      	strh	r3, [r4, #0]
 8004b00:	e013      	b.n	8004b2a <USB_EPStartXfer+0x156>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d10f      	bne.n	8004b2a <USB_EPStartXfer+0x156>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	441c      	add	r4, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	4423      	add	r3, r4
 8004b1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	895b      	ldrh	r3, [r3, #10]
 8004b2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b30:	e063      	b.n	8004bfa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d148      	bne.n	8004bcc <USB_EPStartXfer+0x1f8>
 8004b3a:	687c      	ldr	r4, [r7, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	441c      	add	r4, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	4423      	add	r3, r4
 8004b4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b52:	461c      	mov	r4, r3
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10e      	bne.n	8004b78 <USB_EPStartXfer+0x1a4>
 8004b5a:	8823      	ldrh	r3, [r4, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	8023      	strh	r3, [r4, #0]
 8004b66:	8823      	ldrh	r3, [r4, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8023      	strh	r3, [r4, #0]
 8004b76:	e03d      	b.n	8004bf4 <USB_EPStartXfer+0x220>
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b7c:	d810      	bhi.n	8004ba0 <USB_EPStartXfer+0x1cc>
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	085b      	lsrs	r3, r3, #1
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <USB_EPStartXfer+0x1c0>
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	3301      	adds	r3, #1
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	8023      	strh	r3, [r4, #0]
 8004b9e:	e029      	b.n	8004bf4 <USB_EPStartXfer+0x220>
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <USB_EPStartXfer+0x1e2>
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8023      	strh	r3, [r4, #0]
 8004bca:	e013      	b.n	8004bf4 <USB_EPStartXfer+0x220>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	785b      	ldrb	r3, [r3, #1]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d10f      	bne.n	8004bf4 <USB_EPStartXfer+0x220>
 8004bd4:	687c      	ldr	r4, [r7, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	441c      	add	r4, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	4423      	add	r3, r4
 8004be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bec:	461c      	mov	r4, r3
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	891b      	ldrh	r3, [r3, #8]
 8004bf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6959      	ldr	r1, [r3, #20]
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fab4 	bl	8005172 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d115      	bne.n	8004c3e <USB_EPStartXfer+0x26a>
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c28:	b29c      	uxth	r4, r3
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	4b9a      	ldr	r3, [pc, #616]	; (8004ea0 <USB_EPStartXfer+0x4cc>)
 8004c36:	4323      	orrs	r3, r4
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]
 8004c3c:	e018      	b.n	8004c70 <USB_EPStartXfer+0x29c>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d114      	bne.n	8004c70 <USB_EPStartXfer+0x29c>
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5c:	b29c      	uxth	r4, r3
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	4b8e      	ldr	r3, [pc, #568]	; (8004ea4 <USB_EPStartXfer+0x4d0>)
 8004c6a:	4323      	orrs	r3, r4
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c86:	b29c      	uxth	r4, r3
 8004c88:	f084 0310 	eor.w	r3, r4, #16
 8004c8c:	b29c      	uxth	r4, r3
 8004c8e:	f084 0320 	eor.w	r3, r4, #32
 8004c92:	b29c      	uxth	r4, r3
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	4b82      	ldr	r3, [pc, #520]	; (8004ea8 <USB_EPStartXfer+0x4d4>)
 8004ca0:	4323      	orrs	r3, r4
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]
 8004ca6:	e146      	b.n	8004f36 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	699a      	ldr	r2, [r3, #24]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d909      	bls.n	8004cc8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	1ad2      	subs	r2, r2, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	619a      	str	r2, [r3, #24]
 8004cc6:	e005      	b.n	8004cd4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	7b1b      	ldrb	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d148      	bne.n	8004d6e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004cdc:	687c      	ldr	r4, [r7, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	441c      	add	r4, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	4423      	add	r3, r4
 8004cf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cf4:	461c      	mov	r4, r3
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10e      	bne.n	8004d1a <USB_EPStartXfer+0x346>
 8004cfc:	8823      	ldrh	r3, [r4, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8023      	strh	r3, [r4, #0]
 8004d08:	8823      	ldrh	r3, [r4, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	8023      	strh	r3, [r4, #0]
 8004d18:	e0f2      	b.n	8004f00 <USB_EPStartXfer+0x52c>
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d1e:	d810      	bhi.n	8004d42 <USB_EPStartXfer+0x36e>
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <USB_EPStartXfer+0x362>
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	3301      	adds	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	029b      	lsls	r3, r3, #10
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	8023      	strh	r3, [r4, #0]
 8004d40:	e0de      	b.n	8004f00 <USB_EPStartXfer+0x52c>
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <USB_EPStartXfer+0x384>
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	029b      	lsls	r3, r3, #10
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8023      	strh	r3, [r4, #0]
 8004d6c:	e0c8      	b.n	8004f00 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d148      	bne.n	8004e08 <USB_EPStartXfer+0x434>
 8004d76:	687c      	ldr	r4, [r7, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	441c      	add	r4, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	4423      	add	r3, r4
 8004d8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d8e:	461c      	mov	r4, r3
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10e      	bne.n	8004db4 <USB_EPStartXfer+0x3e0>
 8004d96:	8823      	ldrh	r3, [r4, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8023      	strh	r3, [r4, #0]
 8004da2:	8823      	ldrh	r3, [r4, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8023      	strh	r3, [r4, #0]
 8004db2:	e03d      	b.n	8004e30 <USB_EPStartXfer+0x45c>
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	2b3e      	cmp	r3, #62	; 0x3e
 8004db8:	d810      	bhi.n	8004ddc <USB_EPStartXfer+0x408>
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <USB_EPStartXfer+0x3fc>
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	029b      	lsls	r3, r3, #10
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8023      	strh	r3, [r4, #0]
 8004dda:	e029      	b.n	8004e30 <USB_EPStartXfer+0x45c>
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <USB_EPStartXfer+0x41e>
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	029b      	lsls	r3, r3, #10
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8023      	strh	r3, [r4, #0]
 8004e06:	e013      	b.n	8004e30 <USB_EPStartXfer+0x45c>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10f      	bne.n	8004e30 <USB_EPStartXfer+0x45c>
 8004e10:	687c      	ldr	r4, [r7, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	441c      	add	r4, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	4423      	add	r3, r4
 8004e24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e28:	461c      	mov	r4, r3
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8023      	strh	r3, [r4, #0]
 8004e30:	687c      	ldr	r4, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d14e      	bne.n	8004ed8 <USB_EPStartXfer+0x504>
 8004e3a:	687c      	ldr	r4, [r7, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	441c      	add	r4, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	4423      	add	r3, r4
 8004e4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e52:	461c      	mov	r4, r3
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10e      	bne.n	8004e78 <USB_EPStartXfer+0x4a4>
 8004e5a:	8823      	ldrh	r3, [r4, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8023      	strh	r3, [r4, #0]
 8004e66:	8823      	ldrh	r3, [r4, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8023      	strh	r3, [r4, #0]
 8004e76:	e043      	b.n	8004f00 <USB_EPStartXfer+0x52c>
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e7c:	d816      	bhi.n	8004eac <USB_EPStartXfer+0x4d8>
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <USB_EPStartXfer+0x4c0>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3301      	adds	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	029b      	lsls	r3, r3, #10
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8023      	strh	r3, [r4, #0]
 8004e9e:	e02f      	b.n	8004f00 <USB_EPStartXfer+0x52c>
 8004ea0:	ffff80c0 	.word	0xffff80c0
 8004ea4:	ffffc080 	.word	0xffffc080
 8004ea8:	ffff8080 	.word	0xffff8080
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <USB_EPStartXfer+0x4ee>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	029b      	lsls	r3, r3, #10
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8023      	strh	r3, [r4, #0]
 8004ed6:	e013      	b.n	8004f00 <USB_EPStartXfer+0x52c>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d10f      	bne.n	8004f00 <USB_EPStartXfer+0x52c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	441c      	add	r4, r3
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	4423      	add	r3, r4
 8004ef2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	b29c      	uxth	r4, r3
 8004f18:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f1c:	b29c      	uxth	r4, r3
 8004f1e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f22:	b29c      	uxth	r4, r3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <USB_EPStartXfer+0x56c>)
 8004f30:	4323      	orrs	r3, r4
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3734      	adds	r7, #52	; 0x34
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd90      	pop	{r4, r7, pc}
 8004f40:	ffff8080 	.word	0xffff8080

08004f44 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f44:	b490      	push	{r4, r7}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6c:	b29c      	uxth	r4, r3
 8004f6e:	f084 0310 	eor.w	r3, r4, #16
 8004f72:	b29c      	uxth	r4, r3
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <USB_EPSetStall+0x80>)
 8004f80:	4323      	orrs	r3, r4
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	8013      	strh	r3, [r2, #0]
 8004f86:	e017      	b.n	8004fb8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	b29c      	uxth	r4, r3
 8004fa0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004fa4:	b29c      	uxth	r4, r3
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	441a      	add	r2, r3
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <USB_EPSetStall+0x80>)
 8004fb2:	4323      	orrs	r3, r4
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc90      	pop	{r4, r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	ffff8080 	.word	0xffff8080

08004fc8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fc8:	b490      	push	{r4, r7}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	7b1b      	ldrb	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d17d      	bne.n	80050d6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d03d      	beq.n	800505e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29c      	uxth	r4, r3
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d014      	beq.n	8005024 <USB_EPClearStall+0x5c>
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	b29c      	uxth	r4, r3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <USB_EPClearStall+0x11c>)
 800501e:	4323      	orrs	r3, r4
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	78db      	ldrb	r3, [r3, #3]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d054      	beq.n	80050d6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005042:	b29c      	uxth	r4, r3
 8005044:	f084 0320 	eor.w	r3, r4, #32
 8005048:	b29c      	uxth	r4, r3
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <USB_EPClearStall+0x120>)
 8005056:	4323      	orrs	r3, r4
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]
 800505c:	e03b      	b.n	80050d6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29c      	uxth	r4, r3
 800506c:	4623      	mov	r3, r4
 800506e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d014      	beq.n	80050a0 <USB_EPClearStall+0xd8>
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508c:	b29c      	uxth	r4, r3
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	4b14      	ldr	r3, [pc, #80]	; (80050ec <USB_EPClearStall+0x124>)
 800509a:	4323      	orrs	r3, r4
 800509c:	b29b      	uxth	r3, r3
 800509e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	b29c      	uxth	r4, r3
 80050b8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80050bc:	b29c      	uxth	r4, r3
 80050be:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80050c2:	b29c      	uxth	r4, r3
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	441a      	add	r2, r3
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <USB_EPClearStall+0x120>)
 80050d0:	4323      	orrs	r3, r4
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc90      	pop	{r4, r7}
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	ffff80c0 	.word	0xffff80c0
 80050e8:	ffff8080 	.word	0xffff8080
 80050ec:	ffffc080 	.word	0xffffc080

080050f0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800514c:	b29b      	uxth	r3, r3
 800514e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005172:	b480      	push	{r7}
 8005174:	b08d      	sub	sp, #52	; 0x34
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	4611      	mov	r1, r2
 800517e:	461a      	mov	r2, r3
 8005180:	460b      	mov	r3, r1
 8005182:	80fb      	strh	r3, [r7, #6]
 8005184:	4613      	mov	r3, r2
 8005186:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005188:	88bb      	ldrh	r3, [r7, #4]
 800518a:	3301      	adds	r3, #1
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	005a      	lsls	r2, r3, #1
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051aa:	e01e      	b.n	80051ea <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	3301      	adds	r3, #1
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	3302      	adds	r3, #2
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	3302      	adds	r3, #2
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	3301      	adds	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	3b01      	subs	r3, #1
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1dd      	bne.n	80051ac <USB_WritePMA+0x3a>
  }
}
 80051f0:	bf00      	nop
 80051f2:	3734      	adds	r7, #52	; 0x34
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b08b      	sub	sp, #44	; 0x2c
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	4611      	mov	r1, r2
 8005206:	461a      	mov	r2, r3
 8005208:	460b      	mov	r3, r1
 800520a:	80fb      	strh	r3, [r7, #6]
 800520c:	4613      	mov	r3, r2
 800520e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005210:	88bb      	ldrh	r3, [r7, #4]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	b29b      	uxth	r3, r3
 8005216:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	005a      	lsls	r2, r3, #1
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800522c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	e01b      	b.n	800526c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	3302      	adds	r3, #2
 8005240:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3301      	adds	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	0a1b      	lsrs	r3, r3, #8
 8005254:	b2da      	uxtb	r2, r3
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	3302      	adds	r3, #2
 8005264:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	3b01      	subs	r3, #1
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e0      	bne.n	8005234 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005272:	88bb      	ldrh	r3, [r7, #4]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	701a      	strb	r2, [r3, #0]
  }
}
 800528e:	bf00      	nop
 8005290:	372c      	adds	r7, #44	; 0x2c
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7c1b      	ldrb	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d115      	bne.n	80052dc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052b4:	2202      	movs	r2, #2
 80052b6:	2181      	movs	r1, #129	; 0x81
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 fe6c 	bl	8006f96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c8:	2202      	movs	r2, #2
 80052ca:	2101      	movs	r1, #1
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fe62 	bl	8006f96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80052da:	e012      	b.n	8005302 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052dc:	2340      	movs	r3, #64	; 0x40
 80052de:	2202      	movs	r2, #2
 80052e0:	2181      	movs	r1, #129	; 0x81
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 fe57 	bl	8006f96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052ee:	2340      	movs	r3, #64	; 0x40
 80052f0:	2202      	movs	r2, #2
 80052f2:	2101      	movs	r1, #1
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f001 fe4e 	bl	8006f96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005302:	2308      	movs	r3, #8
 8005304:	2203      	movs	r2, #3
 8005306:	2182      	movs	r1, #130	; 0x82
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f001 fe44 	bl	8006f96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005314:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005318:	f001 ff5e 	bl	80071d8 <USBD_static_malloc>
 800531c:	4602      	mov	r2, r0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
 8005332:	e026      	b.n	8005382 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800533a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	7c1b      	ldrb	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005368:	2101      	movs	r1, #1
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 fefd 	bl	800716a <USBD_LL_PrepareReceive>
 8005370:	e007      	b.n	8005382 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005378:	2340      	movs	r3, #64	; 0x40
 800537a:	2101      	movs	r1, #1
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 fef4 	bl	800716a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800539c:	2181      	movs	r1, #129	; 0x81
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f001 fe1f 	bl	8006fe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80053aa:	2101      	movs	r1, #1
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 fe18 	bl	8006fe2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053ba:	2182      	movs	r1, #130	; 0x82
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 fe10 	bl	8006fe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00e      	beq.n	80053f0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 ff04 	bl	80071f0 <USBD_static_free>
    pdev->pClassData = NULL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b086      	sub	sp, #24
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005420:	2b00      	cmp	r3, #0
 8005422:	d039      	beq.n	8005498 <USBD_CDC_Setup+0x9e>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d17c      	bne.n	8005522 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	88db      	ldrh	r3, [r3, #6]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d029      	beq.n	8005484 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b25b      	sxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	da11      	bge.n	800545e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005446:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	88d2      	ldrh	r2, [r2, #6]
 800544c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800544e:	6939      	ldr	r1, [r7, #16]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	88db      	ldrh	r3, [r3, #6]
 8005454:	461a      	mov	r2, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 f9f6 	bl	8006848 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800545c:	e068      	b.n	8005530 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	785a      	ldrb	r2, [r3, #1]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	88db      	ldrh	r3, [r3, #6]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005474:	6939      	ldr	r1, [r7, #16]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	88db      	ldrh	r3, [r3, #6]
 800547a:	461a      	mov	r2, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 fa11 	bl	80068a4 <USBD_CtlPrepareRx>
      break;
 8005482:	e055      	b.n	8005530 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	7850      	ldrb	r0, [r2, #1]
 8005490:	2200      	movs	r2, #0
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	4798      	blx	r3
      break;
 8005496:	e04b      	b.n	8005530 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b0a      	cmp	r3, #10
 800549e:	d017      	beq.n	80054d0 <USBD_CDC_Setup+0xd6>
 80054a0:	2b0b      	cmp	r3, #11
 80054a2:	d029      	beq.n	80054f8 <USBD_CDC_Setup+0xfe>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d133      	bne.n	8005510 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d107      	bne.n	80054c2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80054b2:	f107 030c 	add.w	r3, r7, #12
 80054b6:	2202      	movs	r2, #2
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 f9c4 	bl	8006848 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054c0:	e02e      	b.n	8005520 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f955 	bl	8006774 <USBD_CtlError>
            ret = USBD_FAIL;
 80054ca:	2302      	movs	r3, #2
 80054cc:	75fb      	strb	r3, [r7, #23]
          break;
 80054ce:	e027      	b.n	8005520 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d107      	bne.n	80054ea <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80054da:	f107 030f 	add.w	r3, r7, #15
 80054de:	2201      	movs	r2, #1
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 f9b0 	bl	8006848 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054e8:	e01a      	b.n	8005520 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f001 f941 	bl	8006774 <USBD_CtlError>
            ret = USBD_FAIL;
 80054f2:	2302      	movs	r3, #2
 80054f4:	75fb      	strb	r3, [r7, #23]
          break;
 80054f6:	e013      	b.n	8005520 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d00d      	beq.n	800551e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 f935 	bl	8006774 <USBD_CtlError>
            ret = USBD_FAIL;
 800550a:	2302      	movs	r3, #2
 800550c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800550e:	e006      	b.n	800551e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 f92e 	bl	8006774 <USBD_CtlError>
          ret = USBD_FAIL;
 8005518:	2302      	movs	r3, #2
 800551a:	75fb      	strb	r3, [r7, #23]
          break;
 800551c:	e000      	b.n	8005520 <USBD_CDC_Setup+0x126>
          break;
 800551e:	bf00      	nop
      }
      break;
 8005520:	e006      	b.n	8005530 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 f925 	bl	8006774 <USBD_CtlError>
      ret = USBD_FAIL;
 800552a:	2302      	movs	r3, #2
 800552c:	75fb      	strb	r3, [r7, #23]
      break;
 800552e:	bf00      	nop
  }

  return ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005554:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d037      	beq.n	80055d0 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	331c      	adds	r3, #28
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d026      	beq.n	80055c4 <USBD_CDC_DataIn+0x8a>
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	331c      	adds	r3, #28
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	0152      	lsls	r2, r2, #5
 800558e:	440a      	add	r2, r1
 8005590:	3238      	adds	r2, #56	; 0x38
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	fbb3 f1f2 	udiv	r1, r3, r2
 8005598:	fb02 f201 	mul.w	r2, r2, r1
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d110      	bne.n	80055c4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	331c      	adds	r3, #28
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055b6:	78f9      	ldrb	r1, [r7, #3]
 80055b8:	2300      	movs	r3, #0
 80055ba:	2200      	movs	r2, #0
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 fdb1 	bl	8007124 <USBD_LL_Transmit>
 80055c2:	e003      	b.n	80055cc <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fddc 	bl	80071b0 <USBD_LL_GetRxDataSize>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800561e:	4611      	mov	r1, r2
 8005620:	4798      	blx	r3

    return USBD_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	e000      	b.n	8005628 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005626:	2302      	movs	r3, #2
  }
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005646:	2b00      	cmp	r3, #0
 8005648:	d015      	beq.n	8005676 <USBD_CDC_EP0_RxReady+0x46>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005650:	2bff      	cmp	r3, #255	; 0xff
 8005652:	d010      	beq.n	8005676 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005662:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800566a:	b292      	uxth	r2, r2
 800566c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	22ff      	movs	r2, #255	; 0xff
 8005672:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2243      	movs	r2, #67	; 0x43
 800568c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800568e:	4b03      	ldr	r3, [pc, #12]	; (800569c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000094 	.word	0x20000094

080056a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2243      	movs	r2, #67	; 0x43
 80056ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80056ae:	4b03      	ldr	r3, [pc, #12]	; (80056bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000050 	.word	0x20000050

080056c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2243      	movs	r2, #67	; 0x43
 80056cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80056ce:	4b03      	ldr	r3, [pc, #12]	; (80056dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	200000d8 	.word	0x200000d8

080056e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	220a      	movs	r2, #10
 80056ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80056ee:	4b03      	ldr	r3, [pc, #12]	; (80056fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	2000000c 	.word	0x2000000c

08005700 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800570a:	2302      	movs	r3, #2
 800570c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005740:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800576e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005792:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01c      	beq.n	80057d8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d115      	bne.n	80057d4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2181      	movs	r1, #129	; 0x81
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 fcaa 	bl	8007124 <USBD_LL_Transmit>

      return USBD_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e002      	b.n	80057da <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d017      	beq.n	800582c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	7c1b      	ldrb	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800580a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800580e:	2101      	movs	r1, #1
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fcaa 	bl	800716a <USBD_LL_PrepareReceive>
 8005816:	e007      	b.n	8005828 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800581e:	2340      	movs	r3, #64	; 0x40
 8005820:	2101      	movs	r1, #1
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 fca1 	bl	800716a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	e000      	b.n	800582e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800582c:	2302      	movs	r3, #2
  }
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	4613      	mov	r3, r2
 8005842:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800584a:	2302      	movs	r3, #2
 800584c:	e01a      	b.n	8005884 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	79fa      	ldrb	r2, [r7, #7]
 800587a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f001 fb15 	bl	8006eac <USBD_LL_Init>

  return USBD_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d006      	beq.n	80058ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	e001      	b.n	80058b2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80058ae:	2302      	movs	r3, #2
 80058b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fb4a 	bl	8006f60 <USBD_LL_Start>

  return USBD_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr

080058ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058f6:	2302      	movs	r3, #2
 80058f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00c      	beq.n	800591e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	4611      	mov	r1, r2
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	4611      	mov	r1, r2
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4798      	blx	r3

  return USBD_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fecb 	bl	80066fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2b01      	cmp	r3, #1
 8005988:	d00c      	beq.n	80059a4 <USBD_LL_SetupStage+0x56>
 800598a:	2b01      	cmp	r3, #1
 800598c:	d302      	bcc.n	8005994 <USBD_LL_SetupStage+0x46>
 800598e:	2b02      	cmp	r3, #2
 8005990:	d010      	beq.n	80059b4 <USBD_LL_SetupStage+0x66>
 8005992:	e017      	b.n	80059c4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f9cb 	bl	8005d38 <USBD_StdDevReq>
      break;
 80059a2:	e01a      	b.n	80059da <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fa2d 	bl	8005e0c <USBD_StdItfReq>
      break;
 80059b2:	e012      	b.n	80059da <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fa6b 	bl	8005e98 <USBD_StdEPReq>
      break;
 80059c2:	e00a      	b.n	80059da <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 fb24 	bl	8007020 <USBD_LL_StallEP>
      break;
 80059d8:	bf00      	nop
  }

  return USBD_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	460b      	mov	r3, r1
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059f2:	7afb      	ldrb	r3, [r7, #11]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d14b      	bne.n	8005a90 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d134      	bne.n	8005a74 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d919      	bls.n	8005a4a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d203      	bcs.n	8005a38 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	e002      	b.n	8005a3e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 ff4c 	bl	80068e0 <USBD_CtlContinueRx>
 8005a48:	e038      	b.n	8005abc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d105      	bne.n	8005a6c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 ff49 	bl	8006904 <USBD_CtlSendStatus>
 8005a72:	e023      	b.n	8005abc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	d11e      	bne.n	8005abc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005a86:	2100      	movs	r1, #0
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f001 fac9 	bl	8007020 <USBD_LL_StallEP>
 8005a8e:	e015      	b.n	8005abc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00d      	beq.n	8005ab8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d108      	bne.n	8005ab8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	7afa      	ldrb	r2, [r7, #11]
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	4798      	blx	r3
 8005ab6:	e001      	b.n	8005abc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e000      	b.n	8005abe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d17f      	bne.n	8005bda <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3314      	adds	r3, #20
 8005ade:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d15c      	bne.n	8005ba4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d915      	bls.n	8005b22 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 feb6 	bl	8006880 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b14:	2300      	movs	r3, #0
 8005b16:	2200      	movs	r2, #0
 8005b18:	2100      	movs	r1, #0
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f001 fb25 	bl	800716a <USBD_LL_PrepareReceive>
 8005b20:	e04e      	b.n	8005bc0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	6912      	ldr	r2, [r2, #16]
 8005b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b2e:	fb02 f201 	mul.w	r2, r2, r1
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d11c      	bne.n	8005b72 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d316      	bcc.n	8005b72 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d20f      	bcs.n	8005b72 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fe92 	bl	8006880 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b64:	2300      	movs	r3, #0
 8005b66:	2200      	movs	r2, #0
 8005b68:	2100      	movs	r1, #0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f001 fafd 	bl	800716a <USBD_LL_PrepareReceive>
 8005b70:	e026      	b.n	8005bc0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d105      	bne.n	8005b94 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005b94:	2180      	movs	r1, #128	; 0x80
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f001 fa42 	bl	8007020 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fec4 	bl	800692a <USBD_CtlReceiveStatus>
 8005ba2:	e00d      	b.n	8005bc0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d004      	beq.n	8005bb8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d103      	bne.n	8005bc0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005bb8:	2180      	movs	r1, #128	; 0x80
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f001 fa30 	bl	8007020 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d11d      	bne.n	8005c06 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff fe83 	bl	80058d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bd8:	e015      	b.n	8005c06 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d108      	bne.n	8005c02 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	7afa      	ldrb	r2, [r7, #11]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	4798      	blx	r3
 8005c00:	e001      	b.n	8005c06 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c02:	2302      	movs	r3, #2
 8005c04:	e000      	b.n	8005c08 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c18:	2340      	movs	r3, #64	; 0x40
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 f9b9 	bl	8006f96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2240      	movs	r2, #64	; 0x40
 8005c30:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c34:	2340      	movs	r3, #64	; 0x40
 8005c36:	2200      	movs	r2, #0
 8005c38:	2180      	movs	r1, #128	; 0x80
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 f9ab 	bl	8006f96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2240      	movs	r2, #64	; 0x40
 8005c4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6852      	ldr	r2, [r2, #4]
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	4611      	mov	r1, r2
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
  }

  return USBD_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d105      	bne.n	8005cf6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d10b      	bne.n	8005d2c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d004      	beq.n	8005d5c <USBD_StdDevReq+0x24>
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d002      	beq.n	8005d5c <USBD_StdDevReq+0x24>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d008      	beq.n	8005d6c <USBD_StdDevReq+0x34>
 8005d5a:	e04c      	b.n	8005df6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
      break;
 8005d6a:	e049      	b.n	8005e00 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b09      	cmp	r3, #9
 8005d72:	d83a      	bhi.n	8005dea <USBD_StdDevReq+0xb2>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <USBD_StdDevReq+0x44>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005dcd 	.word	0x08005dcd
 8005d80:	08005de1 	.word	0x08005de1
 8005d84:	08005deb 	.word	0x08005deb
 8005d88:	08005dd7 	.word	0x08005dd7
 8005d8c:	08005deb 	.word	0x08005deb
 8005d90:	08005daf 	.word	0x08005daf
 8005d94:	08005da5 	.word	0x08005da5
 8005d98:	08005deb 	.word	0x08005deb
 8005d9c:	08005dc3 	.word	0x08005dc3
 8005da0:	08005db9 	.word	0x08005db9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9d4 	bl	8006154 <USBD_GetDescriptor>
          break;
 8005dac:	e022      	b.n	8005df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fb37 	bl	8006424 <USBD_SetAddress>
          break;
 8005db6:	e01d      	b.n	8005df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fb74 	bl	80064a8 <USBD_SetConfig>
          break;
 8005dc0:	e018      	b.n	8005df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fbfd 	bl	80065c4 <USBD_GetConfig>
          break;
 8005dca:	e013      	b.n	8005df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fc2c 	bl	800662c <USBD_GetStatus>
          break;
 8005dd4:	e00e      	b.n	8005df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fc5a 	bl	8006692 <USBD_SetFeature>
          break;
 8005dde:	e009      	b.n	8005df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fc69 	bl	80066ba <USBD_ClrFeature>
          break;
 8005de8:	e004      	b.n	8005df4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fcc1 	bl	8006774 <USBD_CtlError>
          break;
 8005df2:	bf00      	nop
      }
      break;
 8005df4:	e004      	b.n	8005e00 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fcbb 	bl	8006774 <USBD_CtlError>
      break;
 8005dfe:	bf00      	nop
  }

  return ret;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop

08005e0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d003      	beq.n	8005e2e <USBD_StdItfReq+0x22>
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d001      	beq.n	8005e2e <USBD_StdItfReq+0x22>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d12a      	bne.n	8005e84 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e34:	3b01      	subs	r3, #1
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d81d      	bhi.n	8005e76 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	889b      	ldrh	r3, [r3, #4]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d813      	bhi.n	8005e6c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	88db      	ldrh	r3, [r3, #6]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d110      	bne.n	8005e80 <USBD_StdItfReq+0x74>
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10d      	bne.n	8005e80 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fd4d 	bl	8006904 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e6a:	e009      	b.n	8005e80 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fc80 	bl	8006774 <USBD_CtlError>
          break;
 8005e74:	e004      	b.n	8005e80 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fc7b 	bl	8006774 <USBD_CtlError>
          break;
 8005e7e:	e000      	b.n	8005e82 <USBD_StdItfReq+0x76>
          break;
 8005e80:	bf00      	nop
      }
      break;
 8005e82:	e004      	b.n	8005e8e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fc74 	bl	8006774 <USBD_CtlError>
      break;
 8005e8c:	bf00      	nop
  }

  return USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	889b      	ldrh	r3, [r3, #4]
 8005eaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d004      	beq.n	8005ec2 <USBD_StdEPReq+0x2a>
 8005eb8:	2b40      	cmp	r3, #64	; 0x40
 8005eba:	d002      	beq.n	8005ec2 <USBD_StdEPReq+0x2a>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <USBD_StdEPReq+0x3a>
 8005ec0:	e13d      	b.n	800613e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
      break;
 8005ed0:	e13a      	b.n	8006148 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d10a      	bne.n	8005ef4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	4798      	blx	r3
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	e12a      	b.n	800614a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d03e      	beq.n	8005f7a <USBD_StdEPReq+0xe2>
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d002      	beq.n	8005f06 <USBD_StdEPReq+0x6e>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d070      	beq.n	8005fe6 <USBD_StdEPReq+0x14e>
 8005f04:	e115      	b.n	8006132 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d002      	beq.n	8005f16 <USBD_StdEPReq+0x7e>
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d015      	beq.n	8005f40 <USBD_StdEPReq+0xa8>
 8005f14:	e02b      	b.n	8005f6e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00c      	beq.n	8005f36 <USBD_StdEPReq+0x9e>
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d009      	beq.n	8005f36 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 f87a 	bl	8007020 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f2c:	2180      	movs	r1, #128	; 0x80
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 f876 	bl	8007020 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f34:	e020      	b.n	8005f78 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fc1b 	bl	8006774 <USBD_CtlError>
              break;
 8005f3e:	e01b      	b.n	8005f78 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	885b      	ldrh	r3, [r3, #2]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10e      	bne.n	8005f66 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <USBD_StdEPReq+0xce>
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	2b80      	cmp	r3, #128	; 0x80
 8005f52:	d008      	beq.n	8005f66 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	88db      	ldrh	r3, [r3, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005f5c:	7bbb      	ldrb	r3, [r7, #14]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 f85d 	bl	8007020 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fccc 	bl	8006904 <USBD_CtlSendStatus>

              break;
 8005f6c:	e004      	b.n	8005f78 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fbff 	bl	8006774 <USBD_CtlError>
              break;
 8005f76:	bf00      	nop
          }
          break;
 8005f78:	e0e0      	b.n	800613c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d002      	beq.n	8005f8a <USBD_StdEPReq+0xf2>
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d015      	beq.n	8005fb4 <USBD_StdEPReq+0x11c>
 8005f88:	e026      	b.n	8005fd8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00c      	beq.n	8005faa <USBD_StdEPReq+0x112>
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b80      	cmp	r3, #128	; 0x80
 8005f94:	d009      	beq.n	8005faa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 f840 	bl	8007020 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005fa0:	2180      	movs	r1, #128	; 0x80
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 f83c 	bl	8007020 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fa8:	e01c      	b.n	8005fe4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fbe1 	bl	8006774 <USBD_CtlError>
              break;
 8005fb2:	e017      	b.n	8005fe4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	885b      	ldrh	r3, [r3, #2]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d112      	bne.n	8005fe2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 f847 	bl	800705e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fc97 	bl	8006904 <USBD_CtlSendStatus>
              }
              break;
 8005fd6:	e004      	b.n	8005fe2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fbca 	bl	8006774 <USBD_CtlError>
              break;
 8005fe0:	e000      	b.n	8005fe4 <USBD_StdEPReq+0x14c>
              break;
 8005fe2:	bf00      	nop
          }
          break;
 8005fe4:	e0aa      	b.n	800613c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d002      	beq.n	8005ff6 <USBD_StdEPReq+0x15e>
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d032      	beq.n	800605a <USBD_StdEPReq+0x1c2>
 8005ff4:	e097      	b.n	8006126 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <USBD_StdEPReq+0x174>
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d004      	beq.n	800600c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fbb5 	bl	8006774 <USBD_CtlError>
                break;
 800600a:	e091      	b.n	8006130 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800600c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006010:	2b00      	cmp	r3, #0
 8006012:	da0b      	bge.n	800602c <USBD_StdEPReq+0x194>
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	3310      	adds	r3, #16
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	3304      	adds	r3, #4
 800602a:	e00b      	b.n	8006044 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4413      	add	r3, r2
 8006042:	3304      	adds	r3, #4
 8006044:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2202      	movs	r2, #2
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fbf8 	bl	8006848 <USBD_CtlSendData>
              break;
 8006058:	e06a      	b.n	8006130 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800605a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800605e:	2b00      	cmp	r3, #0
 8006060:	da11      	bge.n	8006086 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006062:	7bbb      	ldrb	r3, [r7, #14]
 8006064:	f003 020f 	and.w	r2, r3, #15
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	3318      	adds	r3, #24
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d117      	bne.n	80060ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fb78 	bl	8006774 <USBD_CtlError>
                  break;
 8006084:	e054      	b.n	8006130 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d104      	bne.n	80060ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fb65 	bl	8006774 <USBD_CtlError>
                  break;
 80060aa:	e041      	b.n	8006130 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da0b      	bge.n	80060cc <USBD_StdEPReq+0x234>
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	3310      	adds	r3, #16
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4413      	add	r3, r2
 80060c8:	3304      	adds	r3, #4
 80060ca:	e00b      	b.n	80060e4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
 80060ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	3304      	adds	r3, #4
 80060e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <USBD_StdEPReq+0x25a>
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d103      	bne.n	80060fa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e00e      	b.n	8006118 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 ffcc 	bl	800709c <USBD_LL_IsStallEP>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e002      	b.n	8006118 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2202      	movs	r2, #2
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fb92 	bl	8006848 <USBD_CtlSendData>
              break;
 8006124:	e004      	b.n	8006130 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fb23 	bl	8006774 <USBD_CtlError>
              break;
 800612e:	bf00      	nop
          }
          break;
 8006130:	e004      	b.n	800613c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fb1d 	bl	8006774 <USBD_CtlError>
          break;
 800613a:	bf00      	nop
      }
      break;
 800613c:	e004      	b.n	8006148 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fb17 	bl	8006774 <USBD_CtlError>
      break;
 8006146:	bf00      	nop
  }

  return ret;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	885b      	ldrh	r3, [r3, #2]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	2b06      	cmp	r3, #6
 8006176:	f200 8128 	bhi.w	80063ca <USBD_GetDescriptor+0x276>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <USBD_GetDescriptor+0x2c>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	0800619d 	.word	0x0800619d
 8006184:	080061b5 	.word	0x080061b5
 8006188:	080061f5 	.word	0x080061f5
 800618c:	080063cb 	.word	0x080063cb
 8006190:	080063cb 	.word	0x080063cb
 8006194:	0800636b 	.word	0x0800636b
 8006198:	08006397 	.word	0x08006397
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	7c12      	ldrb	r2, [r2, #16]
 80061a8:	f107 0108 	add.w	r1, r7, #8
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
 80061b0:	60f8      	str	r0, [r7, #12]
      break;
 80061b2:	e112      	b.n	80063da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7c1b      	ldrb	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10d      	bne.n	80061d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	f107 0208 	add.w	r2, r7, #8
 80061c8:	4610      	mov	r0, r2
 80061ca:	4798      	blx	r3
 80061cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	2202      	movs	r2, #2
 80061d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061d6:	e100      	b.n	80063da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f107 0208 	add.w	r2, r7, #8
 80061e4:	4610      	mov	r0, r2
 80061e6:	4798      	blx	r3
 80061e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3301      	adds	r3, #1
 80061ee:	2202      	movs	r2, #2
 80061f0:	701a      	strb	r2, [r3, #0]
      break;
 80061f2:	e0f2      	b.n	80063da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b05      	cmp	r3, #5
 80061fc:	f200 80ac 	bhi.w	8006358 <USBD_GetDescriptor+0x204>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <USBD_GetDescriptor+0xb4>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	08006221 	.word	0x08006221
 800620c:	08006255 	.word	0x08006255
 8006210:	08006289 	.word	0x08006289
 8006214:	080062bd 	.word	0x080062bd
 8006218:	080062f1 	.word	0x080062f1
 800621c:	08006325 	.word	0x08006325
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	7c12      	ldrb	r2, [r2, #16]
 8006238:	f107 0108 	add.w	r1, r7, #8
 800623c:	4610      	mov	r0, r2
 800623e:	4798      	blx	r3
 8006240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006242:	e091      	b.n	8006368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa94 	bl	8006774 <USBD_CtlError>
            err++;
 800624c:	7afb      	ldrb	r3, [r7, #11]
 800624e:	3301      	adds	r3, #1
 8006250:	72fb      	strb	r3, [r7, #11]
          break;
 8006252:	e089      	b.n	8006368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	7c12      	ldrb	r2, [r2, #16]
 800626c:	f107 0108 	add.w	r1, r7, #8
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
 8006274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006276:	e077      	b.n	8006368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa7a 	bl	8006774 <USBD_CtlError>
            err++;
 8006280:	7afb      	ldrb	r3, [r7, #11]
 8006282:	3301      	adds	r3, #1
 8006284:	72fb      	strb	r3, [r7, #11]
          break;
 8006286:	e06f      	b.n	8006368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	7c12      	ldrb	r2, [r2, #16]
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062aa:	e05d      	b.n	8006368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa60 	bl	8006774 <USBD_CtlError>
            err++;
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	3301      	adds	r3, #1
 80062b8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ba:	e055      	b.n	8006368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	7c12      	ldrb	r2, [r2, #16]
 80062d4:	f107 0108 	add.w	r1, r7, #8
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062de:	e043      	b.n	8006368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa46 	bl	8006774 <USBD_CtlError>
            err++;
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	3301      	adds	r3, #1
 80062ec:	72fb      	strb	r3, [r7, #11]
          break;
 80062ee:	e03b      	b.n	8006368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	7c12      	ldrb	r2, [r2, #16]
 8006308:	f107 0108 	add.w	r1, r7, #8
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006312:	e029      	b.n	8006368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fa2c 	bl	8006774 <USBD_CtlError>
            err++;
 800631c:	7afb      	ldrb	r3, [r7, #11]
 800631e:	3301      	adds	r3, #1
 8006320:	72fb      	strb	r3, [r7, #11]
          break;
 8006322:	e021      	b.n	8006368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	7c12      	ldrb	r2, [r2, #16]
 800633c:	f107 0108 	add.w	r1, r7, #8
 8006340:	4610      	mov	r0, r2
 8006342:	4798      	blx	r3
 8006344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006346:	e00f      	b.n	8006368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa12 	bl	8006774 <USBD_CtlError>
            err++;
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	3301      	adds	r3, #1
 8006354:	72fb      	strb	r3, [r7, #11]
          break;
 8006356:	e007      	b.n	8006368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa0a 	bl	8006774 <USBD_CtlError>
          err++;
 8006360:	7afb      	ldrb	r3, [r7, #11]
 8006362:	3301      	adds	r3, #1
 8006364:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006366:	e038      	b.n	80063da <USBD_GetDescriptor+0x286>
 8006368:	e037      	b.n	80063da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	7c1b      	ldrb	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	f107 0208 	add.w	r2, r7, #8
 800637e:	4610      	mov	r0, r2
 8006380:	4798      	blx	r3
 8006382:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006384:	e029      	b.n	80063da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f9f3 	bl	8006774 <USBD_CtlError>
        err++;
 800638e:	7afb      	ldrb	r3, [r7, #11]
 8006390:	3301      	adds	r3, #1
 8006392:	72fb      	strb	r3, [r7, #11]
      break;
 8006394:	e021      	b.n	80063da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	7c1b      	ldrb	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10d      	bne.n	80063ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f107 0208 	add.w	r2, r7, #8
 80063aa:	4610      	mov	r0, r2
 80063ac:	4798      	blx	r3
 80063ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	2207      	movs	r2, #7
 80063b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063b8:	e00f      	b.n	80063da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f9d9 	bl	8006774 <USBD_CtlError>
        err++;
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	3301      	adds	r3, #1
 80063c6:	72fb      	strb	r3, [r7, #11]
      break;
 80063c8:	e007      	b.n	80063da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f9d1 	bl	8006774 <USBD_CtlError>
      err++;
 80063d2:	7afb      	ldrb	r3, [r7, #11]
 80063d4:	3301      	adds	r3, #1
 80063d6:	72fb      	strb	r3, [r7, #11]
      break;
 80063d8:	bf00      	nop
  }

  if (err != 0U)
 80063da:	7afb      	ldrb	r3, [r7, #11]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d11c      	bne.n	800641a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80063e0:	893b      	ldrh	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <USBD_GetDescriptor+0x2b6>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	88db      	ldrh	r3, [r3, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	88da      	ldrh	r2, [r3, #6]
 80063f2:	893b      	ldrh	r3, [r7, #8]
 80063f4:	4293      	cmp	r3, r2
 80063f6:	bf28      	it	cs
 80063f8:	4613      	movcs	r3, r2
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063fe:	893b      	ldrh	r3, [r7, #8]
 8006400:	461a      	mov	r2, r3
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa1f 	bl	8006848 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	88db      	ldrh	r3, [r3, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa76 	bl	8006904 <USBD_CtlSendStatus>
 8006418:	e000      	b.n	800641c <USBD_GetDescriptor+0x2c8>
    return;
 800641a:	bf00      	nop
    }
  }
}
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop

08006424 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	889b      	ldrh	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d130      	bne.n	8006498 <USBD_SetAddress+0x74>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	88db      	ldrh	r3, [r3, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d12c      	bne.n	8006498 <USBD_SetAddress+0x74>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	885b      	ldrh	r3, [r3, #2]
 8006442:	2b7f      	cmp	r3, #127	; 0x7f
 8006444:	d828      	bhi.n	8006498 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	885b      	ldrh	r3, [r3, #2]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006450:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006458:	2b03      	cmp	r3, #3
 800645a:	d104      	bne.n	8006466 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f988 	bl	8006774 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006464:	e01c      	b.n	80064a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	7bfa      	ldrb	r2, [r7, #15]
 800646a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fe37 	bl	80070e6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fa43 	bl	8006904 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648c:	e008      	b.n	80064a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006496:	e003      	b.n	80064a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f96a 	bl	8006774 <USBD_CtlError>
  }
}
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	885b      	ldrh	r3, [r3, #2]
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	4b41      	ldr	r3, [pc, #260]	; (80065c0 <USBD_SetConfig+0x118>)
 80064ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064bc:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <USBD_SetConfig+0x118>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d904      	bls.n	80064ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f954 	bl	8006774 <USBD_CtlError>
 80064cc:	e075      	b.n	80065ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d002      	beq.n	80064de <USBD_SetConfig+0x36>
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d023      	beq.n	8006524 <USBD_SetConfig+0x7c>
 80064dc:	e062      	b.n	80065a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80064de:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <USBD_SetConfig+0x118>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01a      	beq.n	800651c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80064e6:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <USBD_SetConfig+0x118>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2203      	movs	r2, #3
 80064f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064f8:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <USBD_SetConfig+0x118>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff f9f3 	bl	80058ea <USBD_SetClassConfig>
 8006504:	4603      	mov	r3, r0
 8006506:	2b02      	cmp	r3, #2
 8006508:	d104      	bne.n	8006514 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f931 	bl	8006774 <USBD_CtlError>
            return;
 8006512:	e052      	b.n	80065ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f9f5 	bl	8006904 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800651a:	e04e      	b.n	80065ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f9f1 	bl	8006904 <USBD_CtlSendStatus>
        break;
 8006522:	e04a      	b.n	80065ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006524:	4b26      	ldr	r3, [pc, #152]	; (80065c0 <USBD_SetConfig+0x118>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d112      	bne.n	8006552 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006534:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <USBD_SetConfig+0x118>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800653e:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <USBD_SetConfig+0x118>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff f9ef 	bl	8005928 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f9da 	bl	8006904 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006550:	e033      	b.n	80065ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006552:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <USBD_SetConfig+0x118>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	429a      	cmp	r2, r3
 800655e:	d01d      	beq.n	800659c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff f9dd 	bl	8005928 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <USBD_SetConfig+0x118>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <USBD_SetConfig+0x118>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff f9b3 	bl	80058ea <USBD_SetClassConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	2b02      	cmp	r3, #2
 8006588:	d104      	bne.n	8006594 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f8f1 	bl	8006774 <USBD_CtlError>
            return;
 8006592:	e012      	b.n	80065ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f9b5 	bl	8006904 <USBD_CtlSendStatus>
        break;
 800659a:	e00e      	b.n	80065ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f9b1 	bl	8006904 <USBD_CtlSendStatus>
        break;
 80065a2:	e00a      	b.n	80065ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f8e4 	bl	8006774 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <USBD_SetConfig+0x118>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff f9b8 	bl	8005928 <USBD_ClrClassConfig>
        break;
 80065b8:	bf00      	nop
    }
  }
}
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20000198 	.word	0x20000198

080065c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	88db      	ldrh	r3, [r3, #6]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d004      	beq.n	80065e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8cb 	bl	8006774 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065de:	e021      	b.n	8006624 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	db17      	blt.n	800661a <USBD_GetConfig+0x56>
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	dd02      	ble.n	80065f4 <USBD_GetConfig+0x30>
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d00b      	beq.n	800660a <USBD_GetConfig+0x46>
 80065f2:	e012      	b.n	800661a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3308      	adds	r3, #8
 80065fe:	2201      	movs	r2, #1
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f920 	bl	8006848 <USBD_CtlSendData>
        break;
 8006608:	e00c      	b.n	8006624 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3304      	adds	r3, #4
 800660e:	2201      	movs	r2, #1
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f918 	bl	8006848 <USBD_CtlSendData>
        break;
 8006618:	e004      	b.n	8006624 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f8a9 	bl	8006774 <USBD_CtlError>
        break;
 8006622:	bf00      	nop
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663c:	3b01      	subs	r3, #1
 800663e:	2b02      	cmp	r3, #2
 8006640:	d81e      	bhi.n	8006680 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	88db      	ldrh	r3, [r3, #6]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d004      	beq.n	8006654 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f891 	bl	8006774 <USBD_CtlError>
        break;
 8006652:	e01a      	b.n	800668a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f043 0202 	orr.w	r2, r3, #2
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	330c      	adds	r3, #12
 8006674:	2202      	movs	r2, #2
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f8e5 	bl	8006848 <USBD_CtlSendData>
      break;
 800667e:	e004      	b.n	800668a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f876 	bl	8006774 <USBD_CtlError>
      break;
 8006688:	bf00      	nop
  }
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	885b      	ldrh	r3, [r3, #2]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d106      	bne.n	80066b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f929 	bl	8006904 <USBD_CtlSendStatus>
  }
}
 80066b2:	bf00      	nop
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d80b      	bhi.n	80066e8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	885b      	ldrh	r3, [r3, #2]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d10c      	bne.n	80066f2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f90f 	bl	8006904 <USBD_CtlSendStatus>
      }
      break;
 80066e6:	e004      	b.n	80066f2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f842 	bl	8006774 <USBD_CtlError>
      break;
 80066f0:	e000      	b.n	80066f4 <USBD_ClrFeature+0x3a>
      break;
 80066f2:	bf00      	nop
  }
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	785a      	ldrb	r2, [r3, #1]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	3302      	adds	r3, #2
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b29a      	uxth	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	3303      	adds	r3, #3
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	b29b      	uxth	r3, r3
 800672a:	4413      	add	r3, r2
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	3304      	adds	r3, #4
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	b29a      	uxth	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	3305      	adds	r3, #5
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	b29b      	uxth	r3, r3
 8006746:	4413      	add	r3, r2
 8006748:	b29a      	uxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	3306      	adds	r3, #6
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	b29a      	uxth	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	3307      	adds	r3, #7
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	021b      	lsls	r3, r3, #8
 8006760:	b29b      	uxth	r3, r3
 8006762:	4413      	add	r3, r2
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	80da      	strh	r2, [r3, #6]

}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fc4d 	bl	8007020 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006786:	2100      	movs	r1, #0
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fc49 	bl	8007020 <USBD_LL_StallEP>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d032      	beq.n	8006812 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f834 	bl	800681a <USBD_GetLen>
 80067b2:	4603      	mov	r3, r0
 80067b4:	3301      	adds	r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	75fa      	strb	r2, [r7, #23]
 80067c6:	461a      	mov	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4413      	add	r3, r2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	7812      	ldrb	r2, [r2, #0]
 80067d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	75fa      	strb	r2, [r7, #23]
 80067d8:	461a      	mov	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4413      	add	r3, r2
 80067de:	2203      	movs	r2, #3
 80067e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80067e2:	e012      	b.n	800680a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	60fa      	str	r2, [r7, #12]
 80067ea:	7dfa      	ldrb	r2, [r7, #23]
 80067ec:	1c51      	adds	r1, r2, #1
 80067ee:	75f9      	strb	r1, [r7, #23]
 80067f0:	4611      	mov	r1, r2
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	440a      	add	r2, r1
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	75fa      	strb	r2, [r7, #23]
 8006800:	461a      	mov	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4413      	add	r3, r2
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e8      	bne.n	80067e4 <USBD_GetString+0x4e>
    }
  }
}
 8006812:	bf00      	nop
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006826:	e005      	b.n	8006834 <USBD_GetLen+0x1a>
  {
    len++;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	3301      	adds	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3301      	adds	r3, #1
 8006832:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f5      	bne.n	8006828 <USBD_GetLen+0xe>
  }

  return len;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr

08006848 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2202      	movs	r2, #2
 800685a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800685e:	88fa      	ldrh	r2, [r7, #6]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006864:	88fa      	ldrh	r2, [r7, #6]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	2100      	movs	r1, #0
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fc57 	bl	8007124 <USBD_LL_Transmit>

  return USBD_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	4613      	mov	r3, r2
 800688c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	2100      	movs	r1, #0
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fc45 	bl	8007124 <USBD_LL_Transmit>

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2203      	movs	r2, #3
 80068b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80068ba:	88fa      	ldrh	r2, [r7, #6]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	2100      	movs	r1, #0
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 fc4a 	bl	800716a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	2100      	movs	r1, #0
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fc38 	bl	800716a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2204      	movs	r2, #4
 8006910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006914:	2300      	movs	r3, #0
 8006916:	2200      	movs	r2, #0
 8006918:	2100      	movs	r1, #0
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fc02 	bl	8007124 <USBD_LL_Transmit>

  return USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2205      	movs	r2, #5
 8006936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800693a:	2300      	movs	r3, #0
 800693c:	2200      	movs	r2, #0
 800693e:	2100      	movs	r1, #0
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fc12 	bl	800716a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006954:	2200      	movs	r2, #0
 8006956:	4912      	ldr	r1, [pc, #72]	; (80069a0 <MX_USB_DEVICE_Init+0x50>)
 8006958:	4812      	ldr	r0, [pc, #72]	; (80069a4 <MX_USB_DEVICE_Init+0x54>)
 800695a:	f7fe ff6c 	bl	8005836 <USBD_Init>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006964:	f7f9 fe5a 	bl	800061c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006968:	490f      	ldr	r1, [pc, #60]	; (80069a8 <MX_USB_DEVICE_Init+0x58>)
 800696a:	480e      	ldr	r0, [pc, #56]	; (80069a4 <MX_USB_DEVICE_Init+0x54>)
 800696c:	f7fe ff8e 	bl	800588c <USBD_RegisterClass>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006976:	f7f9 fe51 	bl	800061c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800697a:	490c      	ldr	r1, [pc, #48]	; (80069ac <MX_USB_DEVICE_Init+0x5c>)
 800697c:	4809      	ldr	r0, [pc, #36]	; (80069a4 <MX_USB_DEVICE_Init+0x54>)
 800697e:	f7fe febf 	bl	8005700 <USBD_CDC_RegisterInterface>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006988:	f7f9 fe48 	bl	800061c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800698c:	4805      	ldr	r0, [pc, #20]	; (80069a4 <MX_USB_DEVICE_Init+0x54>)
 800698e:	f7fe ff96 	bl	80058be <USBD_Start>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006998:	f7f9 fe40 	bl	800061c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	2000012c 	.word	0x2000012c
 80069a4:	200005c4 	.word	0x200005c4
 80069a8:	20000018 	.word	0x20000018
 80069ac:	2000011c 	.word	0x2000011c

080069b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80069b4:	2200      	movs	r2, #0
 80069b6:	4905      	ldr	r1, [pc, #20]	; (80069cc <CDC_Init_FS+0x1c>)
 80069b8:	4805      	ldr	r0, [pc, #20]	; (80069d0 <CDC_Init_FS+0x20>)
 80069ba:	f7fe feb7 	bl	800572c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80069be:	4905      	ldr	r1, [pc, #20]	; (80069d4 <CDC_Init_FS+0x24>)
 80069c0:	4803      	ldr	r0, [pc, #12]	; (80069d0 <CDC_Init_FS+0x20>)
 80069c2:	f7fe fecc 	bl	800575e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80069c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000c70 	.word	0x20000c70
 80069d0:	200005c4 	.word	0x200005c4
 80069d4:	20000888 	.word	0x20000888

080069d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80069dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80069de:	4618      	mov	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr
	...

080069e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	71fb      	strb	r3, [r7, #7]
 80069f4:	4613      	mov	r3, r2
 80069f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80069f8:	79fb      	ldrb	r3, [r7, #7]
 80069fa:	2b23      	cmp	r3, #35	; 0x23
 80069fc:	d84a      	bhi.n	8006a94 <CDC_Control_FS+0xac>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <CDC_Control_FS+0x1c>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a95 	.word	0x08006a95
 8006a08:	08006a95 	.word	0x08006a95
 8006a0c:	08006a95 	.word	0x08006a95
 8006a10:	08006a95 	.word	0x08006a95
 8006a14:	08006a95 	.word	0x08006a95
 8006a18:	08006a95 	.word	0x08006a95
 8006a1c:	08006a95 	.word	0x08006a95
 8006a20:	08006a95 	.word	0x08006a95
 8006a24:	08006a95 	.word	0x08006a95
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006a95 	.word	0x08006a95
 8006a30:	08006a95 	.word	0x08006a95
 8006a34:	08006a95 	.word	0x08006a95
 8006a38:	08006a95 	.word	0x08006a95
 8006a3c:	08006a95 	.word	0x08006a95
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006a95 	.word	0x08006a95
 8006a50:	08006a95 	.word	0x08006a95
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006a95 	.word	0x08006a95
 8006a5c:	08006a95 	.word	0x08006a95
 8006a60:	08006a95 	.word	0x08006a95
 8006a64:	08006a95 	.word	0x08006a95
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006a95 	.word	0x08006a95
 8006a74:	08006a95 	.word	0x08006a95
 8006a78:	08006a95 	.word	0x08006a95
 8006a7c:	08006a95 	.word	0x08006a95
 8006a80:	08006a95 	.word	0x08006a95
 8006a84:	08006a95 	.word	0x08006a95
 8006a88:	08006a95 	.word	0x08006a95
 8006a8c:	08006a95 	.word	0x08006a95
 8006a90:	08006a95 	.word	0x08006a95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006a94:	bf00      	nop
  }

  return (USBD_OK);
 8006a96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop

08006aa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4805      	ldr	r0, [pc, #20]	; (8006ac8 <CDC_Receive_FS+0x24>)
 8006ab2:	f7fe fe54 	bl	800575e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ab6:	4804      	ldr	r0, [pc, #16]	; (8006ac8 <CDC_Receive_FS+0x24>)
 8006ab8:	f7fe fe93 	bl	80057e2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006abc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200005c4 	.word	0x200005c4

08006acc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <CDC_Transmit_FS+0x48>)
 8006ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e00b      	b.n	8006b0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006af2:	887b      	ldrh	r3, [r7, #2]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	4806      	ldr	r0, [pc, #24]	; (8006b14 <CDC_Transmit_FS+0x48>)
 8006afa:	f7fe fe17 	bl	800572c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006afe:	4805      	ldr	r0, [pc, #20]	; (8006b14 <CDC_Transmit_FS+0x48>)
 8006b00:	f7fe fe40 	bl	8005784 <USBD_CDC_TransmitPacket>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	200005c4 	.word	0x200005c4

08006b18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	6039      	str	r1, [r7, #0]
 8006b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2212      	movs	r2, #18
 8006b28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b2a:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20000148 	.word	0x20000148

08006b3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	6039      	str	r1, [r7, #0]
 8006b46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2204      	movs	r2, #4
 8006b4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b4e:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	2000015c 	.word	0x2000015c

08006b60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	6039      	str	r1, [r7, #0]
 8006b6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d105      	bne.n	8006b7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4907      	ldr	r1, [pc, #28]	; (8006b94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b76:	4808      	ldr	r0, [pc, #32]	; (8006b98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b78:	f7ff fe0d 	bl	8006796 <USBD_GetString>
 8006b7c:	e004      	b.n	8006b88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	4904      	ldr	r1, [pc, #16]	; (8006b94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b82:	4805      	ldr	r0, [pc, #20]	; (8006b98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b84:	f7ff fe07 	bl	8006796 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b88:	4b02      	ldr	r3, [pc, #8]	; (8006b94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20001058 	.word	0x20001058
 8006b98:	08007314 	.word	0x08007314

08006b9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	4904      	ldr	r1, [pc, #16]	; (8006bbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006bac:	4804      	ldr	r0, [pc, #16]	; (8006bc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006bae:	f7ff fdf2 	bl	8006796 <USBD_GetString>
  return USBD_StrDesc;
 8006bb2:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20001058 	.word	0x20001058
 8006bc0:	0800732c 	.word	0x0800732c

08006bc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	221a      	movs	r2, #26
 8006bd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006bd6:	f000 f843 	bl	8006c60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006bda:	4b02      	ldr	r3, [pc, #8]	; (8006be4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20000160 	.word	0x20000160

08006be8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	6039      	str	r1, [r7, #0]
 8006bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	4907      	ldr	r1, [pc, #28]	; (8006c1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bfe:	4808      	ldr	r0, [pc, #32]	; (8006c20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c00:	f7ff fdc9 	bl	8006796 <USBD_GetString>
 8006c04:	e004      	b.n	8006c10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4904      	ldr	r1, [pc, #16]	; (8006c1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c0a:	4805      	ldr	r0, [pc, #20]	; (8006c20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c0c:	f7ff fdc3 	bl	8006796 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c10:	4b02      	ldr	r3, [pc, #8]	; (8006c1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20001058 	.word	0x20001058
 8006c20:	08007340 	.word	0x08007340

08006c24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	6039      	str	r1, [r7, #0]
 8006c2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	4907      	ldr	r1, [pc, #28]	; (8006c58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c3a:	4808      	ldr	r0, [pc, #32]	; (8006c5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c3c:	f7ff fdab 	bl	8006796 <USBD_GetString>
 8006c40:	e004      	b.n	8006c4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	4904      	ldr	r1, [pc, #16]	; (8006c58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c46:	4805      	ldr	r0, [pc, #20]	; (8006c5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c48:	f7ff fda5 	bl	8006796 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c4c:	4b02      	ldr	r3, [pc, #8]	; (8006c58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20001058 	.word	0x20001058
 8006c5c:	0800734c 	.word	0x0800734c

08006c60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c66:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <Get_SerialNum+0x44>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <Get_SerialNum+0x48>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c72:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <Get_SerialNum+0x4c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c86:	2208      	movs	r2, #8
 8006c88:	4909      	ldr	r1, [pc, #36]	; (8006cb0 <Get_SerialNum+0x50>)
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f814 	bl	8006cb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c90:	2204      	movs	r2, #4
 8006c92:	4908      	ldr	r1, [pc, #32]	; (8006cb4 <Get_SerialNum+0x54>)
 8006c94:	68b8      	ldr	r0, [r7, #8]
 8006c96:	f000 f80f 	bl	8006cb8 <IntToUnicode>
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	1ffff7e8 	.word	0x1ffff7e8
 8006ca8:	1ffff7ec 	.word	0x1ffff7ec
 8006cac:	1ffff7f0 	.word	0x1ffff7f0
 8006cb0:	20000162 	.word	0x20000162
 8006cb4:	20000172 	.word	0x20000172

08006cb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]
 8006cce:	e027      	b.n	8006d20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	0f1b      	lsrs	r3, r3, #28
 8006cd4:	2b09      	cmp	r3, #9
 8006cd6:	d80b      	bhi.n	8006cf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	0f1b      	lsrs	r3, r3, #28
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3230      	adds	r2, #48	; 0x30
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	e00a      	b.n	8006d06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	0f1b      	lsrs	r3, r3, #28
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	440b      	add	r3, r1
 8006d00:	3237      	adds	r2, #55	; 0x37
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	3301      	adds	r3, #1
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	4413      	add	r3, r2
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
 8006d20:	7dfa      	ldrb	r2, [r7, #23]
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d3d3      	bcc.n	8006cd0 <IntToUnicode+0x18>
  }
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr
	...

08006d34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0d      	ldr	r2, [pc, #52]	; (8006d78 <HAL_PCD_MspInit+0x44>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d113      	bne.n	8006d6e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <HAL_PCD_MspInit+0x48>)
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	4a0c      	ldr	r2, [pc, #48]	; (8006d7c <HAL_PCD_MspInit+0x48>)
 8006d4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d50:	61d3      	str	r3, [r2, #28]
 8006d52:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <HAL_PCD_MspInit+0x48>)
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2100      	movs	r1, #0
 8006d62:	2014      	movs	r0, #20
 8006d64:	f7fa fb33 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006d68:	2014      	movs	r0, #20
 8006d6a:	f7fa fb4c 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40005c00 	.word	0x40005c00
 8006d7c:	40021000 	.word	0x40021000

08006d80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f7fe fdd9 	bl	800594e <USBD_LL_SetupStage>
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	015b      	lsls	r3, r3, #5
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f7fe fe0c 	bl	80059e4 <USBD_LL_DataOutStage>
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	015b      	lsls	r3, r3, #5
 8006dec:	4413      	add	r3, r2
 8006dee:	333c      	adds	r3, #60	; 0x3c
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	4619      	mov	r1, r3
 8006df6:	f7fe fe66 	bl	8005ac6 <USBD_LL_DataInStage>
}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe ff76 	bl	8005d02 <USBD_LL_SOF>
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e26:	2301      	movs	r3, #1
 8006e28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d001      	beq.n	8006e36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e32:	f7f9 fbf3 	bl	800061c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e3c:	7bfa      	ldrb	r2, [r7, #15]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe ff26 	bl	8005c92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe fedf 	bl	8005c10 <USBD_LL_Reset>
}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe ff20 	bl	8005cb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <HAL_PCD_SuspendCallback+0x30>)
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	4a03      	ldr	r2, [pc, #12]	; (8006e8c <HAL_PCD_SuspendCallback+0x30>)
 8006e7e:	f043 0306 	orr.w	r3, r3, #6
 8006e82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	e000ed00 	.word	0xe000ed00

08006e90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe ff1a 	bl	8005cd8 <USBD_LL_Resume>
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006eb4:	4a28      	ldr	r2, [pc, #160]	; (8006f58 <USBD_LL_Init+0xac>)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <USBD_LL_Init+0xac>)
 8006ec0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006ec4:	4b24      	ldr	r3, [pc, #144]	; (8006f58 <USBD_LL_Init+0xac>)
 8006ec6:	4a25      	ldr	r2, [pc, #148]	; (8006f5c <USBD_LL_Init+0xb0>)
 8006ec8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006eca:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <USBD_LL_Init+0xac>)
 8006ecc:	2208      	movs	r2, #8
 8006ece:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006ed0:	4b21      	ldr	r3, [pc, #132]	; (8006f58 <USBD_LL_Init+0xac>)
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006ed6:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <USBD_LL_Init+0xac>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006edc:	4b1e      	ldr	r3, [pc, #120]	; (8006f58 <USBD_LL_Init+0xac>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <USBD_LL_Init+0xac>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006ee8:	481b      	ldr	r0, [pc, #108]	; (8006f58 <USBD_LL_Init+0xac>)
 8006eea:	f7fa fd59 	bl	80019a0 <HAL_PCD_Init>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006ef4:	f7f9 fb92 	bl	800061c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006efe:	2318      	movs	r3, #24
 8006f00:	2200      	movs	r2, #0
 8006f02:	2100      	movs	r1, #0
 8006f04:	f7fb fbf2 	bl	80026ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f0e:	2358      	movs	r3, #88	; 0x58
 8006f10:	2200      	movs	r2, #0
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	f7fb fbea 	bl	80026ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f1e:	23c0      	movs	r3, #192	; 0xc0
 8006f20:	2200      	movs	r2, #0
 8006f22:	2181      	movs	r1, #129	; 0x81
 8006f24:	f7fb fbe2 	bl	80026ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f32:	2200      	movs	r2, #0
 8006f34:	2101      	movs	r1, #1
 8006f36:	f7fb fbd9 	bl	80026ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f44:	2200      	movs	r2, #0
 8006f46:	2182      	movs	r1, #130	; 0x82
 8006f48:	f7fb fbd0 	bl	80026ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20001258 	.word	0x20001258
 8006f5c:	40005c00 	.word	0x40005c00

08006f60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fa fdf3 	bl	8001b62 <HAL_PCD_Start>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f948 	bl	8007218 <USBD_Get_USB_Status>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	70fb      	strb	r3, [r7, #3]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70bb      	strb	r3, [r7, #2]
 8006fac:	4613      	mov	r3, r2
 8006fae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fbe:	78bb      	ldrb	r3, [r7, #2]
 8006fc0:	883a      	ldrh	r2, [r7, #0]
 8006fc2:	78f9      	ldrb	r1, [r7, #3]
 8006fc4:	f7fa ff26 	bl	8001e14 <HAL_PCD_EP_Open>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f922 	bl	8007218 <USBD_Get_USB_Status>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f7fa ff67 	bl	8001ed4 <HAL_PCD_EP_Close>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	4618      	mov	r0, r3
 800700e:	f000 f903 	bl	8007218 <USBD_Get_USB_Status>
 8007012:	4603      	mov	r3, r0
 8007014:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007016:	7bbb      	ldrb	r3, [r7, #14]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f7fb f811 	bl	8002066 <HAL_PCD_EP_SetStall>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f8e4 	bl	8007218 <USBD_Get_USB_Status>
 8007050:	4603      	mov	r3, r0
 8007052:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007054:	7bbb      	ldrb	r3, [r7, #14]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f7fb f84c 	bl	800211a <HAL_PCD_EP_ClrStall>
 8007082:	4603      	mov	r3, r0
 8007084:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	4618      	mov	r0, r3
 800708a:	f000 f8c5 	bl	8007218 <USBD_Get_USB_Status>
 800708e:	4603      	mov	r3, r0
 8007090:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007092:	7bbb      	ldrb	r3, [r7, #14]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80070b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	da08      	bge.n	80070ca <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	015b      	lsls	r3, r3, #5
 80070c2:	4413      	add	r3, r2
 80070c4:	332a      	adds	r3, #42	; 0x2a
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	e008      	b.n	80070dc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	015b      	lsls	r3, r3, #5
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80070da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007100:	78fa      	ldrb	r2, [r7, #3]
 8007102:	4611      	mov	r1, r2
 8007104:	4618      	mov	r0, r3
 8007106:	f7fa fe60 	bl	8001dca <HAL_PCD_SetAddress>
 800710a:	4603      	mov	r3, r0
 800710c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f881 	bl	8007218 <USBD_Get_USB_Status>
 8007116:	4603      	mov	r3, r0
 8007118:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800711a:	7bbb      	ldrb	r3, [r7, #14]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	461a      	mov	r2, r3
 8007130:	460b      	mov	r3, r1
 8007132:	72fb      	strb	r3, [r7, #11]
 8007134:	4613      	mov	r3, r2
 8007136:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007146:	893b      	ldrh	r3, [r7, #8]
 8007148:	7af9      	ldrb	r1, [r7, #11]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	f7fa ff52 	bl	8001ff4 <HAL_PCD_EP_Transmit>
 8007150:	4603      	mov	r3, r0
 8007152:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f85e 	bl	8007218 <USBD_Get_USB_Status>
 800715c:	4603      	mov	r3, r0
 800715e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007160:	7dbb      	ldrb	r3, [r7, #22]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	461a      	mov	r2, r3
 8007176:	460b      	mov	r3, r1
 8007178:	72fb      	strb	r3, [r7, #11]
 800717a:	4613      	mov	r3, r2
 800717c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800718c:	893b      	ldrh	r3, [r7, #8]
 800718e:	7af9      	ldrb	r1, [r7, #11]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	f7fa fee1 	bl	8001f58 <HAL_PCD_EP_Receive>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 f83b 	bl	8007218 <USBD_Get_USB_Status>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80071a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fa ff00 	bl	8001fcc <HAL_PCD_EP_GetRxCount>
 80071cc:	4603      	mov	r3, r0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <USBD_static_malloc+0x14>)
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	2000019c 	.word	0x2000019c

080071f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	2b03      	cmp	r3, #3
 800722a:	d817      	bhi.n	800725c <USBD_Get_USB_Status+0x44>
 800722c:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <USBD_Get_USB_Status+0x1c>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007245 	.word	0x08007245
 8007238:	0800724b 	.word	0x0800724b
 800723c:	08007251 	.word	0x08007251
 8007240:	08007257 	.word	0x08007257
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
    break;
 8007248:	e00b      	b.n	8007262 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800724a:	2302      	movs	r3, #2
 800724c:	73fb      	strb	r3, [r7, #15]
    break;
 800724e:	e008      	b.n	8007262 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
    break;
 8007254:	e005      	b.n	8007262 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007256:	2302      	movs	r3, #2
 8007258:	73fb      	strb	r3, [r7, #15]
    break;
 800725a:	e002      	b.n	8007262 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800725c:	2302      	movs	r3, #2
 800725e:	73fb      	strb	r3, [r7, #15]
    break;
 8007260:	bf00      	nop
  }
  return usb_status;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	2500      	movs	r5, #0
 8007274:	4e0c      	ldr	r6, [pc, #48]	; (80072a8 <__libc_init_array+0x38>)
 8007276:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007278:	1ba4      	subs	r4, r4, r6
 800727a:	10a4      	asrs	r4, r4, #2
 800727c:	42a5      	cmp	r5, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	f000 f822 	bl	80072c8 <_init>
 8007284:	2500      	movs	r5, #0
 8007286:	4e0a      	ldr	r6, [pc, #40]	; (80072b0 <__libc_init_array+0x40>)
 8007288:	4c0a      	ldr	r4, [pc, #40]	; (80072b4 <__libc_init_array+0x44>)
 800728a:	1ba4      	subs	r4, r4, r6
 800728c:	10a4      	asrs	r4, r4, #2
 800728e:	42a5      	cmp	r5, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007298:	4798      	blx	r3
 800729a:	3501      	adds	r5, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072a2:	4798      	blx	r3
 80072a4:	3501      	adds	r5, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	08007374 	.word	0x08007374
 80072ac:	08007374 	.word	0x08007374
 80072b0:	08007374 	.word	0x08007374
 80072b4:	08007378 	.word	0x08007378

080072b8 <memset>:
 80072b8:	4603      	mov	r3, r0
 80072ba:	4402      	add	r2, r0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d100      	bne.n	80072c2 <memset+0xa>
 80072c0:	4770      	bx	lr
 80072c2:	f803 1b01 	strb.w	r1, [r3], #1
 80072c6:	e7f9      	b.n	80072bc <memset+0x4>

080072c8 <_init>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	bf00      	nop
 80072cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ce:	bc08      	pop	{r3}
 80072d0:	469e      	mov	lr, r3
 80072d2:	4770      	bx	lr

080072d4 <_fini>:
 80072d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d6:	bf00      	nop
 80072d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072da:	bc08      	pop	{r3}
 80072dc:	469e      	mov	lr, r3
 80072de:	4770      	bx	lr
