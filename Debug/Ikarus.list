
Ikarus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007250  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800735c  0800735c  0001735c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f4  080073f4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080073f4  080073f4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073f4  080073f4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080073fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c70  2000017c  08007578  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  08007578  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a137  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003898  00000000  00000000  0003a2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  0003db78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001308  00000000  00000000  0003f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018038  00000000  00000000  00040330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a50  00000000  00000000  00058368  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078b03  00000000  00000000  0006adb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e38bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005588  00000000  00000000  000e3938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007344 	.word	0x08007344

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007344 	.word	0x08007344

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b24      	ldr	r3, [pc, #144]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a23      	ldr	r2, [pc, #140]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b21      	ldr	r3, [pc, #132]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1d      	ldr	r2, [pc, #116]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b18      	ldr	r3, [pc, #96]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	480c      	ldr	r0, [pc, #48]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001c8:	f001 faac 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80001cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001e6:	f001 f943 	bl	8001470 <HAL_GPIO_Init>

}
 80001ea:	bf00      	nop
 80001ec:	3720      	adds	r7, #32
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	40011000 	.word	0x40011000

080001fc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <MX_I2C2_Init+0x50>)
 8000202:	4a13      	ldr	r2, [pc, #76]	; (8000250 <MX_I2C2_Init+0x54>)
 8000204:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000206:	4b11      	ldr	r3, [pc, #68]	; (800024c <MX_I2C2_Init+0x50>)
 8000208:	4a12      	ldr	r2, [pc, #72]	; (8000254 <MX_I2C2_Init+0x58>)
 800020a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <MX_I2C2_Init+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_I2C2_Init+0x50>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <MX_I2C2_Init+0x50>)
 800021a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800021e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000220:	4b0a      	ldr	r3, [pc, #40]	; (800024c <MX_I2C2_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_I2C2_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <MX_I2C2_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <MX_I2C2_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <MX_I2C2_Init+0x50>)
 800023a:	f001 faa3 	bl	8001784 <HAL_I2C_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000244:	f000 fa04 	bl	8000650 <Error_Handler>
  }

}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200003c0 	.word	0x200003c0
 8000250:	40005800 	.word	0x40005800
 8000254:	000186a0 	.word	0x000186a0

08000258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	f107 0310 	add.w	r3, r7, #16
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a16      	ldr	r2, [pc, #88]	; (80002cc <HAL_I2C_MspInit+0x74>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d124      	bne.n	80002c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000290:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000296:	2312      	movs	r3, #18
 8000298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800029a:	2303      	movs	r3, #3
 800029c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <HAL_I2C_MspInit+0x7c>)
 80002a6:	f001 f8e3 	bl	8001470 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b4:	61d3      	str	r3, [r2, #28]
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002b8:	69db      	ldr	r3, [r3, #28]
 80002ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80002c2:	bf00      	nop
 80002c4:	3720      	adds	r7, #32
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40005800 	.word	0x40005800
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40010c00 	.word	0x40010c00

080002d8 <HAL_TIM_PWM_Start_AllChannels>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef HAL_TIM_PWM_Start_AllChannels(TIM_HandleTypeDef *htim) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if (HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002e0:	2100      	movs	r1, #0
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f003 f80a 	bl	80032fc <HAL_TIM_PWM_Start>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d116      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002ee:	2100      	movs	r1, #0
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f003 f803 	bl	80032fc <HAL_TIM_PWM_Start>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10f      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002fc:	2100      	movs	r1, #0
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f002 fffc 	bl	80032fc <HAL_TIM_PWM_Start>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d108      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK) {
 800030a:	2100      	movs	r1, #0
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f002 fff5 	bl	80032fc <HAL_TIM_PWM_Start>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d101      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
		return HAL_OK;
 8000318:	2300      	movs	r3, #0
 800031a:	e000      	b.n	800031e <HAL_TIM_PWM_Start_AllChannels+0x46>
	}
	return HAL_ERROR;
 800031c:	2301      	movs	r3, #1
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <set_pmw_handler_all_channels_pulse_width>:
;

void set_pmw_handler_all_channels_pulse_width(TIM_HandleTypeDef handler,
		unsigned int pulseWidth) {
 8000326:	b084      	sub	sp, #16
 8000328:	b490      	push	{r4, r7}
 800032a:	af00      	add	r7, sp, #0
 800032c:	f107 0408 	add.w	r4, r7, #8
 8000330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	handler.Instance->CCR1 = pulseWidth;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
	handler.Instance->CCR2 = pulseWidth;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800033e:	639a      	str	r2, [r3, #56]	; 0x38
	handler.Instance->CCR3 = pulseWidth;
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000344:	63da      	str	r2, [r3, #60]	; 0x3c
	handler.Instance->CCR4 = pulseWidth;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800034a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc90      	pop	{r4, r7}
 8000352:	b004      	add	sp, #16
 8000354:	4770      	bx	lr
	...

08000358 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035a:	b09d      	sub	sp, #116	; 0x74
 800035c:	af0e      	add	r7, sp, #56	; 0x38
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800035e:	f000 fef5 	bl	800114c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000362:	f000 f91b 	bl	800059c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000366:	f7ff fef1 	bl	800014c <MX_GPIO_Init>
	MX_I2C2_Init();
 800036a:	f7ff ff47 	bl	80001fc <MX_I2C2_Init>
	MX_SPI1_Init();
 800036e:	f000 f975 	bl	800065c <MX_SPI1_Init>
	MX_SPI2_Init();
 8000372:	f000 f9a9 	bl	80006c8 <MX_SPI2_Init>
	MX_TIM1_Init();
 8000376:	f000 fb29 	bl	80009cc <MX_TIM1_Init>
	MX_TIM2_Init();
 800037a:	f000 fbdf 	bl	8000b3c <MX_TIM2_Init>
	MX_TIM3_Init();
 800037e:	f000 fc73 	bl	8000c68 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000382:	f000 fd09 	bl	8000d98 <MX_TIM4_Init>
	MX_USB_DEVICE_Init();
 8000386:	f006 fafd 	bl	8006984 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	unsigned int position_minimum = 350;
 800038a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800038e:	633b      	str	r3, [r7, #48]	; 0x30
	unsigned int position_center = 750;
 8000390:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000394:	62fb      	str	r3, [r7, #44]	; 0x2c
	unsigned int position_maximum = 1250;
 8000396:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800039a:	62bb      	str	r3, [r7, #40]	; 0x28

	unsigned int position = position_center;
 800039c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800039e:	637b      	str	r3, [r7, #52]	; 0x34

	set_pmw_handler_all_channels_pulse_width(htim1, position);
 80003a0:	4e74      	ldr	r6, [pc, #464]	; (8000574 <main+0x21c>)
 80003a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003a4:	930c      	str	r3, [sp, #48]	; 0x30
 80003a6:	466d      	mov	r5, sp
 80003a8:	f106 0410 	add.w	r4, r6, #16
 80003ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003c0:	f7ff ffb1 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim2, position);
 80003c4:	4e6c      	ldr	r6, [pc, #432]	; (8000578 <main+0x220>)
 80003c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003c8:	930c      	str	r3, [sp, #48]	; 0x30
 80003ca:	466d      	mov	r5, sp
 80003cc:	f106 0410 	add.w	r4, r6, #16
 80003d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003e4:	f7ff ff9f 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim3, position);
 80003e8:	4e64      	ldr	r6, [pc, #400]	; (800057c <main+0x224>)
 80003ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003ec:	930c      	str	r3, [sp, #48]	; 0x30
 80003ee:	466d      	mov	r5, sp
 80003f0:	f106 0410 	add.w	r4, r6, #16
 80003f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000400:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000404:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000408:	f7ff ff8d 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim4, position);
 800040c:	4e5c      	ldr	r6, [pc, #368]	; (8000580 <main+0x228>)
 800040e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000410:	930c      	str	r3, [sp, #48]	; 0x30
 8000412:	466d      	mov	r5, sp
 8000414:	f106 0410 	add.w	r4, r6, #16
 8000418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800041c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000420:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000424:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000428:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800042c:	f7ff ff7b 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>

	HAL_TIM_PWM_Start_AllChannels(&htim1);
 8000430:	4850      	ldr	r0, [pc, #320]	; (8000574 <main+0x21c>)
 8000432:	f7ff ff51 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim2);
 8000436:	4850      	ldr	r0, [pc, #320]	; (8000578 <main+0x220>)
 8000438:	f7ff ff4e 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim3);
 800043c:	484f      	ldr	r0, [pc, #316]	; (800057c <main+0x224>)
 800043e:	f7ff ff4b 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim4);
 8000442:	484f      	ldr	r0, [pc, #316]	; (8000580 <main+0x228>)
 8000444:	f7ff ff48 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>

	//if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED

	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8000448:	4b4e      	ldr	r3, [pc, #312]	; (8000584 <main+0x22c>)
 800044a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800044e:	2b03      	cmp	r3, #3
 8000450:	d10b      	bne.n	800046a <main+0x112>
		uint8_t Buf[] = "We are ON baby\n";
 8000452:	4b4d      	ldr	r3, [pc, #308]	; (8000588 <main+0x230>)
 8000454:	f107 0418 	add.w	r4, r7, #24
 8000458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800045a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		CDC_Transmit_FS(Buf, sizeof(Buf));
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	2110      	movs	r1, #16
 8000464:	4618      	mov	r0, r3
 8000466:	f006 fb63 	bl	8006b30 <CDC_Transmit_FS>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 800046a:	4b46      	ldr	r3, [pc, #280]	; (8000584 <main+0x22c>)
 800046c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000470:	2b03      	cmp	r3, #3
 8000472:	d116      	bne.n	80004a2 <main+0x14a>
			uint8_t Buf[] = "\r\nWe are ON baby\r\n";
 8000474:	4b45      	ldr	r3, [pc, #276]	; (800058c <main+0x234>)
 8000476:	1d3c      	adds	r4, r7, #4
 8000478:	461d      	mov	r5, r3
 800047a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047e:	682b      	ldr	r3, [r5, #0]
 8000480:	461a      	mov	r2, r3
 8000482:	8022      	strh	r2, [r4, #0]
 8000484:	3402      	adds	r4, #2
 8000486:	0c1b      	lsrs	r3, r3, #16
 8000488:	7023      	strb	r3, [r4, #0]
			CDC_Transmit_FS(Buf, sizeof(Buf));
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2113      	movs	r1, #19
 800048e:	4618      	mov	r0, r3
 8000490:	f006 fb4e 	bl	8006b30 <CDC_Transmit_FS>
			CDC_Transmit_FS(received_data, received_data_size);
 8000494:	4b3e      	ldr	r3, [pc, #248]	; (8000590 <main+0x238>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	4619      	mov	r1, r3
 800049c:	483d      	ldr	r0, [pc, #244]	; (8000594 <main+0x23c>)
 800049e:	f006 fb47 	bl	8006b30 <CDC_Transmit_FS>
		}

		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 80004a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a6:	483c      	ldr	r0, [pc, #240]	; (8000598 <main+0x240>)
 80004a8:	f001 f954 	bl	8001754 <HAL_GPIO_TogglePin>

		set_pmw_handler_all_channels_pulse_width(htim1, position);
 80004ac:	4e31      	ldr	r6, [pc, #196]	; (8000574 <main+0x21c>)
 80004ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004b0:	930c      	str	r3, [sp, #48]	; 0x30
 80004b2:	466d      	mov	r5, sp
 80004b4:	f106 0410 	add.w	r4, r6, #16
 80004b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004cc:	f7ff ff2b 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim2, position);
 80004d0:	4e29      	ldr	r6, [pc, #164]	; (8000578 <main+0x220>)
 80004d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004d4:	930c      	str	r3, [sp, #48]	; 0x30
 80004d6:	466d      	mov	r5, sp
 80004d8:	f106 0410 	add.w	r4, r6, #16
 80004dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004f0:	f7ff ff19 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim3, position);
 80004f4:	4e21      	ldr	r6, [pc, #132]	; (800057c <main+0x224>)
 80004f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004f8:	930c      	str	r3, [sp, #48]	; 0x30
 80004fa:	466d      	mov	r5, sp
 80004fc:	f106 0410 	add.w	r4, r6, #16
 8000500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800050c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000510:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000514:	f7ff ff07 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim4, position);
 8000518:	4e19      	ldr	r6, [pc, #100]	; (8000580 <main+0x228>)
 800051a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800051c:	930c      	str	r3, [sp, #48]	; 0x30
 800051e:	466d      	mov	r5, sp
 8000520:	f106 0410 	add.w	r4, r6, #16
 8000524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800052a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800052c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000530:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000534:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000538:	f7ff fef5 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>

		position++;
 800053c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800053e:	3301      	adds	r3, #1
 8000540:	637b      	str	r3, [r7, #52]	; 0x34
		if (position >= position_maximum) {
 8000542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000546:	429a      	cmp	r2, r3
 8000548:	d30f      	bcc.n	800056a <main+0x212>
			position = position_minimum;
 800054a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800054c:	637b      	str	r3, [r7, #52]	; 0x34
			htim2.Instance->CCR1 = position;
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <main+0x220>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin,
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	480e      	ldr	r0, [pc, #56]	; (8000598 <main+0x240>)
 800055e:	f001 f8e1 	bl	8001724 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_Delay(600);
 8000562:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000566:	f000 fe53 	bl	8001210 <HAL_Delay>
		}

		HAL_Delay(5000);
 800056a:	f241 3088 	movw	r0, #5000	; 0x1388
 800056e:	f000 fe4f 	bl	8001210 <HAL_Delay>
		if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8000572:	e77a      	b.n	800046a <main+0x112>
 8000574:	2000080c 	.word	0x2000080c
 8000578:	2000084c 	.word	0x2000084c
 800057c:	200007cc 	.word	0x200007cc
 8000580:	2000078c 	.word	0x2000078c
 8000584:	20000414 	.word	0x20000414
 8000588:	0800735c 	.word	0x0800735c
 800058c:	0800736c 	.word	0x0800736c
 8000590:	20000890 	.word	0x20000890
 8000594:	200008d4 	.word	0x200008d4
 8000598:	40011000 	.word	0x40011000

0800059c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	2228      	movs	r2, #40	; 0x28
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fec1 	bl	8007332 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f8d0 	bl	8002798 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x66>
		Error_Handler();
 80005fe:	f000 f827 	bl	8000650 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fb3a 	bl	8002c98 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x92>
		Error_Handler();
 800062a:	f000 f811 	bl	8000650 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800062e:	2310      	movs	r3, #16
 8000630:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fcb5 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xac>
		Error_Handler();
 8000644:	f000 f804 	bl	8000650 <Error_Handler>
	}
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_SPI1_Init+0x64>)
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <MX_SPI1_Init+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_SPI1_Init+0x64>)
 8000668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800066c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_SPI1_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_SPI1_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_SPI1_Init+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_SPI1_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_SPI1_Init+0x64>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_SPI1_Init+0x64>)
 8000690:	2208      	movs	r2, #8
 8000692:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_SPI1_Init+0x64>)
 80006a8:	220a      	movs	r2, #10
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_SPI1_Init+0x64>)
 80006ae:	f002 fd31 	bl	8003114 <HAL_SPI_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006b8:	f7ff ffca 	bl	8000650 <Error_Handler>
  }

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000734 	.word	0x20000734
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_SPI2_Init+0x64>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_SPI2_Init+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_SPI2_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_SPI2_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_SPI2_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_SPI2_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_SPI2_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_SPI2_Init+0x64>)
 80006f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_SPI2_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_SPI2_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_SPI2_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_SPI2_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_SPI2_Init+0x64>)
 8000712:	220a      	movs	r2, #10
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_SPI2_Init+0x64>)
 8000718:	f002 fcfc 	bl	8003114 <HAL_SPI_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8000722:	f7ff ff95 	bl	8000650 <Error_Handler>
  }

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200006dc 	.word	0x200006dc
 8000730:	40003800 	.word	0x40003800

08000734 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a3e      	ldr	r2, [pc, #248]	; (8000848 <HAL_SPI_MspInit+0x114>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d13e      	bne.n	80007d2 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000754:	4b3d      	ldr	r3, [pc, #244]	; (800084c <HAL_SPI_MspInit+0x118>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a3c      	ldr	r2, [pc, #240]	; (800084c <HAL_SPI_MspInit+0x118>)
 800075a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b3a      	ldr	r3, [pc, #232]	; (800084c <HAL_SPI_MspInit+0x118>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <HAL_SPI_MspInit+0x118>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a36      	ldr	r2, [pc, #216]	; (800084c <HAL_SPI_MspInit+0x118>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b34      	ldr	r3, [pc, #208]	; (800084c <HAL_SPI_MspInit+0x118>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000784:	2328      	movs	r3, #40	; 0x28
 8000786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	482e      	ldr	r0, [pc, #184]	; (8000850 <HAL_SPI_MspInit+0x11c>)
 8000798:	f000 fe6a 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800079c:	2310      	movs	r3, #16
 800079e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4828      	ldr	r0, [pc, #160]	; (8000850 <HAL_SPI_MspInit+0x11c>)
 80007b0:	f000 fe5e 	bl	8001470 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <HAL_SPI_MspInit+0x120>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007ca:	4a22      	ldr	r2, [pc, #136]	; (8000854 <HAL_SPI_MspInit+0x120>)
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80007d0:	e036      	b.n	8000840 <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a20      	ldr	r2, [pc, #128]	; (8000858 <HAL_SPI_MspInit+0x124>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d131      	bne.n	8000840 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e6:	61d3      	str	r3, [r2, #28]
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_SPI_MspInit+0x118>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800080c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <HAL_SPI_MspInit+0x11c>)
 8000822:	f000 fe25 	bl	8001470 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <HAL_SPI_MspInit+0x11c>)
 800083c:	f000 fe18 	bl	8001470 <HAL_GPIO_Init>
}
 8000840:	bf00      	nop
 8000842:	3730      	adds	r7, #48	; 0x30
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40013000 	.word	0x40013000
 800084c:	40021000 	.word	0x40021000
 8000850:	40010c00 	.word	0x40010c00
 8000854:	40010000 	.word	0x40010000
 8000858:	40003800 	.word	0x40003800

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_MspInit+0x5c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <HAL_MspInit+0x5c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x5c>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x5c>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x5c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x5c>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_MspInit+0x60>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_MspInit+0x60>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010000 	.word	0x40010000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <HardFault_Handler+0x4>

080008d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <BusFault_Handler+0x4>

080008de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 fc64 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800091a:	f001 f962 	bl	8001be2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000b80 	.word	0x20000b80

08000928 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM2_IRQHandler+0x10>)
 800092e:	f002 fd17 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000084c 	.word	0x2000084c

0800093c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM3_IRQHandler+0x10>)
 8000942:	f002 fd0d 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200007cc 	.word	0x200007cc

08000950 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <TIM4_IRQHandler+0x10>)
 8000956:	f002 fd03 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000078c 	.word	0x2000078c

08000964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <SystemInit+0x5c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <SystemInit+0x5c>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <SystemInit+0x5c>)
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4911      	ldr	r1, [pc, #68]	; (80009c0 <SystemInit+0x5c>)
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <SystemInit+0x60>)
 800097c:	4013      	ands	r3, r2
 800097e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <SystemInit+0x5c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <SystemInit+0x5c>)
 8000986:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800098a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <SystemInit+0x5c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <SystemInit+0x5c>)
 8000996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <SystemInit+0x5c>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <SystemInit+0x5c>)
 80009a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SystemInit+0x5c>)
 80009aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SystemInit+0x64>)
 80009b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000
 80009c4:	f8ff0000 	.word	0xf8ff0000
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	615a      	str	r2, [r3, #20]
 80009fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2220      	movs	r2, #32
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f006 fc94 	bl	8007332 <memset>

  htim1.Instance = TIM1;
 8000a0a:	4b4a      	ldr	r3, [pc, #296]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a0c:	4a4a      	ldr	r2, [pc, #296]	; (8000b38 <MX_TIM1_Init+0x16c>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144-1;
 8000a10:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a12:	228f      	movs	r2, #143	; 0x8f
 8000a14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000a1c:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b40      	ldr	r3, [pc, #256]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a36:	483f      	ldr	r0, [pc, #252]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a38:	f002 fbcd 	bl	80031d6 <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a42:	f7ff fe05 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a50:	4619      	mov	r1, r3
 8000a52:	4838      	ldr	r0, [pc, #224]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a54:	f002 feb2 	bl	80037bc <HAL_TIM_ConfigClockSource>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a5e:	f7ff fdf7 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a62:	4834      	ldr	r0, [pc, #208]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a64:	f002 fbe2 	bl	800322c <HAL_TIM_OC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a6e:	f7ff fdef 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482c      	ldr	r0, [pc, #176]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000a82:	f003 fa23 	bl	8003ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a8c:	f7ff fde0 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481f      	ldr	r0, [pc, #124]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000ab6:	f002 fd5b 	bl	8003570 <HAL_TIM_OC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ac0:	f7ff fdc6 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	2204      	movs	r2, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4819      	ldr	r0, [pc, #100]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000ace:	f002 fd4f 	bl	8003570 <HAL_TIM_OC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ad8:	f7ff fdba 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000ae6:	f002 fd43 	bl	8003570 <HAL_TIM_OC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000af0:	f7ff fdae 	bl	8000650 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000b18:	f003 fa1c 	bl	8003f54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000b22:	f7ff fd95 	bl	8000650 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <MX_TIM1_Init+0x168>)
 8000b28:	f000 fa3e 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3758      	adds	r7, #88	; 0x58
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000080c 	.word	0x2000080c
 8000b38:	40012c00 	.word	0x40012c00

08000b3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000b6c:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000b76:	228f      	movs	r2, #143	; 0x8f
 8000b78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000b82:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b94:	4833      	ldr	r0, [pc, #204]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000b96:	f002 fb1e 	bl	80031d6 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ba0:	f7ff fd56 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	482c      	ldr	r0, [pc, #176]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000bb2:	f002 fe03 	bl	80037bc <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f7ff fd48 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc0:	4828      	ldr	r0, [pc, #160]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000bc2:	f002 fb67 	bl	8003294 <HAL_TIM_PWM_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f7ff fd40 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4821      	ldr	r0, [pc, #132]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000be0:	f003 f974 	bl	8003ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bea:	f7ff fd31 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bee:	2360      	movs	r3, #96	; 0x60
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000c06:	f002 fd13 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c10:	f7ff fd1e 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2204      	movs	r2, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000c1c:	f002 fd08 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c26:	f7ff fd13 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000c32:	f002 fcfd 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000c3c:	f7ff fd08 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	220c      	movs	r2, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4807      	ldr	r0, [pc, #28]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000c48:	f002 fcf2 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000c52:	f7ff fcfd 	bl	8000650 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000c56:	4803      	ldr	r0, [pc, #12]	; (8000c64 <MX_TIM2_Init+0x128>)
 8000c58:	f000 f9a6 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000084c 	.word	0x2000084c

08000c68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000c98:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000c9a:	4a3e      	ldr	r2, [pc, #248]	; (8000d94 <MX_TIM3_Init+0x12c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 144-1;
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000ca0:	228f      	movs	r2, #143	; 0x8f
 8000ca2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000caa:	4b39      	ldr	r3, [pc, #228]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000cac:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cbe:	4834      	ldr	r0, [pc, #208]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000cc0:	f002 fa89 	bl	80031d6 <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cca:	f7ff fcc1 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	482d      	ldr	r0, [pc, #180]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000cdc:	f002 fd6e 	bl	80037bc <HAL_TIM_ConfigClockSource>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ce6:	f7ff fcb3 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cea:	4829      	ldr	r0, [pc, #164]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000cec:	f002 fad2 	bl	8003294 <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cf6:	f7ff fcab 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	4619      	mov	r1, r3
 8000d08:	4821      	ldr	r0, [pc, #132]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000d0a:	f003 f8df 	bl	8003ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d14:	f7ff fc9c 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4818      	ldr	r0, [pc, #96]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000d30:	f002 fc7e 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d3a:	f7ff fc89 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2204      	movs	r2, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000d46:	f002 fc73 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d50:	f7ff fc7e 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2208      	movs	r2, #8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000d5c:	f002 fc68 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000d66:	f7ff fc73 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	220c      	movs	r2, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000d72:	f002 fc5d 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000d7c:	f7ff fc68 	bl	8000650 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM3_Init+0x128>)
 8000d82:	f000 f911 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000d86:	bf00      	nop
 8000d88:	3738      	adds	r7, #56	; 0x38
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200007cc 	.word	0x200007cc
 8000d94:	40000400 	.word	0x40000400

08000d98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	; 0x38
 8000d9c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	615a      	str	r2, [r3, #20]
 8000dc6:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000dca:	4a3e      	ldr	r2, [pc, #248]	; (8000ec4 <MX_TIM4_Init+0x12c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8000dce:	4b3c      	ldr	r3, [pc, #240]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000dd0:	228f      	movs	r2, #143	; 0x8f
 8000dd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000dda:	4b39      	ldr	r3, [pc, #228]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000ddc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000de0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dee:	4834      	ldr	r0, [pc, #208]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000df0:	f002 f9f1 	bl	80031d6 <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000dfa:	f7ff fc29 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	482d      	ldr	r0, [pc, #180]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000e0c:	f002 fcd6 	bl	80037bc <HAL_TIM_ConfigClockSource>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e16:	f7ff fc1b 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e1a:	4829      	ldr	r0, [pc, #164]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000e1c:	f002 fa3a 	bl	8003294 <HAL_TIM_PWM_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e26:	f7ff fc13 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	4619      	mov	r1, r3
 8000e38:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000e3a:	f003 f847 	bl	8003ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e44:	f7ff fc04 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e48:	2360      	movs	r3, #96	; 0x60
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000e60:	f002 fbe6 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e6a:	f7ff fbf1 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2204      	movs	r2, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000e76:	f002 fbdb 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e80:	f7ff fbe6 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2208      	movs	r2, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000e8c:	f002 fbd0 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000e96:	f7ff fbdb 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000ea2:	f002 fbc5 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000eac:	f7ff fbd0 	bl	8000650 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <MX_TIM4_Init+0x128>)
 8000eb2:	f000 f879 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000eb6:	bf00      	nop
 8000eb8:	3738      	adds	r7, #56	; 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000078c 	.word	0x2000078c
 8000ec4:	40000800 	.word	0x40000800

08000ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eda:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000ee0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee4:	6193      	str	r3, [r2, #24]
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ef2:	e04c      	b.n	8000f8e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efc:	d114      	bne.n	8000f28 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	201c      	movs	r0, #28
 8000f1c:	f000 fa71 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f20:	201c      	movs	r0, #28
 8000f22:	f000 fa8a 	bl	800143a <HAL_NVIC_EnableIRQ>
}
 8000f26:	e032      	b.n	8000f8e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_TIM_Base_MspInit+0xd8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d114      	bne.n	8000f5c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201d      	movs	r0, #29
 8000f50:	f000 fa57 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f54:	201d      	movs	r0, #29
 8000f56:	f000 fa70 	bl	800143a <HAL_NVIC_EnableIRQ>
}
 8000f5a:	e018      	b.n	8000f8e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_TIM_Base_MspInit+0xdc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d113      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201e      	movs	r0, #30
 8000f84:	f000 fa3d 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f88:	201e      	movs	r0, #30
 8000f8a:	f000 fa56 	bl	800143a <HAL_NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40012c00 	.word	0x40012c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40000400 	.word	0x40000400
 8000fa4:	40000800 	.word	0x40000800

08000fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a49      	ldr	r2, [pc, #292]	; (80010e8 <HAL_TIM_MspPostInit+0x140>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d119      	bne.n	8000ffc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b48      	ldr	r3, [pc, #288]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a47      	ldr	r2, [pc, #284]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b45      	ldr	r3, [pc, #276]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fe0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	483e      	ldr	r0, [pc, #248]	; (80010f0 <HAL_TIM_MspPostInit+0x148>)
 8000ff6:	f000 fa3b 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ffa:	e071      	b.n	80010e0 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001004:	d118      	bne.n	8001038 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a38      	ldr	r2, [pc, #224]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800101e:	230f      	movs	r3, #15
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2302      	movs	r3, #2
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4619      	mov	r1, r3
 8001030:	482f      	ldr	r0, [pc, #188]	; (80010f0 <HAL_TIM_MspPostInit+0x148>)
 8001032:	f000 fa1d 	bl	8001470 <HAL_GPIO_Init>
}
 8001036:	e053      	b.n	80010e0 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a2d      	ldr	r2, [pc, #180]	; (80010f4 <HAL_TIM_MspPostInit+0x14c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d130      	bne.n	80010a4 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a29      	ldr	r2, [pc, #164]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6193      	str	r3, [r2, #24]
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001072:	23c0      	movs	r3, #192	; 0xc0
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2302      	movs	r3, #2
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4619      	mov	r1, r3
 8001084:	481a      	ldr	r0, [pc, #104]	; (80010f0 <HAL_TIM_MspPostInit+0x148>)
 8001086:	f000 f9f3 	bl	8001470 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2302      	movs	r3, #2
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4619      	mov	r1, r3
 800109c:	4816      	ldr	r0, [pc, #88]	; (80010f8 <HAL_TIM_MspPostInit+0x150>)
 800109e:	f000 f9e7 	bl	8001470 <HAL_GPIO_Init>
}
 80010a2:	e01d      	b.n	80010e0 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_TIM_MspPostInit+0x154>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d118      	bne.n	80010e0 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_TIM_MspPostInit+0x144>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <HAL_TIM_MspPostInit+0x150>)
 80010dc:	f000 f9c8 	bl	8001470 <HAL_GPIO_Init>
}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40012c00 	.word	0x40012c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40000400 	.word	0x40000400
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40000800 	.word	0x40000800

08001100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001100:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001102:	e003      	b.n	800110c <LoopCopyDataInit>

08001104 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001106:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001108:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800110a:	3104      	adds	r1, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001110:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001114:	d3f6      	bcc.n	8001104 <CopyDataInit>
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001118:	e002      	b.n	8001120 <LoopFillZerobss>

0800111a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800111c:	f842 3b04 	str.w	r3, [r2], #4

08001120 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001124:	d3f9      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001126:	f7ff fc1d 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f006 f8d3 	bl	80072d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112e:	f7ff f913 	bl	8000358 <main>
  bx lr
 8001132:	4770      	bx	lr
  ldr r3, =_sidata
 8001134:	080073fc 	.word	0x080073fc
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800113c:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8001140:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8001144:	20000dec 	.word	0x20000dec

08001148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_2_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x28>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f945 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fb78 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f95d 	bl	8001456 <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f925 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_IncTick+0x1c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x20>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <HAL_IncTick+0x20>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000008 	.word	0x20000008
 80011f8:	2000088c 	.word	0x2000088c

080011fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	2000088c 	.word	0x2000088c

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff fff0 	bl	80011fc <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_Delay+0x40>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffe0 	bl	80011fc <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4906      	ldr	r1, [pc, #24]	; (80012ec <__NVIC_EnableIRQ+0x34>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff90 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff2d 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff42 	bl	800129c <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff35 	bl	80012b8 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa2 	bl	80013a8 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b08b      	sub	sp, #44	; 0x2c
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e127      	b.n	80016d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001484:	2201      	movs	r2, #1
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	429a      	cmp	r2, r3
 800149e:	f040 8116 	bne.w	80016ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d034      	beq.n	8001514 <HAL_GPIO_Init+0xa4>
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d80d      	bhi.n	80014ca <HAL_GPIO_Init+0x5a>
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d02b      	beq.n	800150a <HAL_GPIO_Init+0x9a>
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d804      	bhi.n	80014c0 <HAL_GPIO_Init+0x50>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d031      	beq.n	800151e <HAL_GPIO_Init+0xae>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d01c      	beq.n	80014f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014be:	e048      	b.n	8001552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d043      	beq.n	800154c <HAL_GPIO_Init+0xdc>
 80014c4:	2b11      	cmp	r3, #17
 80014c6:	d01b      	beq.n	8001500 <HAL_GPIO_Init+0x90>
          break;
 80014c8:	e043      	b.n	8001552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ca:	4a89      	ldr	r2, [pc, #548]	; (80016f0 <HAL_GPIO_Init+0x280>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d026      	beq.n	800151e <HAL_GPIO_Init+0xae>
 80014d0:	4a87      	ldr	r2, [pc, #540]	; (80016f0 <HAL_GPIO_Init+0x280>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d806      	bhi.n	80014e4 <HAL_GPIO_Init+0x74>
 80014d6:	4a87      	ldr	r2, [pc, #540]	; (80016f4 <HAL_GPIO_Init+0x284>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d020      	beq.n	800151e <HAL_GPIO_Init+0xae>
 80014dc:	4a86      	ldr	r2, [pc, #536]	; (80016f8 <HAL_GPIO_Init+0x288>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01d      	beq.n	800151e <HAL_GPIO_Init+0xae>
          break;
 80014e2:	e036      	b.n	8001552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014e4:	4a85      	ldr	r2, [pc, #532]	; (80016fc <HAL_GPIO_Init+0x28c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d019      	beq.n	800151e <HAL_GPIO_Init+0xae>
 80014ea:	4a85      	ldr	r2, [pc, #532]	; (8001700 <HAL_GPIO_Init+0x290>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d016      	beq.n	800151e <HAL_GPIO_Init+0xae>
 80014f0:	4a84      	ldr	r2, [pc, #528]	; (8001704 <HAL_GPIO_Init+0x294>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0xae>
          break;
 80014f6:	e02c      	b.n	8001552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e028      	b.n	8001552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	3304      	adds	r3, #4
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e023      	b.n	8001552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	3308      	adds	r3, #8
 8001510:	623b      	str	r3, [r7, #32]
          break;
 8001512:	e01e      	b.n	8001552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	330c      	adds	r3, #12
 800151a:	623b      	str	r3, [r7, #32]
          break;
 800151c:	e019      	b.n	8001552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001526:	2304      	movs	r3, #4
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e012      	b.n	8001552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001534:	2308      	movs	r3, #8
 8001536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	611a      	str	r2, [r3, #16]
          break;
 800153e:	e008      	b.n	8001552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001540:	2308      	movs	r3, #8
 8001542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	615a      	str	r2, [r3, #20]
          break;
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2bff      	cmp	r3, #255	; 0xff
 8001556:	d801      	bhi.n	800155c <HAL_GPIO_Init+0xec>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	e001      	b.n	8001560 <HAL_GPIO_Init+0xf0>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3304      	adds	r3, #4
 8001560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2bff      	cmp	r3, #255	; 0xff
 8001566:	d802      	bhi.n	800156e <HAL_GPIO_Init+0xfe>
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x104>
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	3b08      	subs	r3, #8
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	210f      	movs	r1, #15
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	401a      	ands	r2, r3
 8001586:	6a39      	ldr	r1, [r7, #32]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	431a      	orrs	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8096 	beq.w	80016ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a2:	4b59      	ldr	r3, [pc, #356]	; (8001708 <HAL_GPIO_Init+0x298>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_GPIO_Init+0x298>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_GPIO_Init+0x298>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015ba:	4a54      	ldr	r2, [pc, #336]	; (800170c <HAL_GPIO_Init+0x29c>)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4b      	ldr	r2, [pc, #300]	; (8001710 <HAL_GPIO_Init+0x2a0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x19e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4a      	ldr	r2, [pc, #296]	; (8001714 <HAL_GPIO_Init+0x2a4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x19a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a49      	ldr	r2, [pc, #292]	; (8001718 <HAL_GPIO_Init+0x2a8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x196>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a48      	ldr	r2, [pc, #288]	; (800171c <HAL_GPIO_Init+0x2ac>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x192>
 80015fe:	2303      	movs	r3, #3
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x1a0>
 8001602:	2304      	movs	r3, #4
 8001604:	e004      	b.n	8001610 <HAL_GPIO_Init+0x1a0>
 8001606:	2302      	movs	r3, #2
 8001608:	e002      	b.n	8001610 <HAL_GPIO_Init+0x1a0>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x1a0>
 800160e:	2300      	movs	r3, #0
 8001610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001612:	f002 0203 	and.w	r2, r2, #3
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	4093      	lsls	r3, r2
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001620:	493a      	ldr	r1, [pc, #232]	; (800170c <HAL_GPIO_Init+0x29c>)
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4938      	ldr	r1, [pc, #224]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	43db      	mvns	r3, r3
 8001650:	4933      	ldr	r1, [pc, #204]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 8001652:	4013      	ands	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	492e      	ldr	r1, [pc, #184]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
 800166e:	e006      	b.n	800167e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	43db      	mvns	r3, r3
 8001678:	4929      	ldr	r1, [pc, #164]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 800167a:	4013      	ands	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	4924      	ldr	r1, [pc, #144]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
 8001696:	e006      	b.n	80016a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	43db      	mvns	r3, r3
 80016a0:	491f      	ldr	r1, [pc, #124]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	491a      	ldr	r1, [pc, #104]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60cb      	str	r3, [r1, #12]
 80016be:	e006      	b.n	80016ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4915      	ldr	r1, [pc, #84]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	3301      	adds	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f47f aed0 	bne.w	8001484 <HAL_GPIO_Init+0x14>
  }
}
 80016e4:	bf00      	nop
 80016e6:	372c      	adds	r7, #44	; 0x2c
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	10210000 	.word	0x10210000
 80016f4:	10110000 	.word	0x10110000
 80016f8:	10120000 	.word	0x10120000
 80016fc:	10310000 	.word	0x10310000
 8001700:	10320000 	.word	0x10320000
 8001704:	10220000 	.word	0x10220000
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	40010800 	.word	0x40010800
 8001714:	40010c00 	.word	0x40010c00
 8001718:	40011000 	.word	0x40011000
 800171c:	40011400 	.word	0x40011400
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001740:	e003      	b.n	800174a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	611a      	str	r2, [r3, #16]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176c:	887a      	ldrh	r2, [r7, #2]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001772:	e002      	b.n	800177a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	611a      	str	r2, [r3, #16]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e10f      	b.n	80019b6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d106      	bne.n	80017b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7fe fd54 	bl	8000258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2224      	movs	r2, #36	; 0x24
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017c8:	f001 fbbc 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 80017cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a7b      	ldr	r2, [pc, #492]	; (80019c0 <HAL_I2C_Init+0x23c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d807      	bhi.n	80017e8 <HAL_I2C_Init+0x64>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a7a      	ldr	r2, [pc, #488]	; (80019c4 <HAL_I2C_Init+0x240>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	bf94      	ite	ls
 80017e0:	2301      	movls	r3, #1
 80017e2:	2300      	movhi	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	e006      	b.n	80017f6 <HAL_I2C_Init+0x72>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a77      	ldr	r2, [pc, #476]	; (80019c8 <HAL_I2C_Init+0x244>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	bf94      	ite	ls
 80017f0:	2301      	movls	r3, #1
 80017f2:	2300      	movhi	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0db      	b.n	80019b6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4a72      	ldr	r2, [pc, #456]	; (80019cc <HAL_I2C_Init+0x248>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a64      	ldr	r2, [pc, #400]	; (80019c0 <HAL_I2C_Init+0x23c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d802      	bhi.n	8001838 <HAL_I2C_Init+0xb4>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	e009      	b.n	800184c <HAL_I2C_Init+0xc8>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	4a63      	ldr	r2, [pc, #396]	; (80019d0 <HAL_I2C_Init+0x24c>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	3301      	adds	r3, #1
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	430b      	orrs	r3, r1
 8001852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800185e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4956      	ldr	r1, [pc, #344]	; (80019c0 <HAL_I2C_Init+0x23c>)
 8001868:	428b      	cmp	r3, r1
 800186a:	d80d      	bhi.n	8001888 <HAL_I2C_Init+0x104>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1e59      	subs	r1, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fbb1 f3f3 	udiv	r3, r1, r3
 800187a:	3301      	adds	r3, #1
 800187c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	bf38      	it	cc
 8001884:	2304      	movcc	r3, #4
 8001886:	e04f      	b.n	8001928 <HAL_I2C_Init+0x1a4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d111      	bne.n	80018b4 <HAL_I2C_Init+0x130>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e58      	subs	r0, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	e012      	b.n	80018da <HAL_I2C_Init+0x156>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	0099      	lsls	r1, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_I2C_Init+0x15e>
 80018de:	2301      	movs	r3, #1
 80018e0:	e022      	b.n	8001928 <HAL_I2C_Init+0x1a4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10e      	bne.n	8001908 <HAL_I2C_Init+0x184>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e58      	subs	r0, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	440b      	add	r3, r1
 80018f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	e00f      	b.n	8001928 <HAL_I2C_Init+0x1a4>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	0099      	lsls	r1, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	6809      	ldr	r1, [r1, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69da      	ldr	r2, [r3, #28]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6911      	ldr	r1, [r2, #16]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68d2      	ldr	r2, [r2, #12]
 8001962:	4311      	orrs	r1, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	430b      	orrs	r3, r1
 800196a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	000186a0 	.word	0x000186a0
 80019c4:	001e847f 	.word	0x001e847f
 80019c8:	003d08ff 	.word	0x003d08ff
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	10624dd3 	.word	0x10624dd3

080019d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	b08b      	sub	sp, #44	; 0x2c
 80019d8:	af06      	add	r7, sp, #24
 80019da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0d3      	b.n	8001b8e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f005 f9cc 	bl	8006d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fb2b 	bl	8004068 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	687e      	ldr	r6, [r7, #4]
 8001a1a:	466d      	mov	r5, sp
 8001a1c:	f106 0410 	add.w	r4, r6, #16
 8001a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	602b      	str	r3, [r5, #0]
 8001a28:	1d33      	adds	r3, r6, #4
 8001a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a2c:	6838      	ldr	r0, [r7, #0]
 8001a2e:	f002 faf4 	bl	800401a <USB_CoreInit>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0a4      	b.n	8001b8e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fb28 	bl	80040a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e035      	b.n	8001ac2 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3329      	adds	r3, #41	; 0x29
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	015b      	lsls	r3, r3, #5
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3328      	adds	r3, #40	; 0x28
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	b291      	uxth	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	015b      	lsls	r3, r3, #5
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3336      	adds	r3, #54	; 0x36
 8001a80:	460a      	mov	r2, r1
 8001a82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	015b      	lsls	r3, r3, #5
 8001a8a:	4413      	add	r3, r2
 8001a8c:	332b      	adds	r3, #43	; 0x2b
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	4413      	add	r3, r2
 8001a9a:	3338      	adds	r3, #56	; 0x38
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	015b      	lsls	r3, r3, #5
 8001aa6:	4413      	add	r3, r2
 8001aa8:	333c      	adds	r3, #60	; 0x3c
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	015b      	lsls	r3, r3, #5
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d3c4      	bcc.n	8001a56 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e031      	b.n	8001b36 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	015b      	lsls	r3, r3, #5
 8001ad8:	4413      	add	r3, r2
 8001ada:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	015b      	lsls	r3, r3, #5
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	4413      	add	r3, r2
 8001afa:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	015b      	lsls	r3, r3, #5
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	015b      	lsls	r3, r3, #5
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	330a      	adds	r3, #10
 8001b28:	015b      	lsls	r3, r3, #5
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3c8      	bcc.n	8001ad2 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	687e      	ldr	r6, [r7, #4]
 8001b48:	466d      	mov	r5, sp
 8001b4a:	f106 0410 	add.w	r4, r6, #16
 8001b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	602b      	str	r3, [r5, #0]
 8001b56:	1d33      	adds	r3, r6, #4
 8001b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f002 faac 	bl	80040b8 <USB_DevInit>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00d      	b.n	8001b8e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fae9 	bl	800515e <USB_DevDisconnect>

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_PCD_Start+0x16>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e016      	b.n	8001bda <HAL_PCD_Start+0x44>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f005 fb55 	bl	8007266 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fac2 	bl	800514a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fa35 	bl	800403a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fabf 	bl	8005172 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfe:	d102      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 faf3 	bl	80021ec <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fab1 	bl	8005172 <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1a:	d112      	bne.n	8001c42 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f005 f924 	bl	8006e82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8de 	bl	8001dfe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fa93 	bl	8005172 <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c56:	d10b      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fa7c 	bl	8005172 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c84:	d10b      	bne.n	8001c9e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fa65 	bl	8005172 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb2:	d126      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0204 	bic.w	r2, r2, #4
 8001cc6:	b292      	uxth	r2, r2
 8001cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0208 	bic.w	r2, r2, #8
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f005 f905 	bl	8006ef4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfc:	b292      	uxth	r2, r2
 8001cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fa33 	bl	8005172 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d16:	d13d      	bne.n	8001d94 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0208 	orr.w	r2, r2, #8
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d42:	b292      	uxth	r2, r2
 8001d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0204 	orr.w	r2, r2, #4
 8001d5a:	b292      	uxth	r2, r2
 8001d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fa04 	bl	8005172 <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d74:	d10b      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f005 f896 	bl	8006ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 f9ea 	bl	8005172 <USB_ReadInterrupts>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da8:	d10e      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dbc:	b292      	uxth	r2, r2
 8001dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f005 f84f 	bl	8006e66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 f9d0 	bl	8005172 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ddc:	d10b      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df0:	b292      	uxth	r2, r2
 8001df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_PCD_SetAddress+0x1a>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e013      	b.n	8001e40 <HAL_PCD_SetAddress+0x42>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 f977 	bl	8005124 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	70fb      	strb	r3, [r7, #3]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	803b      	strh	r3, [r7, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da0b      	bge.n	8001e86 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	015b      	lsls	r3, r3, #5
 8001e76:	3328      	adds	r3, #40	; 0x28
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	705a      	strb	r2, [r3, #1]
 8001e84:	e00b      	b.n	8001e9e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	015b      	lsls	r3, r3, #5
 8001e8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eaa:	883a      	ldrh	r2, [r7, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	78ba      	ldrb	r2, [r7, #2]
 8001eb4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ec8:	78bb      	ldrb	r3, [r7, #2]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_PCD_EP_Open+0x9a>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e00e      	b.n	8001f00 <HAL_PCD_EP_Open+0xb8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68f9      	ldr	r1, [r7, #12]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 f905 	bl	8004100 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001efe:	7afb      	ldrb	r3, [r7, #11]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da0b      	bge.n	8001f34 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	015b      	lsls	r3, r3, #5
 8001f24:	3328      	adds	r3, #40	; 0x28
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	705a      	strb	r2, [r3, #1]
 8001f32:	e00b      	b.n	8001f4c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	015b      	lsls	r3, r3, #5
 8001f3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_PCD_EP_Close+0x5e>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e00e      	b.n	8001f84 <HAL_PCD_EP_Close+0x7c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68f9      	ldr	r1, [r7, #12]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fbb1 	bl	80046dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	015b      	lsls	r3, r3, #5
 8001fa4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc6:	7afb      	ldrb	r3, [r7, #11]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fd2:	7afb      	ldrb	r3, [r7, #11]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6979      	ldr	r1, [r7, #20]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fd10 	bl	8004a08 <USB_EPStartXfer>
 8001fe8:	e005      	b.n	8001ff6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6979      	ldr	r1, [r7, #20]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f002 fd09 	bl	8004a08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	330a      	adds	r3, #10
 8002016:	015b      	lsls	r3, r3, #5
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	681b      	ldr	r3, [r3, #0]
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	460b      	mov	r3, r1
 8002036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	3328      	adds	r3, #40	; 0x28
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2201      	movs	r2, #1
 800205e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002060:	7afb      	ldrb	r3, [r7, #11]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	b2da      	uxtb	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	4618      	mov	r0, r3
 800207e:	f002 fcc3 	bl	8004a08 <USB_EPStartXfer>
 8002082:	e005      	b.n	8002090 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6979      	ldr	r1, [r7, #20]
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fcbc 	bl	8004a08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 0207 	and.w	r2, r3, #7
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d901      	bls.n	80020b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e046      	b.n	8002146 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da0b      	bge.n	80020d8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	3328      	adds	r3, #40	; 0x28
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	705a      	strb	r2, [r3, #1]
 80020d6:	e009      	b.n	80020ec <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	015b      	lsls	r3, r3, #5
 80020dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_PCD_EP_SetStall+0x72>
 8002108:	2302      	movs	r3, #2
 800210a:	e01c      	b.n	8002146 <HAL_PCD_EP_SetStall+0xac>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 ff2c 	bl	8004f78 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	2b00      	cmp	r3, #0
 8002128:	d108      	bne.n	800213c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f003 f82a 	bl	8005190 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d901      	bls.n	800216c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e03a      	b.n	80021e2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800216c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002170:	2b00      	cmp	r3, #0
 8002172:	da0b      	bge.n	800218c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	015b      	lsls	r3, r3, #5
 800217c:	3328      	adds	r3, #40	; 0x28
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	705a      	strb	r2, [r3, #1]
 800218a:	e00b      	b.n	80021a4 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	015b      	lsls	r3, r3, #5
 8002194:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_PCD_EP_ClrStall+0x76>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e00e      	b.n	80021e2 <HAL_PCD_EP_ClrStall+0x94>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68f9      	ldr	r1, [r7, #12]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 ff12 	bl	8004ffc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021f4:	e282      	b.n	80026fc <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021fe:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002200:	8afb      	ldrh	r3, [r7, #22]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800220a:	7d7b      	ldrb	r3, [r7, #21]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 8142 	bne.w	8002496 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002212:	8afb      	ldrh	r3, [r7, #22]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d151      	bne.n	80022c0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222c:	b29c      	uxth	r4, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223a:	b29b      	uxth	r3, r3
 800223c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3328      	adds	r3, #40	; 0x28
 8002242:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	3302      	adds	r3, #2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	441a      	add	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800227e:	2100      	movs	r1, #0
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f004 fdd9 	bl	8006e38 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8234 	beq.w	80026fc <PCD_EP_ISR_Handler+0x510>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 822f 	bne.w	80026fc <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b292      	uxth	r2, r2
 80022b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022be:	e21d      	b.n	80026fc <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022c6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022d0:	8a7b      	ldrh	r3, [r7, #18]
 80022d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d033      	beq.n	8002342 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	3306      	adds	r3, #6
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002318:	b29b      	uxth	r3, r3
 800231a:	f002 ff88 	bl	800522e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29a      	uxth	r2, r3
 8002326:	f640 738f 	movw	r3, #3983	; 0xf8f
 800232a:	4013      	ands	r3, r2
 800232c:	b29c      	uxth	r4, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002336:	b292      	uxth	r2, r2
 8002338:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f004 fd52 	bl	8006de4 <HAL_PCD_SetupStageCallback>
 8002340:	e1dc      	b.n	80026fc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002342:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f280 81d8 	bge.w	80026fc <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29a      	uxth	r2, r3
 8002354:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002358:	4013      	ands	r3, r2
 800235a:	b29c      	uxth	r4, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002364:	b292      	uxth	r2, r2
 8002366:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002370:	b29b      	uxth	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	3306      	adds	r3, #6
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d019      	beq.n	80023d0 <PCD_EP_ISR_Handler+0x1e4>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6959      	ldr	r1, [r3, #20]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f002 ff3a 	bl	800522e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	441a      	add	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023c8:	2100      	movs	r1, #0
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f004 fd1c 	bl	8006e08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461c      	mov	r4, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023de:	b29b      	uxth	r3, r3
 80023e0:	441c      	add	r4, r3
 80023e2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80023e6:	461c      	mov	r4, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10e      	bne.n	800240e <PCD_EP_ISR_Handler+0x222>
 80023f0:	8823      	ldrh	r3, [r4, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8023      	strh	r3, [r4, #0]
 80023fc:	8823      	ldrh	r3, [r4, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002408:	b29b      	uxth	r3, r3
 800240a:	8023      	strh	r3, [r4, #0]
 800240c:	e02d      	b.n	800246a <PCD_EP_ISR_Handler+0x27e>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b3e      	cmp	r3, #62	; 0x3e
 8002414:	d812      	bhi.n	800243c <PCD_EP_ISR_Handler+0x250>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <PCD_EP_ISR_Handler+0x244>
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	3301      	adds	r3, #1
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	b29b      	uxth	r3, r3
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	b29b      	uxth	r3, r3
 8002438:	8023      	strh	r3, [r4, #0]
 800243a:	e016      	b.n	800246a <PCD_EP_ISR_Handler+0x27e>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <PCD_EP_ISR_Handler+0x26a>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3b01      	subs	r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	b29b      	uxth	r3, r3
 800245a:	029b      	lsls	r3, r3, #10
 800245c:	b29b      	uxth	r3, r3
 800245e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002466:	b29b      	uxth	r3, r3
 8002468:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247a:	b29c      	uxth	r4, r3
 800247c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002480:	b29c      	uxth	r4, r3
 8002482:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002486:	b29c      	uxth	r4, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4ba2      	ldr	r3, [pc, #648]	; (8002718 <PCD_EP_ISR_Handler+0x52c>)
 800248e:	4323      	orrs	r3, r4
 8002490:	b29b      	uxth	r3, r3
 8002492:	8013      	strh	r3, [r2, #0]
 8002494:	e132      	b.n	80026fc <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	7d7b      	ldrb	r3, [r7, #21]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f280 80d1 	bge.w	8002652 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	7d7b      	ldrb	r3, [r7, #21]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29c      	uxth	r4, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	7d7b      	ldrb	r3, [r7, #21]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80024d8:	b292      	uxth	r2, r2
 80024da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024dc:	7d7b      	ldrb	r3, [r7, #21]
 80024de:	015b      	lsls	r3, r3, #5
 80024e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	7b1b      	ldrb	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d121      	bne.n	8002536 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	3306      	adds	r3, #6
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800251c:	8bfb      	ldrh	r3, [r7, #30]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d072      	beq.n	8002608 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6959      	ldr	r1, [r3, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	88da      	ldrh	r2, [r3, #6]
 800252e:	8bfb      	ldrh	r3, [r7, #30]
 8002530:	f002 fe7d 	bl	800522e <USB_ReadPMA>
 8002534:	e068      	b.n	8002608 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d021      	beq.n	8002594 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	3302      	adds	r3, #2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002578:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800257a:	8bfb      	ldrh	r3, [r7, #30]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d02a      	beq.n	80025d6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6959      	ldr	r1, [r3, #20]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	891a      	ldrh	r2, [r3, #8]
 800258c:	8bfb      	ldrh	r3, [r7, #30]
 800258e:	f002 fe4e 	bl	800522e <USB_ReadPMA>
 8002592:	e020      	b.n	80025d6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	3306      	adds	r3, #6
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025bc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80025be:	8bfb      	ldrh	r3, [r7, #30]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6959      	ldr	r1, [r3, #20]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	895a      	ldrh	r2, [r3, #10]
 80025d0:	8bfb      	ldrh	r3, [r7, #30]
 80025d2:	f002 fe2c 	bl	800522e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	b29c      	uxth	r4, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	441a      	add	r2, r3
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <PCD_EP_ISR_Handler+0x530>)
 8002602:	4323      	orrs	r3, r4
 8002604:	b29b      	uxth	r3, r3
 8002606:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	8bfb      	ldrh	r3, [r7, #30]
 800260e:	441a      	add	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	8bfb      	ldrh	r3, [r7, #30]
 800261a:	441a      	add	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <PCD_EP_ISR_Handler+0x446>
 8002628:	8bfa      	ldrh	r2, [r7, #30]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	429a      	cmp	r2, r3
 8002630:	d206      	bcs.n	8002640 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f004 fbe5 	bl	8006e08 <HAL_PCD_DataOutStageCallback>
 800263e:	e008      	b.n	8002652 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	7819      	ldrb	r1, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fc9d 	bl	8001f8c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002652:	8a7b      	ldrh	r3, [r7, #18]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d04f      	beq.n	80026fc <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800265c:	7d7b      	ldrb	r3, [r7, #21]
 800265e:	015b      	lsls	r3, r3, #5
 8002660:	3328      	adds	r3, #40	; 0x28
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	7d7b      	ldrb	r3, [r7, #21]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800267c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002680:	b29c      	uxth	r4, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	7d7b      	ldrb	r3, [r7, #21]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	441a      	add	r2, r3
 800268e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002696:	b29b      	uxth	r3, r3
 8002698:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	3302      	adds	r3, #2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f004 fba8 	bl	8006e38 <HAL_PCD_DataInStageCallback>
 80026e8:	e008      	b.n	80026fc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	7819      	ldrb	r1, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fc96 	bl	8002028 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002704:	b29b      	uxth	r3, r3
 8002706:	b21b      	sxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	f6ff ad74 	blt.w	80021f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3724      	adds	r7, #36	; 0x24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	ffff8080 	.word	0xffff8080
 800271c:	ffff80c0 	.word	0xffff80c0

08002720 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	4613      	mov	r3, r2
 8002730:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	015b      	lsls	r3, r3, #5
 8002746:	3328      	adds	r3, #40	; 0x28
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e006      	b.n	800275e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002750:	897b      	ldrh	r3, [r7, #10]
 8002752:	015b      	lsls	r3, r3, #5
 8002754:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800275e:	893b      	ldrh	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2200      	movs	r2, #0
 8002768:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	b29a      	uxth	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	80da      	strh	r2, [r3, #6]
 8002772:	e00b      	b.n	800278c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2201      	movs	r2, #1
 8002778:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	b29a      	uxth	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	b29a      	uxth	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e26c      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8087 	beq.w	80028c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d00c      	beq.n	80027de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027c4:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d112      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5e>
 80027d0:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d10b      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x12c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d168      	bne.n	80028c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e246      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x76>
 8002800:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a7f      	ldr	r2, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e02e      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x98>
 8002816:	4b7b      	ldr	r3, [pc, #492]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7a      	ldr	r2, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a77      	ldr	r2, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0xbc>
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a71      	ldr	r2, [pc, #452]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b6f      	ldr	r3, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6e      	ldr	r2, [pc, #440]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 8002854:	4b6b      	ldr	r3, [pc, #428]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6a      	ldr	r2, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a67      	ldr	r2, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fcc2 	bl	80011fc <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fcbe 	bl	80011fc <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1fa      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b5d      	ldr	r3, [pc, #372]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xe4>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe fcae 	bl	80011fc <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fcaa 	bl	80011fc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1e6      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x10c>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d2:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x18c>
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x176>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1ba      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4939      	ldr	r1, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_RCC_OscConfig+0x270>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe fc63 	bl	80011fc <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe fc5f 	bl	80011fc <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e19b      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4927      	ldr	r1, [pc, #156]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <HAL_RCC_OscConfig+0x270>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fc42 	bl	80011fc <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe fc3e 	bl	80011fc <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e17a      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d03a      	beq.n	8002a1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d019      	beq.n	80029e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_RCC_OscConfig+0x274>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe fc22 	bl	80011fc <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe fc1e 	bl	80011fc <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e15a      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029da:	2001      	movs	r0, #1
 80029dc:	f000 fac6 	bl	8002f6c <RCC_Delay>
 80029e0:	e01c      	b.n	8002a1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_RCC_OscConfig+0x274>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7fe fc08 	bl	80011fc <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ee:	e00f      	b.n	8002a10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7fe fc04 	bl	80011fc <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d908      	bls.n	8002a10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e140      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	42420000 	.word	0x42420000
 8002a0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	4b9e      	ldr	r3, [pc, #632]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e9      	bne.n	80029f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a6 	beq.w	8002b76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2e:	4b97      	ldr	r3, [pc, #604]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b94      	ldr	r3, [pc, #592]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a93      	ldr	r2, [pc, #588]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	61d3      	str	r3, [r2, #28]
 8002a46:	4b91      	ldr	r3, [pc, #580]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b8e      	ldr	r3, [pc, #568]	; (8002c90 <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b8b      	ldr	r3, [pc, #556]	; (8002c90 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a8a      	ldr	r2, [pc, #552]	; (8002c90 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fbc5 	bl	80011fc <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fbc1 	bl	80011fc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0fd      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b81      	ldr	r3, [pc, #516]	; (8002c90 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x312>
 8002a9c:	4b7b      	ldr	r3, [pc, #492]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a7a      	ldr	r2, [pc, #488]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	e02d      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x334>
 8002ab2:	4b76      	ldr	r3, [pc, #472]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a75      	ldr	r2, [pc, #468]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6213      	str	r3, [r2, #32]
 8002abe:	4b73      	ldr	r3, [pc, #460]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a72      	ldr	r2, [pc, #456]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	e01c      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x356>
 8002ad4:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a6c      	ldr	r2, [pc, #432]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a69      	ldr	r2, [pc, #420]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002aee:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b64      	ldr	r3, [pc, #400]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a63      	ldr	r2, [pc, #396]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fb75 	bl	80011fc <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fb71 	bl	80011fc <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0ab      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	4b57      	ldr	r3, [pc, #348]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ee      	beq.n	8002b16 <HAL_RCC_OscConfig+0x37e>
 8002b38:	e014      	b.n	8002b64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fb5f 	bl	80011fc <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fb5b 	bl	80011fc <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e095      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4a47      	ldr	r2, [pc, #284]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8081 	beq.w	8002c82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b80:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d061      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d146      	bne.n	8002c22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <HAL_RCC_OscConfig+0x4fc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fb2f 	bl	80011fc <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fb2b 	bl	80011fc <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e067      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d108      	bne.n	8002bdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bca:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	492d      	ldr	r1, [pc, #180]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a19      	ldr	r1, [r3, #32]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	430b      	orrs	r3, r1
 8002bee:	4927      	ldr	r1, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x4fc>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe faff 	bl	80011fc <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fafb 	bl	80011fc <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e037      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x46a>
 8002c20:	e02f      	b.n	8002c82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <HAL_RCC_OscConfig+0x4fc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fe fae8 	bl	80011fc <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe fae4 	bl	80011fc <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e020      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x498>
 8002c4e:	e018      	b.n	8002c82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e013      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40007000 	.word	0x40007000
 8002c94:	42420060 	.word	0x42420060

08002c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0d0      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d910      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 0207 	bic.w	r2, r3, #7
 8002cc2:	4965      	ldr	r1, [pc, #404]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0b8      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	494d      	ldr	r1, [pc, #308]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d040      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d115      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e073      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06b      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4936      	ldr	r1, [pc, #216]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7fe fa38 	bl	80011fc <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe fa34 	bl	80011fc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e053      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d210      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4922      	ldr	r1, [pc, #136]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e032      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4916      	ldr	r1, [pc, #88]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e26:	f000 f821 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	5cd3      	ldrb	r3, [r2, r3]
 8002e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_RCC_ClockConfig+0x1cc>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1d0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe f996 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	080073dc 	.word	0x080073dc
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000004 	.word	0x20000004

08002e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b490      	push	{r4, r7}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e74:	1d3c      	adds	r4, r7, #4
 8002e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e96:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x40>
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x46>
 8002eaa:	e02d      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eae:	623b      	str	r3, [r7, #32]
      break;
 8002eb0:	e02d      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	0c9b      	lsrs	r3, r3, #18
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ec4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	0c5b      	lsrs	r3, r3, #17
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ede:	4413      	add	r3, r2
 8002ee0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ee4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eea:	fb02 f203 	mul.w	r2, r2, r3
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	e004      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	623b      	str	r3, [r7, #32]
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f0a:	623b      	str	r3, [r7, #32]
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc90      	pop	{r4, r7}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	08007380 	.word	0x08007380
 8002f20:	08007390 	.word	0x08007390
 8002f24:	40021000 	.word	0x40021000
 8002f28:	007a1200 	.word	0x007a1200
 8002f2c:	003d0900 	.word	0x003d0900

08002f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000000 	.word	0x20000000

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f48:	f7ff fff2 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4601      	mov	r1, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4a03      	ldr	r2, [pc, #12]	; (8002f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	080073ec 	.word	0x080073ec

08002f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <RCC_Delay+0x34>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <RCC_Delay+0x38>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0a5b      	lsrs	r3, r3, #9
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f88:	bf00      	nop
  }
  while (Delay --);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1e5a      	subs	r2, r3, #1
 8002f8e:	60fa      	str	r2, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f9      	bne.n	8002f88 <RCC_Delay+0x1c>
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	10624dd3 	.word	0x10624dd3

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d07d      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4a4b      	ldr	r2, [pc, #300]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	4b46      	ldr	r3, [pc, #280]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d118      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a42      	ldr	r2, [pc, #264]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003008:	f7fe f8f8 	bl	80011fc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	e008      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fe f8f4 	bl	80011fc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e06d      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003036:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d02e      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d027      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800304c:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800305c:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003062:	4a29      	ldr	r2, [pc, #164]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d014      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe f8c3 	bl	80011fc <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe f8bf 	bl	80011fc <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e036      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ee      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309c:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4917      	ldr	r1, [pc, #92]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	490b      	ldr	r1, [pc, #44]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4904      	ldr	r1, [pc, #16]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
 8003110:	42420440 	.word	0x42420440

08003114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e053      	b.n	80031ce <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fd faf7 	bl	8000734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	ea42 0103 	orr.w	r1, r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	0c1a      	lsrs	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f002 0204 	and.w	r2, r2, #4
 80031ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e01d      	b.n	8003224 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fd fe63 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 fbb5 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e01d      	b.n	800327a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f815 	bl	8003282 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f000 fb8a 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e01d      	b.n	80032e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f815 	bl	80032ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f000 fb56 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fdb8 	bl	8003e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a10      	ldr	r2, [pc, #64]	; (800335c <HAL_TIM_PWM_Start+0x60>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d107      	bne.n	800332e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d007      	beq.n	8003350 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00

08003360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0202 	mvn.w	r2, #2
 800338c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fad3 	bl	800394e <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fac6 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fad5 	bl	8003960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0204 	mvn.w	r2, #4
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 faa9 	bl	800394e <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa9c 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 faab 	bl	8003960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b08      	cmp	r3, #8
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0208 	mvn.w	r2, #8
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2204      	movs	r2, #4
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa7f 	bl	800394e <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa72 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa81 	bl	8003960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b10      	cmp	r3, #16
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0210 	mvn.w	r2, #16
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2208      	movs	r2, #8
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa55 	bl	800394e <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa48 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fa57 	bl	8003960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0201 	mvn.w	r2, #1
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa23 	bl	800392a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fd7c 	bl	8004008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d10e      	bne.n	800353c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d107      	bne.n	800353c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa1b 	bl	8003972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b20      	cmp	r3, #32
 8003556:	d107      	bne.n	8003568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0220 	mvn.w	r2, #32
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fd47 	bl	8003ff6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003586:	2302      	movs	r3, #2
 8003588:	e04e      	b.n	8003628 <HAL_TIM_OC_ConfigChannel+0xb8>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	d839      	bhi.n	8003614 <HAL_TIM_OC_ConfigChannel+0xa4>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	08003615 	.word	0x08003615
 80035b0:	08003615 	.word	0x08003615
 80035b4:	08003615 	.word	0x08003615
 80035b8:	080035eb 	.word	0x080035eb
 80035bc:	08003615 	.word	0x08003615
 80035c0:	08003615 	.word	0x08003615
 80035c4:	08003615 	.word	0x08003615
 80035c8:	080035f9 	.word	0x080035f9
 80035cc:	08003615 	.word	0x08003615
 80035d0:	08003615 	.word	0x08003615
 80035d4:	08003615 	.word	0x08003615
 80035d8:	08003607 	.word	0x08003607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fa30 	bl	8003a48 <TIM_OC1_SetConfig>
      break;
 80035e8:	e015      	b.n	8003616 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fa8f 	bl	8003b14 <TIM_OC2_SetConfig>
      break;
 80035f6:	e00e      	b.n	8003616 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 faf2 	bl	8003be8 <TIM_OC3_SetConfig>
      break;
 8003604:	e007      	b.n	8003616 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fb55 	bl	8003cbc <TIM_OC4_SetConfig>
      break;
 8003612:	e000      	b.n	8003616 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003614:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003646:	2302      	movs	r3, #2
 8003648:	e0b4      	b.n	80037b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	f200 809f 	bhi.w	80037a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080037a1 	.word	0x080037a1
 8003670:	080037a1 	.word	0x080037a1
 8003674:	080037a1 	.word	0x080037a1
 8003678:	080036dd 	.word	0x080036dd
 800367c:	080037a1 	.word	0x080037a1
 8003680:	080037a1 	.word	0x080037a1
 8003684:	080037a1 	.word	0x080037a1
 8003688:	0800371f 	.word	0x0800371f
 800368c:	080037a1 	.word	0x080037a1
 8003690:	080037a1 	.word	0x080037a1
 8003694:	080037a1 	.word	0x080037a1
 8003698:	0800375f 	.word	0x0800375f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f9d0 	bl	8003a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0204 	bic.w	r2, r2, #4
 80036c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6999      	ldr	r1, [r3, #24]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	619a      	str	r2, [r3, #24]
      break;
 80036da:	e062      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fa16 	bl	8003b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6999      	ldr	r1, [r3, #24]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	021a      	lsls	r2, r3, #8
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	619a      	str	r2, [r3, #24]
      break;
 800371c:	e041      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fa5f 	bl	8003be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0208 	orr.w	r2, r2, #8
 8003738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0204 	bic.w	r2, r2, #4
 8003748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69d9      	ldr	r1, [r3, #28]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	61da      	str	r2, [r3, #28]
      break;
 800375c:	e021      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 faa9 	bl	8003cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	61da      	str	r2, [r3, #28]
      break;
 800379e:	e000      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80037a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIM_ConfigClockSource+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e0a6      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x166>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d067      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x120>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d80b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x6c>
 8003810:	2b10      	cmp	r3, #16
 8003812:	d073      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0x140>
 8003814:	2b10      	cmp	r3, #16
 8003816:	d802      	bhi.n	800381e <HAL_TIM_ConfigClockSource+0x62>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d06f      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800381c:	e078      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800381e:	2b20      	cmp	r3, #32
 8003820:	d06c      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0x140>
 8003822:	2b30      	cmp	r3, #48	; 0x30
 8003824:	d06a      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003826:	e073      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003828:	2b70      	cmp	r3, #112	; 0x70
 800382a:	d00d      	beq.n	8003848 <HAL_TIM_ConfigClockSource+0x8c>
 800382c:	2b70      	cmp	r3, #112	; 0x70
 800382e:	d804      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x7e>
 8003830:	2b50      	cmp	r3, #80	; 0x50
 8003832:	d033      	beq.n	800389c <HAL_TIM_ConfigClockSource+0xe0>
 8003834:	2b60      	cmp	r3, #96	; 0x60
 8003836:	d041      	beq.n	80038bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003838:	e06a      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d066      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x152>
 8003840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003844:	d017      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003846:	e063      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f000 faf5 	bl	8003e46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800386a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	609a      	str	r2, [r3, #8]
      break;
 8003874:	e04c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6899      	ldr	r1, [r3, #8]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f000 fade 	bl	8003e46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003898:	609a      	str	r2, [r3, #8]
      break;
 800389a:	e039      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f000 fa55 	bl	8003d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2150      	movs	r1, #80	; 0x50
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 faac 	bl	8003e12 <TIM_ITRx_SetConfig>
      break;
 80038ba:	e029      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f000 fa73 	bl	8003db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2160      	movs	r1, #96	; 0x60
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fa9c 	bl	8003e12 <TIM_ITRx_SetConfig>
      break;
 80038da:	e019      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	461a      	mov	r2, r3
 80038ea:	f000 fa35 	bl	8003d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2140      	movs	r1, #64	; 0x40
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fa8c 	bl	8003e12 <TIM_ITRx_SetConfig>
      break;
 80038fa:	e009      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f000 fa83 	bl	8003e12 <TIM_ITRx_SetConfig>
      break;
 800390c:	e000      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800390e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <TIM_Base_SetConfig+0xb8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x30>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x30>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <TIM_Base_SetConfig+0xbc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x30>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <TIM_Base_SetConfig+0xc0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <TIM_Base_SetConfig+0xb8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0x62>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0x62>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <TIM_Base_SetConfig+0xbc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <TIM_Base_SetConfig+0xc0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <TIM_Base_SetConfig+0xb8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800

08003a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f023 0201 	bic.w	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f023 0302 	bic.w	r3, r3, #2
 8003a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <TIM_OC1_SetConfig+0xc8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10c      	bne.n	8003abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0308 	bic.w	r3, r3, #8
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <TIM_OC1_SetConfig+0xc8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d111      	bne.n	8003aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40012c00 	.word	0x40012c00

08003b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0210 	bic.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <TIM_OC2_SetConfig+0xd0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10d      	bne.n	8003b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <TIM_OC2_SetConfig+0xd0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d113      	bne.n	8003bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	40012c00 	.word	0x40012c00

08003be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <TIM_OC3_SetConfig+0xd0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10d      	bne.n	8003c62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <TIM_OC3_SetConfig+0xd0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d113      	bne.n	8003c92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40012c00 	.word	0x40012c00

08003cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <TIM_OC4_SetConfig+0x98>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d109      	bne.n	8003d30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	019b      	lsls	r3, r3, #6
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	40012c00 	.word	0x40012c00

08003d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f023 0201 	bic.w	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f023 030a 	bic.w	r3, r3, #10
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 0210 	bic.w	r2, r3, #16
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	031b      	lsls	r3, r3, #12
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003df0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f043 0307 	orr.w	r3, r3, #7
 8003e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	609a      	str	r2, [r3, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	021a      	lsls	r2, r3, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	609a      	str	r2, [r3, #8]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	2201      	movs	r2, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e032      	b.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e03d      	b.n	8003fec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800401a:	b084      	sub	sp, #16
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	f107 0014 	add.w	r0, r7, #20
 8004028:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	b004      	add	sp, #16
 8004038:	4770      	bx	lr

0800403a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004042:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004046:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800404e:	b29a      	uxth	r2, r3
 8004050:	89fb      	ldrh	r3, [r7, #14]
 8004052:	4313      	orrs	r3, r2
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004070:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004074:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800407c:	b29b      	uxth	r3, r3
 800407e:	b21a      	sxth	r2, r3
 8004080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004084:	43db      	mvns	r3, r3
 8004086:	b21b      	sxth	r3, r3
 8004088:	4013      	ands	r3, r2
 800408a:	b21b      	sxth	r3, r3
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040b8:	b084      	sub	sp, #16
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	f107 0014 	add.w	r0, r7, #20
 80040c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ffa5 	bl	800403a <USB_EnableGlobalInt>

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040fc:	b004      	add	sp, #16
 80040fe:	4770      	bx	lr

08004100 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004100:	b490      	push	{r4, r7}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	78db      	ldrb	r3, [r3, #3]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d819      	bhi.n	8004162 <USB_ActivateEndpoint+0x62>
 800412e:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <USB_ActivateEndpoint+0x34>)
 8004130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004134:	08004145 	.word	0x08004145
 8004138:	08004159 	.word	0x08004159
 800413c:	08004169 	.word	0x08004169
 8004140:	0800414f 	.word	0x0800414f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004144:	89bb      	ldrh	r3, [r7, #12]
 8004146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414a:	81bb      	strh	r3, [r7, #12]
      break;
 800414c:	e00d      	b.n	800416a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800414e:	89bb      	ldrh	r3, [r7, #12]
 8004150:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004154:	81bb      	strh	r3, [r7, #12]
      break;
 8004156:	e008      	b.n	800416a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004158:	89bb      	ldrh	r3, [r7, #12]
 800415a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415e:	81bb      	strh	r3, [r7, #12]
      break;
 8004160:	e003      	b.n	800416a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      break;
 8004166:	e000      	b.n	800416a <USB_ActivateEndpoint+0x6a>
      break;
 8004168:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	441a      	add	r2, r3
 8004174:	89bb      	ldrh	r3, [r7, #12]
 8004176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800417e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004186:	b29b      	uxth	r3, r3
 8004188:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b29c      	uxth	r4, r3
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	4b8a      	ldr	r3, [pc, #552]	; (80043e0 <USB_ActivateEndpoint+0x2e0>)
 80041b8:	4323      	orrs	r3, r4
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	7b1b      	ldrb	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 8112 	bne.w	80043ec <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d067      	beq.n	80042a0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041d0:	687c      	ldr	r4, [r7, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d8:	b29b      	uxth	r3, r3
 80041da:	441c      	add	r4, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	4423      	add	r3, r4
 80041e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041e8:	461c      	mov	r4, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	88db      	ldrh	r3, [r3, #6]
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29c      	uxth	r4, r3
 8004206:	4623      	mov	r3, r4
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d014      	beq.n	800423a <USB_ActivateEndpoint+0x13a>
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	b29c      	uxth	r4, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	4b6c      	ldr	r3, [pc, #432]	; (80043e4 <USB_ActivateEndpoint+0x2e4>)
 8004234:	4323      	orrs	r3, r4
 8004236:	b29b      	uxth	r3, r3
 8004238:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	78db      	ldrb	r3, [r3, #3]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d018      	beq.n	8004274 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004258:	b29c      	uxth	r4, r3
 800425a:	f084 0320 	eor.w	r3, r4, #32
 800425e:	b29c      	uxth	r4, r3
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	4b5d      	ldr	r3, [pc, #372]	; (80043e0 <USB_ActivateEndpoint+0x2e0>)
 800426c:	4323      	orrs	r3, r4
 800426e:	b29b      	uxth	r3, r3
 8004270:	8013      	strh	r3, [r2, #0]
 8004272:	e22b      	b.n	80046cc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428a:	b29c      	uxth	r4, r3
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	4b52      	ldr	r3, [pc, #328]	; (80043e0 <USB_ActivateEndpoint+0x2e0>)
 8004298:	4323      	orrs	r3, r4
 800429a:	b29b      	uxth	r3, r3
 800429c:	8013      	strh	r3, [r2, #0]
 800429e:	e215      	b.n	80046cc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042a0:	687c      	ldr	r4, [r7, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	441c      	add	r4, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	4423      	add	r3, r4
 80042b4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80042b8:	461c      	mov	r4, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	88db      	ldrh	r3, [r3, #6]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80042c8:	687c      	ldr	r4, [r7, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	441c      	add	r4, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	4423      	add	r3, r4
 80042dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042e0:	461c      	mov	r4, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10e      	bne.n	8004308 <USB_ActivateEndpoint+0x208>
 80042ea:	8823      	ldrh	r3, [r4, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8023      	strh	r3, [r4, #0]
 80042f6:	8823      	ldrh	r3, [r4, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004302:	b29b      	uxth	r3, r3
 8004304:	8023      	strh	r3, [r4, #0]
 8004306:	e02d      	b.n	8004364 <USB_ActivateEndpoint+0x264>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b3e      	cmp	r3, #62	; 0x3e
 800430e:	d812      	bhi.n	8004336 <USB_ActivateEndpoint+0x236>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <USB_ActivateEndpoint+0x22a>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	3301      	adds	r3, #1
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	b29b      	uxth	r3, r3
 800432e:	029b      	lsls	r3, r3, #10
 8004330:	b29b      	uxth	r3, r3
 8004332:	8023      	strh	r3, [r4, #0]
 8004334:	e016      	b.n	8004364 <USB_ActivateEndpoint+0x264>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2b00      	cmp	r3, #0
 8004348:	d102      	bne.n	8004350 <USB_ActivateEndpoint+0x250>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3b01      	subs	r3, #1
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	b29b      	uxth	r3, r3
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	b29b      	uxth	r3, r3
 8004358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800435c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004360:	b29b      	uxth	r3, r3
 8004362:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29c      	uxth	r4, r3
 8004372:	4623      	mov	r3, r4
 8004374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d014      	beq.n	80043a6 <USB_ActivateEndpoint+0x2a6>
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	b29c      	uxth	r4, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	441a      	add	r2, r3
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <USB_ActivateEndpoint+0x2e8>)
 80043a0:	4323      	orrs	r3, r4
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	b29c      	uxth	r4, r3
 80043be:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80043c2:	b29c      	uxth	r4, r3
 80043c4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80043c8:	b29c      	uxth	r4, r3
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	441a      	add	r2, r3
 80043d4:	4b02      	ldr	r3, [pc, #8]	; (80043e0 <USB_ActivateEndpoint+0x2e0>)
 80043d6:	4323      	orrs	r3, r4
 80043d8:	b29b      	uxth	r3, r3
 80043da:	8013      	strh	r3, [r2, #0]
 80043dc:	e176      	b.n	80046cc <USB_ActivateEndpoint+0x5cc>
 80043de:	bf00      	nop
 80043e0:	ffff8080 	.word	0xffff8080
 80043e4:	ffff80c0 	.word	0xffff80c0
 80043e8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	b29c      	uxth	r4, r3
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	4b96      	ldr	r3, [pc, #600]	; (8004668 <USB_ActivateEndpoint+0x568>)
 8004410:	4323      	orrs	r3, r4
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004416:	687c      	ldr	r4, [r7, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441e:	b29b      	uxth	r3, r3
 8004420:	441c      	add	r4, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	4423      	add	r3, r4
 800442a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800442e:	461c      	mov	r4, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	891b      	ldrh	r3, [r3, #8]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	b29b      	uxth	r3, r3
 800443c:	8023      	strh	r3, [r4, #0]
 800443e:	687c      	ldr	r4, [r7, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004446:	b29b      	uxth	r3, r3
 8004448:	441c      	add	r4, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	4423      	add	r3, r4
 8004452:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004456:	461c      	mov	r4, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	895b      	ldrh	r3, [r3, #10]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	b29b      	uxth	r3, r3
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 8088 	bne.w	8004580 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29c      	uxth	r4, r3
 800447e:	4623      	mov	r3, r4
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d014      	beq.n	80044b2 <USB_ActivateEndpoint+0x3b2>
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	b29c      	uxth	r4, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	441a      	add	r2, r3
 80044aa:	4b70      	ldr	r3, [pc, #448]	; (800466c <USB_ActivateEndpoint+0x56c>)
 80044ac:	4323      	orrs	r3, r4
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29c      	uxth	r4, r3
 80044c0:	4623      	mov	r3, r4
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <USB_ActivateEndpoint+0x3f4>
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e0:	b29c      	uxth	r4, r3
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	441a      	add	r2, r3
 80044ec:	4b60      	ldr	r3, [pc, #384]	; (8004670 <USB_ActivateEndpoint+0x570>)
 80044ee:	4323      	orrs	r3, r4
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	b29c      	uxth	r4, r3
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	4b56      	ldr	r3, [pc, #344]	; (8004670 <USB_ActivateEndpoint+0x570>)
 8004518:	4323      	orrs	r3, r4
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	b29c      	uxth	r4, r3
 8004536:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800453a:	b29c      	uxth	r4, r3
 800453c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004540:	b29c      	uxth	r4, r3
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	441a      	add	r2, r3
 800454c:	4b49      	ldr	r3, [pc, #292]	; (8004674 <USB_ActivateEndpoint+0x574>)
 800454e:	4323      	orrs	r3, r4
 8004550:	b29b      	uxth	r3, r3
 8004552:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456a:	b29c      	uxth	r4, r3
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <USB_ActivateEndpoint+0x574>)
 8004578:	4323      	orrs	r3, r4
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]
 800457e:	e0a5      	b.n	80046cc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29c      	uxth	r4, r3
 800458e:	4623      	mov	r3, r4
 8004590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d014      	beq.n	80045c2 <USB_ActivateEndpoint+0x4c2>
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	b29c      	uxth	r4, r3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	4b2c      	ldr	r3, [pc, #176]	; (800466c <USB_ActivateEndpoint+0x56c>)
 80045bc:	4323      	orrs	r3, r4
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29c      	uxth	r4, r3
 80045d0:	4623      	mov	r3, r4
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d014      	beq.n	8004604 <USB_ActivateEndpoint+0x504>
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f0:	b29c      	uxth	r4, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <USB_ActivateEndpoint+0x570>)
 80045fe:	4323      	orrs	r3, r4
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	b29c      	uxth	r4, r3
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	441a      	add	r2, r3
 8004626:	4b11      	ldr	r3, [pc, #68]	; (800466c <USB_ActivateEndpoint+0x56c>)
 8004628:	4323      	orrs	r3, r4
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	78db      	ldrb	r3, [r3, #3]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d020      	beq.n	8004678 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800464c:	b29c      	uxth	r4, r3
 800464e:	f084 0320 	eor.w	r3, r4, #32
 8004652:	b29c      	uxth	r4, r3
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	441a      	add	r2, r3
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <USB_ActivateEndpoint+0x574>)
 8004660:	4323      	orrs	r3, r4
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]
 8004666:	e01c      	b.n	80046a2 <USB_ActivateEndpoint+0x5a2>
 8004668:	ffff8180 	.word	0xffff8180
 800466c:	ffffc080 	.word	0xffffc080
 8004670:	ffff80c0 	.word	0xffff80c0
 8004674:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468e:	b29c      	uxth	r4, r3
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <USB_ActivateEndpoint+0x5d8>)
 800469c:	4323      	orrs	r3, r4
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	b29c      	uxth	r4, r3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <USB_ActivateEndpoint+0x5d8>)
 80046c6:	4323      	orrs	r3, r4
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc90      	pop	{r4, r7}
 80046d6:	4770      	bx	lr
 80046d8:	ffff8080 	.word	0xffff8080

080046dc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046dc:	b490      	push	{r4, r7}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	7b1b      	ldrb	r3, [r3, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d171      	bne.n	80047d2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d036      	beq.n	8004764 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29c      	uxth	r4, r3
 8004704:	4623      	mov	r3, r4
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d014      	beq.n	8004738 <USB_DeactivateEndpoint+0x5c>
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004724:	b29c      	uxth	r4, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	4b6b      	ldr	r3, [pc, #428]	; (80048e0 <USB_DeactivateEndpoint+0x204>)
 8004732:	4323      	orrs	r3, r4
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474e:	b29c      	uxth	r4, r3
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	4b62      	ldr	r3, [pc, #392]	; (80048e4 <USB_DeactivateEndpoint+0x208>)
 800475c:	4323      	orrs	r3, r4
 800475e:	b29b      	uxth	r3, r3
 8004760:	8013      	strh	r3, [r2, #0]
 8004762:	e144      	b.n	80049ee <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29c      	uxth	r4, r3
 8004772:	4623      	mov	r3, r4
 8004774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d014      	beq.n	80047a6 <USB_DeactivateEndpoint+0xca>
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	b29c      	uxth	r4, r3
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	4b52      	ldr	r3, [pc, #328]	; (80048e8 <USB_DeactivateEndpoint+0x20c>)
 80047a0:	4323      	orrs	r3, r4
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	b29c      	uxth	r4, r3
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <USB_DeactivateEndpoint+0x208>)
 80047ca:	4323      	orrs	r3, r4
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
 80047d0:	e10d      	b.n	80049ee <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	785b      	ldrb	r3, [r3, #1]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8088 	bne.w	80048ec <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29c      	uxth	r4, r3
 80047ea:	4623      	mov	r3, r4
 80047ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d014      	beq.n	800481e <USB_DeactivateEndpoint+0x142>
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	b29c      	uxth	r4, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <USB_DeactivateEndpoint+0x20c>)
 8004818:	4323      	orrs	r3, r4
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29c      	uxth	r4, r3
 800482c:	4623      	mov	r3, r4
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d014      	beq.n	8004860 <USB_DeactivateEndpoint+0x184>
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484c:	b29c      	uxth	r4, r3
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <USB_DeactivateEndpoint+0x204>)
 800485a:	4323      	orrs	r3, r4
 800485c:	b29b      	uxth	r3, r3
 800485e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	b29c      	uxth	r4, r3
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <USB_DeactivateEndpoint+0x204>)
 8004884:	4323      	orrs	r3, r4
 8004886:	b29b      	uxth	r3, r3
 8004888:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a0:	b29c      	uxth	r4, r3
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <USB_DeactivateEndpoint+0x208>)
 80048ae:	4323      	orrs	r3, r4
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ca:	b29c      	uxth	r4, r3
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <USB_DeactivateEndpoint+0x208>)
 80048d8:	4323      	orrs	r3, r4
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]
 80048de:	e086      	b.n	80049ee <USB_DeactivateEndpoint+0x312>
 80048e0:	ffff80c0 	.word	0xffff80c0
 80048e4:	ffff8080 	.word	0xffff8080
 80048e8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29c      	uxth	r4, r3
 80048fa:	4623      	mov	r3, r4
 80048fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d014      	beq.n	800492e <USB_DeactivateEndpoint+0x252>
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	b29c      	uxth	r4, r3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	441a      	add	r2, r3
 8004926:	4b35      	ldr	r3, [pc, #212]	; (80049fc <USB_DeactivateEndpoint+0x320>)
 8004928:	4323      	orrs	r3, r4
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29c      	uxth	r4, r3
 800493c:	4623      	mov	r3, r4
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d014      	beq.n	8004970 <USB_DeactivateEndpoint+0x294>
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495c:	b29c      	uxth	r4, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <USB_DeactivateEndpoint+0x324>)
 800496a:	4323      	orrs	r3, r4
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	b29c      	uxth	r4, r3
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <USB_DeactivateEndpoint+0x320>)
 8004994:	4323      	orrs	r3, r4
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b0:	b29c      	uxth	r4, r3
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	441a      	add	r2, r3
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <USB_DeactivateEndpoint+0x328>)
 80049be:	4323      	orrs	r3, r4
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	b29c      	uxth	r4, r3
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <USB_DeactivateEndpoint+0x328>)
 80049e8:	4323      	orrs	r3, r4
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc90      	pop	{r4, r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	ffffc080 	.word	0xffffc080
 8004a00:	ffff80c0 	.word	0xffff80c0
 8004a04:	ffff8080 	.word	0xffff8080

08004a08 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b08d      	sub	sp, #52	; 0x34
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	f040 8160 	bne.w	8004cdc <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d909      	bls.n	8004a3c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	1ad2      	subs	r2, r2, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	619a      	str	r2, [r3, #24]
 8004a3a:	e005      	b.n	8004a48 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	7b1b      	ldrb	r3, [r3, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d119      	bne.n	8004a84 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6959      	ldr	r1, [r3, #20]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	88da      	ldrh	r2, [r3, #6]
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fba2 	bl	80051a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a62:	687c      	ldr	r4, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	441c      	add	r4, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	4423      	add	r3, r4
 8004a76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a7a:	461c      	mov	r4, r3
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8023      	strh	r3, [r4, #0]
 8004a82:	e10f      	b.n	8004ca4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d065      	beq.n	8004b66 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a9a:	687c      	ldr	r4, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d148      	bne.n	8004b36 <USB_EPStartXfer+0x12e>
 8004aa4:	687c      	ldr	r4, [r7, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	441c      	add	r4, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	4423      	add	r3, r4
 8004ab8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004abc:	461c      	mov	r4, r3
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10e      	bne.n	8004ae2 <USB_EPStartXfer+0xda>
 8004ac4:	8823      	ldrh	r3, [r4, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	8023      	strh	r3, [r4, #0]
 8004ad0:	8823      	ldrh	r3, [r4, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8023      	strh	r3, [r4, #0]
 8004ae0:	e03d      	b.n	8004b5e <USB_EPStartXfer+0x156>
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ae6:	d810      	bhi.n	8004b0a <USB_EPStartXfer+0x102>
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <USB_EPStartXfer+0xf6>
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	3301      	adds	r3, #1
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8023      	strh	r3, [r4, #0]
 8004b08:	e029      	b.n	8004b5e <USB_EPStartXfer+0x156>
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <USB_EPStartXfer+0x118>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	029b      	lsls	r3, r3, #10
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8023      	strh	r3, [r4, #0]
 8004b34:	e013      	b.n	8004b5e <USB_EPStartXfer+0x156>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10f      	bne.n	8004b5e <USB_EPStartXfer+0x156>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	441c      	add	r4, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	4423      	add	r3, r4
 8004b50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	895b      	ldrh	r3, [r3, #10]
 8004b62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b64:	e063      	b.n	8004c2e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d148      	bne.n	8004c00 <USB_EPStartXfer+0x1f8>
 8004b6e:	687c      	ldr	r4, [r7, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	441c      	add	r4, r3
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	4423      	add	r3, r4
 8004b82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b86:	461c      	mov	r4, r3
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10e      	bne.n	8004bac <USB_EPStartXfer+0x1a4>
 8004b8e:	8823      	ldrh	r3, [r4, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8023      	strh	r3, [r4, #0]
 8004b9a:	8823      	ldrh	r3, [r4, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8023      	strh	r3, [r4, #0]
 8004baa:	e03d      	b.n	8004c28 <USB_EPStartXfer+0x220>
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb0:	d810      	bhi.n	8004bd4 <USB_EPStartXfer+0x1cc>
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	623b      	str	r3, [r7, #32]
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <USB_EPStartXfer+0x1c0>
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	623b      	str	r3, [r7, #32]
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8023      	strh	r3, [r4, #0]
 8004bd2:	e029      	b.n	8004c28 <USB_EPStartXfer+0x220>
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <USB_EPStartXfer+0x1e2>
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	029b      	lsls	r3, r3, #10
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8023      	strh	r3, [r4, #0]
 8004bfe:	e013      	b.n	8004c28 <USB_EPStartXfer+0x220>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d10f      	bne.n	8004c28 <USB_EPStartXfer+0x220>
 8004c08:	687c      	ldr	r4, [r7, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	441c      	add	r4, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4423      	add	r3, r4
 8004c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c20:	461c      	mov	r4, r3
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	891b      	ldrh	r3, [r3, #8]
 8004c2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6959      	ldr	r1, [r3, #20]
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fab4 	bl	80051a6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d115      	bne.n	8004c72 <USB_EPStartXfer+0x26a>
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5c:	b29c      	uxth	r4, r3
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	4b9a      	ldr	r3, [pc, #616]	; (8004ed4 <USB_EPStartXfer+0x4cc>)
 8004c6a:	4323      	orrs	r3, r4
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]
 8004c70:	e018      	b.n	8004ca4 <USB_EPStartXfer+0x29c>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d114      	bne.n	8004ca4 <USB_EPStartXfer+0x29c>
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c90:	b29c      	uxth	r4, r3
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	4b8e      	ldr	r3, [pc, #568]	; (8004ed8 <USB_EPStartXfer+0x4d0>)
 8004c9e:	4323      	orrs	r3, r4
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cba:	b29c      	uxth	r4, r3
 8004cbc:	f084 0310 	eor.w	r3, r4, #16
 8004cc0:	b29c      	uxth	r4, r3
 8004cc2:	f084 0320 	eor.w	r3, r4, #32
 8004cc6:	b29c      	uxth	r4, r3
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	4b82      	ldr	r3, [pc, #520]	; (8004edc <USB_EPStartXfer+0x4d4>)
 8004cd4:	4323      	orrs	r3, r4
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	8013      	strh	r3, [r2, #0]
 8004cda:	e146      	b.n	8004f6a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d909      	bls.n	8004cfc <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	1ad2      	subs	r2, r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	619a      	str	r2, [r3, #24]
 8004cfa:	e005      	b.n	8004d08 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2200      	movs	r2, #0
 8004d06:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	7b1b      	ldrb	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d148      	bne.n	8004da2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004d10:	687c      	ldr	r4, [r7, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	441c      	add	r4, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	4423      	add	r3, r4
 8004d24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d28:	461c      	mov	r4, r3
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10e      	bne.n	8004d4e <USB_EPStartXfer+0x346>
 8004d30:	8823      	ldrh	r3, [r4, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8023      	strh	r3, [r4, #0]
 8004d3c:	8823      	ldrh	r3, [r4, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8023      	strh	r3, [r4, #0]
 8004d4c:	e0f2      	b.n	8004f34 <USB_EPStartXfer+0x52c>
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	2b3e      	cmp	r3, #62	; 0x3e
 8004d52:	d810      	bhi.n	8004d76 <USB_EPStartXfer+0x36e>
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <USB_EPStartXfer+0x362>
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	3301      	adds	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8023      	strh	r3, [r4, #0]
 8004d74:	e0de      	b.n	8004f34 <USB_EPStartXfer+0x52c>
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <USB_EPStartXfer+0x384>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	029b      	lsls	r3, r3, #10
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8023      	strh	r3, [r4, #0]
 8004da0:	e0c8      	b.n	8004f34 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d148      	bne.n	8004e3c <USB_EPStartXfer+0x434>
 8004daa:	687c      	ldr	r4, [r7, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	441c      	add	r4, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	4423      	add	r3, r4
 8004dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dc2:	461c      	mov	r4, r3
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10e      	bne.n	8004de8 <USB_EPStartXfer+0x3e0>
 8004dca:	8823      	ldrh	r3, [r4, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8023      	strh	r3, [r4, #0]
 8004dd6:	8823      	ldrh	r3, [r4, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	8023      	strh	r3, [r4, #0]
 8004de6:	e03d      	b.n	8004e64 <USB_EPStartXfer+0x45c>
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	2b3e      	cmp	r3, #62	; 0x3e
 8004dec:	d810      	bhi.n	8004e10 <USB_EPStartXfer+0x408>
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <USB_EPStartXfer+0x3fc>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	3301      	adds	r3, #1
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8023      	strh	r3, [r4, #0]
 8004e0e:	e029      	b.n	8004e64 <USB_EPStartXfer+0x45c>
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <USB_EPStartXfer+0x41e>
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	029b      	lsls	r3, r3, #10
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	8023      	strh	r3, [r4, #0]
 8004e3a:	e013      	b.n	8004e64 <USB_EPStartXfer+0x45c>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d10f      	bne.n	8004e64 <USB_EPStartXfer+0x45c>
 8004e44:	687c      	ldr	r4, [r7, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	441c      	add	r4, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	4423      	add	r3, r4
 8004e58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e5c:	461c      	mov	r4, r3
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8023      	strh	r3, [r4, #0]
 8004e64:	687c      	ldr	r4, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d14e      	bne.n	8004f0c <USB_EPStartXfer+0x504>
 8004e6e:	687c      	ldr	r4, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	441c      	add	r4, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4423      	add	r3, r4
 8004e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e86:	461c      	mov	r4, r3
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10e      	bne.n	8004eac <USB_EPStartXfer+0x4a4>
 8004e8e:	8823      	ldrh	r3, [r4, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	8023      	strh	r3, [r4, #0]
 8004e9a:	8823      	ldrh	r3, [r4, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	8023      	strh	r3, [r4, #0]
 8004eaa:	e043      	b.n	8004f34 <USB_EPStartXfer+0x52c>
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb0:	d816      	bhi.n	8004ee0 <USB_EPStartXfer+0x4d8>
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <USB_EPStartXfer+0x4c0>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	029b      	lsls	r3, r3, #10
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8023      	strh	r3, [r4, #0]
 8004ed2:	e02f      	b.n	8004f34 <USB_EPStartXfer+0x52c>
 8004ed4:	ffff80c0 	.word	0xffff80c0
 8004ed8:	ffffc080 	.word	0xffffc080
 8004edc:	ffff8080 	.word	0xffff8080
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <USB_EPStartXfer+0x4ee>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	029b      	lsls	r3, r3, #10
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8023      	strh	r3, [r4, #0]
 8004f0a:	e013      	b.n	8004f34 <USB_EPStartXfer+0x52c>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d10f      	bne.n	8004f34 <USB_EPStartXfer+0x52c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	441c      	add	r4, r3
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	4423      	add	r3, r4
 8004f26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	b29c      	uxth	r4, r3
 8004f4c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f50:	b29c      	uxth	r4, r3
 8004f52:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f56:	b29c      	uxth	r4, r3
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <USB_EPStartXfer+0x56c>)
 8004f64:	4323      	orrs	r3, r4
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3734      	adds	r7, #52	; 0x34
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd90      	pop	{r4, r7, pc}
 8004f74:	ffff8080 	.word	0xffff8080

08004f78 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f78:	b490      	push	{r4, r7}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d018      	beq.n	8004fbc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa0:	b29c      	uxth	r4, r3
 8004fa2:	f084 0310 	eor.w	r3, r4, #16
 8004fa6:	b29c      	uxth	r4, r3
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <USB_EPSetStall+0x80>)
 8004fb4:	4323      	orrs	r3, r4
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]
 8004fba:	e017      	b.n	8004fec <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	b29c      	uxth	r4, r3
 8004fd4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004fd8:	b29c      	uxth	r4, r3
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <USB_EPSetStall+0x80>)
 8004fe6:	4323      	orrs	r3, r4
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc90      	pop	{r4, r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	ffff8080 	.word	0xffff8080

08004ffc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ffc:	b490      	push	{r4, r7}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	7b1b      	ldrb	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d17d      	bne.n	800510a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03d      	beq.n	8005092 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29c      	uxth	r4, r3
 8005024:	4623      	mov	r3, r4
 8005026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d014      	beq.n	8005058 <USB_EPClearStall+0x5c>
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	b29c      	uxth	r4, r3
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	4b31      	ldr	r3, [pc, #196]	; (8005118 <USB_EPClearStall+0x11c>)
 8005052:	4323      	orrs	r3, r4
 8005054:	b29b      	uxth	r3, r3
 8005056:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	78db      	ldrb	r3, [r3, #3]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d054      	beq.n	800510a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005076:	b29c      	uxth	r4, r3
 8005078:	f084 0320 	eor.w	r3, r4, #32
 800507c:	b29c      	uxth	r4, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	441a      	add	r2, r3
 8005088:	4b24      	ldr	r3, [pc, #144]	; (800511c <USB_EPClearStall+0x120>)
 800508a:	4323      	orrs	r3, r4
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
 8005090:	e03b      	b.n	800510a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29c      	uxth	r4, r3
 80050a0:	4623      	mov	r3, r4
 80050a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d014      	beq.n	80050d4 <USB_EPClearStall+0xd8>
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c0:	b29c      	uxth	r4, r3
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	4b14      	ldr	r3, [pc, #80]	; (8005120 <USB_EPClearStall+0x124>)
 80050ce:	4323      	orrs	r3, r4
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	b29c      	uxth	r4, r3
 80050ec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80050f0:	b29c      	uxth	r4, r3
 80050f2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80050f6:	b29c      	uxth	r4, r3
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <USB_EPClearStall+0x120>)
 8005104:	4323      	orrs	r3, r4
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bc90      	pop	{r4, r7}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	ffff80c0 	.word	0xffff80c0
 800511c:	ffff8080 	.word	0xffff8080
 8005120:	ffffc080 	.word	0xffffc080

08005124 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2280      	movs	r2, #128	; 0x80
 800513a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005180:	b29b      	uxth	r3, r3
 8005182:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr

080051a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b08d      	sub	sp, #52	; 0x34
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	4611      	mov	r1, r2
 80051b2:	461a      	mov	r2, r3
 80051b4:	460b      	mov	r3, r1
 80051b6:	80fb      	strh	r3, [r7, #6]
 80051b8:	4613      	mov	r3, r2
 80051ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051bc:	88bb      	ldrh	r3, [r7, #4]
 80051be:	3301      	adds	r3, #1
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	005a      	lsls	r2, r3, #1
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	e01e      	b.n	800521e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	3301      	adds	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	b29a      	uxth	r2, r3
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	3302      	adds	r3, #2
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	3302      	adds	r3, #2
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	3301      	adds	r3, #1
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	3b01      	subs	r3, #1
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1dd      	bne.n	80051e0 <USB_WritePMA+0x3a>
  }
}
 8005224:	bf00      	nop
 8005226:	3734      	adds	r7, #52	; 0x34
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800522e:	b480      	push	{r7}
 8005230:	b08b      	sub	sp, #44	; 0x2c
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	4611      	mov	r1, r2
 800523a:	461a      	mov	r2, r3
 800523c:	460b      	mov	r3, r1
 800523e:	80fb      	strh	r3, [r7, #6]
 8005240:	4613      	mov	r3, r2
 8005242:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005244:	88bb      	ldrh	r3, [r7, #4]
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	005a      	lsls	r2, r3, #1
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005260:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
 8005266:	e01b      	b.n	80052a0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	3302      	adds	r3, #2
 8005274:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3301      	adds	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	b2da      	uxtb	r2, r3
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	3302      	adds	r3, #2
 8005298:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	3b01      	subs	r3, #1
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e0      	bne.n	8005268 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80052a6:	88bb      	ldrh	r3, [r7, #4]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	701a      	strb	r2, [r3, #0]
  }
}
 80052c2:	bf00      	nop
 80052c4:	372c      	adds	r7, #44	; 0x2c
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr

080052cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7c1b      	ldrb	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d115      	bne.n	8005310 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e8:	2202      	movs	r2, #2
 80052ea:	2181      	movs	r1, #129	; 0x81
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 fe84 	bl	8006ffa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052fc:	2202      	movs	r2, #2
 80052fe:	2101      	movs	r1, #1
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 fe7a 	bl	8006ffa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800530e:	e012      	b.n	8005336 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005310:	2340      	movs	r3, #64	; 0x40
 8005312:	2202      	movs	r2, #2
 8005314:	2181      	movs	r1, #129	; 0x81
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 fe6f 	bl	8006ffa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005322:	2340      	movs	r3, #64	; 0x40
 8005324:	2202      	movs	r2, #2
 8005326:	2101      	movs	r1, #1
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f001 fe66 	bl	8006ffa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005336:	2308      	movs	r3, #8
 8005338:	2203      	movs	r2, #3
 800533a:	2182      	movs	r1, #130	; 0x82
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 fe5c 	bl	8006ffa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005348:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800534c:	f001 ff76 	bl	800723c <USBD_static_malloc>
 8005350:	4602      	mov	r2, r0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	e026      	b.n	80053b6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800536e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2200      	movs	r2, #0
 8005386:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	7c1b      	ldrb	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800539c:	2101      	movs	r1, #1
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f001 ff15 	bl	80071ce <USBD_LL_PrepareReceive>
 80053a4:	e007      	b.n	80053b6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053ac:	2340      	movs	r3, #64	; 0x40
 80053ae:	2101      	movs	r1, #1
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 ff0c 	bl	80071ce <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80053d0:	2181      	movs	r1, #129	; 0x81
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 fe37 	bl	8007046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80053de:	2101      	movs	r1, #1
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 fe30 	bl	8007046 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053ee:	2182      	movs	r1, #130	; 0x82
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 fe28 	bl	8007046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005416:	4618      	mov	r0, r3
 8005418:	f001 ff1c 	bl	8007254 <USBD_static_free>
    pdev->pClassData = NULL;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b086      	sub	sp, #24
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005454:	2b00      	cmp	r3, #0
 8005456:	d039      	beq.n	80054cc <USBD_CDC_Setup+0x9e>
 8005458:	2b20      	cmp	r3, #32
 800545a:	d17c      	bne.n	8005556 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	88db      	ldrh	r3, [r3, #6]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d029      	beq.n	80054b8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	b25b      	sxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	da11      	bge.n	8005492 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800547a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	88d2      	ldrh	r2, [r2, #6]
 8005480:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005482:	6939      	ldr	r1, [r7, #16]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	88db      	ldrh	r3, [r3, #6]
 8005488:	461a      	mov	r2, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 f9f6 	bl	800687c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005490:	e068      	b.n	8005564 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	785a      	ldrb	r2, [r3, #1]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	88db      	ldrh	r3, [r3, #6]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054a8:	6939      	ldr	r1, [r7, #16]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	88db      	ldrh	r3, [r3, #6]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f001 fa11 	bl	80068d8 <USBD_CtlPrepareRx>
      break;
 80054b6:	e055      	b.n	8005564 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	7850      	ldrb	r0, [r2, #1]
 80054c4:	2200      	movs	r2, #0
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	4798      	blx	r3
      break;
 80054ca:	e04b      	b.n	8005564 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b0a      	cmp	r3, #10
 80054d2:	d017      	beq.n	8005504 <USBD_CDC_Setup+0xd6>
 80054d4:	2b0b      	cmp	r3, #11
 80054d6:	d029      	beq.n	800552c <USBD_CDC_Setup+0xfe>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d133      	bne.n	8005544 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d107      	bne.n	80054f6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80054e6:	f107 030c 	add.w	r3, r7, #12
 80054ea:	2202      	movs	r2, #2
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 f9c4 	bl	800687c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054f4:	e02e      	b.n	8005554 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 f955 	bl	80067a8 <USBD_CtlError>
            ret = USBD_FAIL;
 80054fe:	2302      	movs	r3, #2
 8005500:	75fb      	strb	r3, [r7, #23]
          break;
 8005502:	e027      	b.n	8005554 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800550a:	2b03      	cmp	r3, #3
 800550c:	d107      	bne.n	800551e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800550e:	f107 030f 	add.w	r3, r7, #15
 8005512:	2201      	movs	r2, #1
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 f9b0 	bl	800687c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800551c:	e01a      	b.n	8005554 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 f941 	bl	80067a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005526:	2302      	movs	r3, #2
 8005528:	75fb      	strb	r3, [r7, #23]
          break;
 800552a:	e013      	b.n	8005554 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005532:	2b03      	cmp	r3, #3
 8005534:	d00d      	beq.n	8005552 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 f935 	bl	80067a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800553e:	2302      	movs	r3, #2
 8005540:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005542:	e006      	b.n	8005552 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 f92e 	bl	80067a8 <USBD_CtlError>
          ret = USBD_FAIL;
 800554c:	2302      	movs	r3, #2
 800554e:	75fb      	strb	r3, [r7, #23]
          break;
 8005550:	e000      	b.n	8005554 <USBD_CDC_Setup+0x126>
          break;
 8005552:	bf00      	nop
      }
      break;
 8005554:	e006      	b.n	8005564 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 f925 	bl	80067a8 <USBD_CtlError>
      ret = USBD_FAIL;
 800555e:	2302      	movs	r3, #2
 8005560:	75fb      	strb	r3, [r7, #23]
      break;
 8005562:	bf00      	nop
  }

  return ret;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005580:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005588:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d037      	beq.n	8005604 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	331c      	adds	r3, #28
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d026      	beq.n	80055f8 <USBD_CDC_DataIn+0x8a>
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	331c      	adds	r3, #28
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	0152      	lsls	r2, r2, #5
 80055c2:	440a      	add	r2, r1
 80055c4:	3238      	adds	r2, #56	; 0x38
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80055cc:	fb02 f201 	mul.w	r2, r2, r1
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d110      	bne.n	80055f8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	331c      	adds	r3, #28
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055ea:	78f9      	ldrb	r1, [r7, #3]
 80055ec:	2300      	movs	r3, #0
 80055ee:	2200      	movs	r2, #0
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 fdc9 	bl	8007188 <USBD_LL_Transmit>
 80055f6:	e003      	b.n	8005600 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005620:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fdf4 	bl	8007214 <USBD_LL_GetRxDataSize>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00d      	beq.n	800565a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005652:	4611      	mov	r1, r2
 8005654:	4798      	blx	r3

    return USBD_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	e000      	b.n	800565c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800565a:	2302      	movs	r3, #2
  }
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005672:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800567a:	2b00      	cmp	r3, #0
 800567c:	d015      	beq.n	80056aa <USBD_CDC_EP0_RxReady+0x46>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005684:	2bff      	cmp	r3, #255	; 0xff
 8005686:	d010      	beq.n	80056aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005696:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800569e:	b292      	uxth	r2, r2
 80056a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	22ff      	movs	r2, #255	; 0xff
 80056a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2243      	movs	r2, #67	; 0x43
 80056c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80056c2:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000094 	.word	0x20000094

080056d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2243      	movs	r2, #67	; 0x43
 80056e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80056e2:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000050 	.word	0x20000050

080056f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2243      	movs	r2, #67	; 0x43
 8005700:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005702:	4b03      	ldr	r3, [pc, #12]	; (8005710 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	200000d8 	.word	0x200000d8

08005714 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	220a      	movs	r2, #10
 8005720:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005722:	4b03      	ldr	r3, [pc, #12]	; (8005730 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	2000000c 	.word	0x2000000c

08005734 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800573e:	2302      	movs	r3, #2
 8005740:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005774:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01c      	beq.n	800580c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d115      	bne.n	8005808 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2181      	movs	r1, #129	; 0x81
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fcc2 	bl	8007188 <USBD_LL_Transmit>

      return USBD_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	e002      	b.n	800580e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005824:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d017      	beq.n	8005860 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	7c1b      	ldrb	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800583e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005842:	2101      	movs	r1, #1
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fcc2 	bl	80071ce <USBD_LL_PrepareReceive>
 800584a:	e007      	b.n	800585c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005852:	2340      	movs	r3, #64	; 0x40
 8005854:	2101      	movs	r1, #1
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fcb9 	bl	80071ce <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	e000      	b.n	8005862 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	4613      	mov	r3, r2
 8005876:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800587e:	2302      	movs	r3, #2
 8005880:	e01a      	b.n	80058b8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	79fa      	ldrb	r2, [r7, #7]
 80058ae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f001 fb2d 	bl	8006f10 <USBD_LL_Init>

  return USBD_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	73fb      	strb	r3, [r7, #15]
 80058e0:	e001      	b.n	80058e6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80058e2:	2302      	movs	r3, #2
 80058e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fb62 	bl	8006fc4 <USBD_LL_Start>

  return USBD_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800592a:	2302      	movs	r3, #2
 800592c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	4611      	mov	r1, r2
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	78fa      	ldrb	r2, [r7, #3]
 8005972:	4611      	mov	r1, r2
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3

  return USBD_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fecb 	bl	8006730 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059a8:	461a      	mov	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d00c      	beq.n	80059d8 <USBD_LL_SetupStage+0x56>
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d302      	bcc.n	80059c8 <USBD_LL_SetupStage+0x46>
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d010      	beq.n	80059e8 <USBD_LL_SetupStage+0x66>
 80059c6:	e017      	b.n	80059f8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f9cb 	bl	8005d6c <USBD_StdDevReq>
      break;
 80059d6:	e01a      	b.n	8005a0e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fa2d 	bl	8005e40 <USBD_StdItfReq>
      break;
 80059e6:	e012      	b.n	8005a0e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa6b 	bl	8005ecc <USBD_StdEPReq>
      break;
 80059f6:	e00a      	b.n	8005a0e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fb3c 	bl	8007084 <USBD_LL_StallEP>
      break;
 8005a0c:	bf00      	nop
  }

  return USBD_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	460b      	mov	r3, r1
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a26:	7afb      	ldrb	r3, [r7, #11]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d14b      	bne.n	8005ac4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d134      	bne.n	8005aa8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d919      	bls.n	8005a7e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d203      	bcs.n	8005a6c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	e002      	b.n	8005a72 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 ff4c 	bl	8006914 <USBD_CtlContinueRx>
 8005a7c:	e038      	b.n	8005af0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d105      	bne.n	8005aa0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 ff49 	bl	8006938 <USBD_CtlSendStatus>
 8005aa6:	e023      	b.n	8005af0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d11e      	bne.n	8005af0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005aba:	2100      	movs	r1, #0
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f001 fae1 	bl	8007084 <USBD_LL_StallEP>
 8005ac2:	e015      	b.n	8005af0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00d      	beq.n	8005aec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d108      	bne.n	8005aec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	7afa      	ldrb	r2, [r7, #11]
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	4798      	blx	r3
 8005aea:	e001      	b.n	8005af0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005aec:	2302      	movs	r3, #2
 8005aee:	e000      	b.n	8005af2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	460b      	mov	r3, r1
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b08:	7afb      	ldrb	r3, [r7, #11]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d17f      	bne.n	8005c0e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3314      	adds	r3, #20
 8005b12:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d15c      	bne.n	8005bd8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d915      	bls.n	8005b56 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 feb6 	bl	80068b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f001 fb3d 	bl	80071ce <USBD_LL_PrepareReceive>
 8005b54:	e04e      	b.n	8005bf4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	6912      	ldr	r2, [r2, #16]
 8005b5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b62:	fb02 f201 	mul.w	r2, r2, r1
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11c      	bne.n	8005ba6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d316      	bcc.n	8005ba6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d20f      	bcs.n	8005ba6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b86:	2200      	movs	r2, #0
 8005b88:	2100      	movs	r1, #0
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fe92 	bl	80068b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f001 fb15 	bl	80071ce <USBD_LL_PrepareReceive>
 8005ba4:	e026      	b.n	8005bf4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d105      	bne.n	8005bc8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f001 fa5a 	bl	8007084 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fec4 	bl	800695e <USBD_CtlReceiveStatus>
 8005bd6:	e00d      	b.n	8005bf4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d004      	beq.n	8005bec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005bec:	2180      	movs	r1, #128	; 0x80
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f001 fa48 	bl	8007084 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d11d      	bne.n	8005c3a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fe83 	bl	800590a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c0c:	e015      	b.n	8005c3a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d108      	bne.n	8005c36 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	7afa      	ldrb	r2, [r7, #11]
 8005c2e:	4611      	mov	r1, r2
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	4798      	blx	r3
 8005c34:	e001      	b.n	8005c3a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c36:	2302      	movs	r3, #2
 8005c38:	e000      	b.n	8005c3c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c4c:	2340      	movs	r3, #64	; 0x40
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 f9d1 	bl	8006ffa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2240      	movs	r2, #64	; 0x40
 8005c64:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2180      	movs	r1, #128	; 0x80
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f001 f9c3 	bl	8006ffa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2240      	movs	r2, #64	; 0x40
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d009      	beq.n	8005cbc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6852      	ldr	r2, [r2, #4]
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
  }

  return USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr

08005ce4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d105      	bne.n	8005d2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr

08005d36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d10b      	bne.n	8005d60 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d004      	beq.n	8005d90 <USBD_StdDevReq+0x24>
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d002      	beq.n	8005d90 <USBD_StdDevReq+0x24>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d008      	beq.n	8005da0 <USBD_StdDevReq+0x34>
 8005d8e:	e04c      	b.n	8005e2a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
      break;
 8005d9e:	e049      	b.n	8005e34 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b09      	cmp	r3, #9
 8005da6:	d83a      	bhi.n	8005e1e <USBD_StdDevReq+0xb2>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <USBD_StdDevReq+0x44>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005e01 	.word	0x08005e01
 8005db4:	08005e15 	.word	0x08005e15
 8005db8:	08005e1f 	.word	0x08005e1f
 8005dbc:	08005e0b 	.word	0x08005e0b
 8005dc0:	08005e1f 	.word	0x08005e1f
 8005dc4:	08005de3 	.word	0x08005de3
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005e1f 	.word	0x08005e1f
 8005dd0:	08005df7 	.word	0x08005df7
 8005dd4:	08005ded 	.word	0x08005ded
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f9d4 	bl	8006188 <USBD_GetDescriptor>
          break;
 8005de0:	e022      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fb37 	bl	8006458 <USBD_SetAddress>
          break;
 8005dea:	e01d      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fb74 	bl	80064dc <USBD_SetConfig>
          break;
 8005df4:	e018      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fbfd 	bl	80065f8 <USBD_GetConfig>
          break;
 8005dfe:	e013      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fc2c 	bl	8006660 <USBD_GetStatus>
          break;
 8005e08:	e00e      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fc5a 	bl	80066c6 <USBD_SetFeature>
          break;
 8005e12:	e009      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fc69 	bl	80066ee <USBD_ClrFeature>
          break;
 8005e1c:	e004      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fcc1 	bl	80067a8 <USBD_CtlError>
          break;
 8005e26:	bf00      	nop
      }
      break;
 8005e28:	e004      	b.n	8005e34 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fcbb 	bl	80067a8 <USBD_CtlError>
      break;
 8005e32:	bf00      	nop
  }

  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d003      	beq.n	8005e62 <USBD_StdItfReq+0x22>
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d001      	beq.n	8005e62 <USBD_StdItfReq+0x22>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d12a      	bne.n	8005eb8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d81d      	bhi.n	8005eaa <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	889b      	ldrh	r3, [r3, #4]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d813      	bhi.n	8005ea0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	88db      	ldrh	r3, [r3, #6]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d110      	bne.n	8005eb4 <USBD_StdItfReq+0x74>
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10d      	bne.n	8005eb4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fd4d 	bl	8006938 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e9e:	e009      	b.n	8005eb4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fc80 	bl	80067a8 <USBD_CtlError>
          break;
 8005ea8:	e004      	b.n	8005eb4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fc7b 	bl	80067a8 <USBD_CtlError>
          break;
 8005eb2:	e000      	b.n	8005eb6 <USBD_StdItfReq+0x76>
          break;
 8005eb4:	bf00      	nop
      }
      break;
 8005eb6:	e004      	b.n	8005ec2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fc74 	bl	80067a8 <USBD_CtlError>
      break;
 8005ec0:	bf00      	nop
  }

  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	889b      	ldrh	r3, [r3, #4]
 8005ede:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d004      	beq.n	8005ef6 <USBD_StdEPReq+0x2a>
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d002      	beq.n	8005ef6 <USBD_StdEPReq+0x2a>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <USBD_StdEPReq+0x3a>
 8005ef4:	e13d      	b.n	8006172 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
      break;
 8005f04:	e13a      	b.n	800617c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d10a      	bne.n	8005f28 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	e12a      	b.n	800617e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d03e      	beq.n	8005fae <USBD_StdEPReq+0xe2>
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d002      	beq.n	8005f3a <USBD_StdEPReq+0x6e>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d070      	beq.n	800601a <USBD_StdEPReq+0x14e>
 8005f38:	e115      	b.n	8006166 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d002      	beq.n	8005f4a <USBD_StdEPReq+0x7e>
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d015      	beq.n	8005f74 <USBD_StdEPReq+0xa8>
 8005f48:	e02b      	b.n	8005fa2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f4a:	7bbb      	ldrb	r3, [r7, #14]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <USBD_StdEPReq+0x9e>
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d009      	beq.n	8005f6a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 f892 	bl	8007084 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f60:	2180      	movs	r1, #128	; 0x80
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 f88e 	bl	8007084 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f68:	e020      	b.n	8005fac <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fc1b 	bl	80067a8 <USBD_CtlError>
              break;
 8005f72:	e01b      	b.n	8005fac <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	885b      	ldrh	r3, [r3, #2]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10e      	bne.n	8005f9a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <USBD_StdEPReq+0xce>
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d008      	beq.n	8005f9a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	88db      	ldrh	r3, [r3, #6]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 f875 	bl	8007084 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fccc 	bl	8006938 <USBD_CtlSendStatus>

              break;
 8005fa0:	e004      	b.n	8005fac <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fbff 	bl	80067a8 <USBD_CtlError>
              break;
 8005faa:	bf00      	nop
          }
          break;
 8005fac:	e0e0      	b.n	8006170 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d002      	beq.n	8005fbe <USBD_StdEPReq+0xf2>
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d015      	beq.n	8005fe8 <USBD_StdEPReq+0x11c>
 8005fbc:	e026      	b.n	800600c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00c      	beq.n	8005fde <USBD_StdEPReq+0x112>
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d009      	beq.n	8005fde <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 f858 	bl	8007084 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005fd4:	2180      	movs	r1, #128	; 0x80
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 f854 	bl	8007084 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fdc:	e01c      	b.n	8006018 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fbe1 	bl	80067a8 <USBD_CtlError>
              break;
 8005fe6:	e017      	b.n	8006018 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	885b      	ldrh	r3, [r3, #2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d112      	bne.n	8006016 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 f85f 	bl	80070c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fc97 	bl	8006938 <USBD_CtlSendStatus>
              }
              break;
 800600a:	e004      	b.n	8006016 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fbca 	bl	80067a8 <USBD_CtlError>
              break;
 8006014:	e000      	b.n	8006018 <USBD_StdEPReq+0x14c>
              break;
 8006016:	bf00      	nop
          }
          break;
 8006018:	e0aa      	b.n	8006170 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006020:	2b02      	cmp	r3, #2
 8006022:	d002      	beq.n	800602a <USBD_StdEPReq+0x15e>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d032      	beq.n	800608e <USBD_StdEPReq+0x1c2>
 8006028:	e097      	b.n	800615a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <USBD_StdEPReq+0x174>
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b80      	cmp	r3, #128	; 0x80
 8006034:	d004      	beq.n	8006040 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fbb5 	bl	80067a8 <USBD_CtlError>
                break;
 800603e:	e091      	b.n	8006164 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006044:	2b00      	cmp	r3, #0
 8006046:	da0b      	bge.n	8006060 <USBD_StdEPReq+0x194>
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	3310      	adds	r3, #16
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4413      	add	r3, r2
 800605c:	3304      	adds	r3, #4
 800605e:	e00b      	b.n	8006078 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	4413      	add	r3, r2
 8006076:	3304      	adds	r3, #4
 8006078:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2202      	movs	r2, #2
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fbf8 	bl	800687c <USBD_CtlSendData>
              break;
 800608c:	e06a      	b.n	8006164 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800608e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da11      	bge.n	80060ba <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	3318      	adds	r3, #24
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d117      	bne.n	80060e0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fb78 	bl	80067a8 <USBD_CtlError>
                  break;
 80060b8:	e054      	b.n	8006164 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fb65 	bl	80067a8 <USBD_CtlError>
                  break;
 80060de:	e041      	b.n	8006164 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da0b      	bge.n	8006100 <USBD_StdEPReq+0x234>
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	3310      	adds	r3, #16
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	e00b      	b.n	8006118 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	4413      	add	r3, r2
 8006116:	3304      	adds	r3, #4
 8006118:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <USBD_StdEPReq+0x25a>
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d103      	bne.n	800612e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e00e      	b.n	800614c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 ffe4 	bl	8007100 <USBD_LL_IsStallEP>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2201      	movs	r2, #1
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e002      	b.n	800614c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2202      	movs	r2, #2
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fb92 	bl	800687c <USBD_CtlSendData>
              break;
 8006158:	e004      	b.n	8006164 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fb23 	bl	80067a8 <USBD_CtlError>
              break;
 8006162:	bf00      	nop
          }
          break;
 8006164:	e004      	b.n	8006170 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fb1d 	bl	80067a8 <USBD_CtlError>
          break;
 800616e:	bf00      	nop
      }
      break;
 8006170:	e004      	b.n	800617c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fb17 	bl	80067a8 <USBD_CtlError>
      break;
 800617a:	bf00      	nop
  }

  return ret;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	2b06      	cmp	r3, #6
 80061aa:	f200 8128 	bhi.w	80063fe <USBD_GetDescriptor+0x276>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <USBD_GetDescriptor+0x2c>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061d1 	.word	0x080061d1
 80061b8:	080061e9 	.word	0x080061e9
 80061bc:	08006229 	.word	0x08006229
 80061c0:	080063ff 	.word	0x080063ff
 80061c4:	080063ff 	.word	0x080063ff
 80061c8:	0800639f 	.word	0x0800639f
 80061cc:	080063cb 	.word	0x080063cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	7c12      	ldrb	r2, [r2, #16]
 80061dc:	f107 0108 	add.w	r1, r7, #8
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	60f8      	str	r0, [r7, #12]
      break;
 80061e6:	e112      	b.n	800640e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7c1b      	ldrb	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10d      	bne.n	800620c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	f107 0208 	add.w	r2, r7, #8
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	2202      	movs	r2, #2
 8006208:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800620a:	e100      	b.n	800640e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	f107 0208 	add.w	r2, r7, #8
 8006218:	4610      	mov	r0, r2
 800621a:	4798      	blx	r3
 800621c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	2202      	movs	r2, #2
 8006224:	701a      	strb	r2, [r3, #0]
      break;
 8006226:	e0f2      	b.n	800640e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	885b      	ldrh	r3, [r3, #2]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b05      	cmp	r3, #5
 8006230:	f200 80ac 	bhi.w	800638c <USBD_GetDescriptor+0x204>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <USBD_GetDescriptor+0xb4>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006255 	.word	0x08006255
 8006240:	08006289 	.word	0x08006289
 8006244:	080062bd 	.word	0x080062bd
 8006248:	080062f1 	.word	0x080062f1
 800624c:	08006325 	.word	0x08006325
 8006250:	08006359 	.word	0x08006359
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	7c12      	ldrb	r2, [r2, #16]
 800626c:	f107 0108 	add.w	r1, r7, #8
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
 8006274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006276:	e091      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa94 	bl	80067a8 <USBD_CtlError>
            err++;
 8006280:	7afb      	ldrb	r3, [r7, #11]
 8006282:	3301      	adds	r3, #1
 8006284:	72fb      	strb	r3, [r7, #11]
          break;
 8006286:	e089      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	7c12      	ldrb	r2, [r2, #16]
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062aa:	e077      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa7a 	bl	80067a8 <USBD_CtlError>
            err++;
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	3301      	adds	r3, #1
 80062b8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ba:	e06f      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	7c12      	ldrb	r2, [r2, #16]
 80062d4:	f107 0108 	add.w	r1, r7, #8
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062de:	e05d      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa60 	bl	80067a8 <USBD_CtlError>
            err++;
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	3301      	adds	r3, #1
 80062ec:	72fb      	strb	r3, [r7, #11]
          break;
 80062ee:	e055      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	7c12      	ldrb	r2, [r2, #16]
 8006308:	f107 0108 	add.w	r1, r7, #8
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006312:	e043      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fa46 	bl	80067a8 <USBD_CtlError>
            err++;
 800631c:	7afb      	ldrb	r3, [r7, #11]
 800631e:	3301      	adds	r3, #1
 8006320:	72fb      	strb	r3, [r7, #11]
          break;
 8006322:	e03b      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	7c12      	ldrb	r2, [r2, #16]
 800633c:	f107 0108 	add.w	r1, r7, #8
 8006340:	4610      	mov	r0, r2
 8006342:	4798      	blx	r3
 8006344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006346:	e029      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa2c 	bl	80067a8 <USBD_CtlError>
            err++;
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	3301      	adds	r3, #1
 8006354:	72fb      	strb	r3, [r7, #11]
          break;
 8006356:	e021      	b.n	800639c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	7c12      	ldrb	r2, [r2, #16]
 8006370:	f107 0108 	add.w	r1, r7, #8
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
 8006378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800637a:	e00f      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa12 	bl	80067a8 <USBD_CtlError>
            err++;
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	3301      	adds	r3, #1
 8006388:	72fb      	strb	r3, [r7, #11]
          break;
 800638a:	e007      	b.n	800639c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa0a 	bl	80067a8 <USBD_CtlError>
          err++;
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	3301      	adds	r3, #1
 8006398:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800639a:	e038      	b.n	800640e <USBD_GetDescriptor+0x286>
 800639c:	e037      	b.n	800640e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7c1b      	ldrb	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	f107 0208 	add.w	r2, r7, #8
 80063b2:	4610      	mov	r0, r2
 80063b4:	4798      	blx	r3
 80063b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063b8:	e029      	b.n	800640e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f9f3 	bl	80067a8 <USBD_CtlError>
        err++;
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	3301      	adds	r3, #1
 80063c6:	72fb      	strb	r3, [r7, #11]
      break;
 80063c8:	e021      	b.n	800640e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	7c1b      	ldrb	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10d      	bne.n	80063ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	f107 0208 	add.w	r2, r7, #8
 80063de:	4610      	mov	r0, r2
 80063e0:	4798      	blx	r3
 80063e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	2207      	movs	r2, #7
 80063ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063ec:	e00f      	b.n	800640e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f9d9 	bl	80067a8 <USBD_CtlError>
        err++;
 80063f6:	7afb      	ldrb	r3, [r7, #11]
 80063f8:	3301      	adds	r3, #1
 80063fa:	72fb      	strb	r3, [r7, #11]
      break;
 80063fc:	e007      	b.n	800640e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9d1 	bl	80067a8 <USBD_CtlError>
      err++;
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	3301      	adds	r3, #1
 800640a:	72fb      	strb	r3, [r7, #11]
      break;
 800640c:	bf00      	nop
  }

  if (err != 0U)
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11c      	bne.n	800644e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006414:	893b      	ldrh	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <USBD_GetDescriptor+0x2b6>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	88db      	ldrh	r3, [r3, #6]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00d      	beq.n	800643e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	88da      	ldrh	r2, [r3, #6]
 8006426:	893b      	ldrh	r3, [r7, #8]
 8006428:	4293      	cmp	r3, r2
 800642a:	bf28      	it	cs
 800642c:	4613      	movcs	r3, r2
 800642e:	b29b      	uxth	r3, r3
 8006430:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006432:	893b      	ldrh	r3, [r7, #8]
 8006434:	461a      	mov	r2, r3
 8006436:	68f9      	ldr	r1, [r7, #12]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa1f 	bl	800687c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	88db      	ldrh	r3, [r3, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa76 	bl	8006938 <USBD_CtlSendStatus>
 800644c:	e000      	b.n	8006450 <USBD_GetDescriptor+0x2c8>
    return;
 800644e:	bf00      	nop
    }
  }
}
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop

08006458 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	889b      	ldrh	r3, [r3, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d130      	bne.n	80064cc <USBD_SetAddress+0x74>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	88db      	ldrh	r3, [r3, #6]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d12c      	bne.n	80064cc <USBD_SetAddress+0x74>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	885b      	ldrh	r3, [r3, #2]
 8006476:	2b7f      	cmp	r3, #127	; 0x7f
 8006478:	d828      	bhi.n	80064cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	885b      	ldrh	r3, [r3, #2]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006484:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800648c:	2b03      	cmp	r3, #3
 800648e:	d104      	bne.n	800649a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f988 	bl	80067a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006498:	e01c      	b.n	80064d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7bfa      	ldrb	r2, [r7, #15]
 800649e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fe4f 	bl	800714a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa43 	bl	8006938 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c0:	e008      	b.n	80064d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ca:	e003      	b.n	80064d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f96a 	bl	80067a8 <USBD_CtlError>
  }
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	885b      	ldrh	r3, [r3, #2]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	4b41      	ldr	r3, [pc, #260]	; (80065f4 <USBD_SetConfig+0x118>)
 80064ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064f0:	4b40      	ldr	r3, [pc, #256]	; (80065f4 <USBD_SetConfig+0x118>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d904      	bls.n	8006502 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f954 	bl	80067a8 <USBD_CtlError>
 8006500:	e075      	b.n	80065ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006508:	2b02      	cmp	r3, #2
 800650a:	d002      	beq.n	8006512 <USBD_SetConfig+0x36>
 800650c:	2b03      	cmp	r3, #3
 800650e:	d023      	beq.n	8006558 <USBD_SetConfig+0x7c>
 8006510:	e062      	b.n	80065d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006512:	4b38      	ldr	r3, [pc, #224]	; (80065f4 <USBD_SetConfig+0x118>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01a      	beq.n	8006550 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800651a:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <USBD_SetConfig+0x118>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2203      	movs	r2, #3
 8006528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800652c:	4b31      	ldr	r3, [pc, #196]	; (80065f4 <USBD_SetConfig+0x118>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff f9f3 	bl	800591e <USBD_SetClassConfig>
 8006538:	4603      	mov	r3, r0
 800653a:	2b02      	cmp	r3, #2
 800653c:	d104      	bne.n	8006548 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f931 	bl	80067a8 <USBD_CtlError>
            return;
 8006546:	e052      	b.n	80065ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f9f5 	bl	8006938 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800654e:	e04e      	b.n	80065ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9f1 	bl	8006938 <USBD_CtlSendStatus>
        break;
 8006556:	e04a      	b.n	80065ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006558:	4b26      	ldr	r3, [pc, #152]	; (80065f4 <USBD_SetConfig+0x118>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d112      	bne.n	8006586 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006568:	4b22      	ldr	r3, [pc, #136]	; (80065f4 <USBD_SetConfig+0x118>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006572:	4b20      	ldr	r3, [pc, #128]	; (80065f4 <USBD_SetConfig+0x118>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff f9ef 	bl	800595c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9da 	bl	8006938 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006584:	e033      	b.n	80065ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006586:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <USBD_SetConfig+0x118>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d01d      	beq.n	80065d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff f9dd 	bl	800595c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80065a2:	4b14      	ldr	r3, [pc, #80]	; (80065f4 <USBD_SetConfig+0x118>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065ac:	4b11      	ldr	r3, [pc, #68]	; (80065f4 <USBD_SetConfig+0x118>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff f9b3 	bl	800591e <USBD_SetClassConfig>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d104      	bne.n	80065c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f8f1 	bl	80067a8 <USBD_CtlError>
            return;
 80065c6:	e012      	b.n	80065ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f9b5 	bl	8006938 <USBD_CtlSendStatus>
        break;
 80065ce:	e00e      	b.n	80065ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f9b1 	bl	8006938 <USBD_CtlSendStatus>
        break;
 80065d6:	e00a      	b.n	80065ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f8e4 	bl	80067a8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <USBD_SetConfig+0x118>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff f9b8 	bl	800595c <USBD_ClrClassConfig>
        break;
 80065ec:	bf00      	nop
    }
  }
}
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000198 	.word	0x20000198

080065f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	88db      	ldrh	r3, [r3, #6]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d004      	beq.n	8006614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f8cb 	bl	80067a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006612:	e021      	b.n	8006658 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661a:	2b01      	cmp	r3, #1
 800661c:	db17      	blt.n	800664e <USBD_GetConfig+0x56>
 800661e:	2b02      	cmp	r3, #2
 8006620:	dd02      	ble.n	8006628 <USBD_GetConfig+0x30>
 8006622:	2b03      	cmp	r3, #3
 8006624:	d00b      	beq.n	800663e <USBD_GetConfig+0x46>
 8006626:	e012      	b.n	800664e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3308      	adds	r3, #8
 8006632:	2201      	movs	r2, #1
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f920 	bl	800687c <USBD_CtlSendData>
        break;
 800663c:	e00c      	b.n	8006658 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	2201      	movs	r2, #1
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f918 	bl	800687c <USBD_CtlSendData>
        break;
 800664c:	e004      	b.n	8006658 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8a9 	bl	80067a8 <USBD_CtlError>
        break;
 8006656:	bf00      	nop
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006670:	3b01      	subs	r3, #1
 8006672:	2b02      	cmp	r3, #2
 8006674:	d81e      	bhi.n	80066b4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	88db      	ldrh	r3, [r3, #6]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d004      	beq.n	8006688 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f891 	bl	80067a8 <USBD_CtlError>
        break;
 8006686:	e01a      	b.n	80066be <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f043 0202 	orr.w	r2, r3, #2
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	330c      	adds	r3, #12
 80066a8:	2202      	movs	r2, #2
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f8e5 	bl	800687c <USBD_CtlSendData>
      break;
 80066b2:	e004      	b.n	80066be <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f876 	bl	80067a8 <USBD_CtlError>
      break;
 80066bc:	bf00      	nop
  }
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	885b      	ldrh	r3, [r3, #2]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d106      	bne.n	80066e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f929 	bl	8006938 <USBD_CtlSendStatus>
  }
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fe:	3b01      	subs	r3, #1
 8006700:	2b02      	cmp	r3, #2
 8006702:	d80b      	bhi.n	800671c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	885b      	ldrh	r3, [r3, #2]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d10c      	bne.n	8006726 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f90f 	bl	8006938 <USBD_CtlSendStatus>
      }
      break;
 800671a:	e004      	b.n	8006726 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f842 	bl	80067a8 <USBD_CtlError>
      break;
 8006724:	e000      	b.n	8006728 <USBD_ClrFeature+0x3a>
      break;
 8006726:	bf00      	nop
  }
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	785a      	ldrb	r2, [r3, #1]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	3302      	adds	r3, #2
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	b29a      	uxth	r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	3303      	adds	r3, #3
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	b29b      	uxth	r3, r3
 800675e:	4413      	add	r3, r2
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	3304      	adds	r3, #4
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b29a      	uxth	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	3305      	adds	r3, #5
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	b29b      	uxth	r3, r3
 800677a:	4413      	add	r3, r2
 800677c:	b29a      	uxth	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	3306      	adds	r3, #6
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b29a      	uxth	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	3307      	adds	r3, #7
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	b29b      	uxth	r3, r3
 8006796:	4413      	add	r3, r2
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	80da      	strh	r2, [r3, #6]

}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fc65 	bl	8007084 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80067ba:	2100      	movs	r1, #0
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fc61 	bl	8007084 <USBD_LL_StallEP>
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d032      	beq.n	8006846 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f834 	bl	800684e <USBD_GetLen>
 80067e6:	4603      	mov	r3, r0
 80067e8:	3301      	adds	r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	75fa      	strb	r2, [r7, #23]
 80067fa:	461a      	mov	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4413      	add	r3, r2
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	75fa      	strb	r2, [r7, #23]
 800680c:	461a      	mov	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4413      	add	r3, r2
 8006812:	2203      	movs	r2, #3
 8006814:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006816:	e012      	b.n	800683e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	60fa      	str	r2, [r7, #12]
 800681e:	7dfa      	ldrb	r2, [r7, #23]
 8006820:	1c51      	adds	r1, r2, #1
 8006822:	75f9      	strb	r1, [r7, #23]
 8006824:	4611      	mov	r1, r2
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	440a      	add	r2, r1
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	75fa      	strb	r2, [r7, #23]
 8006834:	461a      	mov	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4413      	add	r3, r2
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e8      	bne.n	8006818 <USBD_GetString+0x4e>
    }
  }
}
 8006846:	bf00      	nop
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800685a:	e005      	b.n	8006868 <USBD_GetLen+0x1a>
  {
    len++;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	3301      	adds	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3301      	adds	r3, #1
 8006866:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1f5      	bne.n	800685c <USBD_GetLen+0xe>
  }

  return len;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	4613      	mov	r3, r2
 8006888:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2202      	movs	r2, #2
 800688e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006892:	88fa      	ldrh	r2, [r7, #6]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006898:	88fa      	ldrh	r2, [r7, #6]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	2100      	movs	r1, #0
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fc6f 	bl	8007188 <USBD_LL_Transmit>

  return USBD_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	2100      	movs	r1, #0
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fc5d 	bl	8007188 <USBD_LL_Transmit>

  return USBD_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2203      	movs	r2, #3
 80068ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80068ee:	88fa      	ldrh	r2, [r7, #6]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	2100      	movs	r1, #0
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 fc62 	bl	80071ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006922:	88fb      	ldrh	r3, [r7, #6]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	2100      	movs	r1, #0
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 fc50 	bl	80071ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2204      	movs	r2, #4
 8006944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006948:	2300      	movs	r3, #0
 800694a:	2200      	movs	r2, #0
 800694c:	2100      	movs	r1, #0
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fc1a 	bl	8007188 <USBD_LL_Transmit>

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2205      	movs	r2, #5
 800696a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	2100      	movs	r1, #0
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fc2a 	bl	80071ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006988:	2200      	movs	r2, #0
 800698a:	4912      	ldr	r1, [pc, #72]	; (80069d4 <MX_USB_DEVICE_Init+0x50>)
 800698c:	4812      	ldr	r0, [pc, #72]	; (80069d8 <MX_USB_DEVICE_Init+0x54>)
 800698e:	f7fe ff6c 	bl	800586a <USBD_Init>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006998:	f7f9 fe5a 	bl	8000650 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800699c:	490f      	ldr	r1, [pc, #60]	; (80069dc <MX_USB_DEVICE_Init+0x58>)
 800699e:	480e      	ldr	r0, [pc, #56]	; (80069d8 <MX_USB_DEVICE_Init+0x54>)
 80069a0:	f7fe ff8e 	bl	80058c0 <USBD_RegisterClass>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80069aa:	f7f9 fe51 	bl	8000650 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80069ae:	490c      	ldr	r1, [pc, #48]	; (80069e0 <MX_USB_DEVICE_Init+0x5c>)
 80069b0:	4809      	ldr	r0, [pc, #36]	; (80069d8 <MX_USB_DEVICE_Init+0x54>)
 80069b2:	f7fe febf 	bl	8005734 <USBD_CDC_RegisterInterface>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80069bc:	f7f9 fe48 	bl	8000650 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069c0:	4805      	ldr	r0, [pc, #20]	; (80069d8 <MX_USB_DEVICE_Init+0x54>)
 80069c2:	f7fe ff96 	bl	80058f2 <USBD_Start>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80069cc:	f7f9 fe40 	bl	8000650 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80069d0:	bf00      	nop
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	2000012c 	.word	0x2000012c
 80069d8:	20000414 	.word	0x20000414
 80069dc:	20000018 	.word	0x20000018
 80069e0:	2000011c 	.word	0x2000011c

080069e4 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80069e8:	2200      	movs	r2, #0
 80069ea:	4905      	ldr	r1, [pc, #20]	; (8006a00 <CDC_Init_FS+0x1c>)
 80069ec:	4805      	ldr	r0, [pc, #20]	; (8006a04 <CDC_Init_FS+0x20>)
 80069ee:	f7fe feb7 	bl	8005760 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80069f2:	4905      	ldr	r1, [pc, #20]	; (8006a08 <CDC_Init_FS+0x24>)
 80069f4:	4803      	ldr	r0, [pc, #12]	; (8006a04 <CDC_Init_FS+0x20>)
 80069f6:	f7fe fecc 	bl	8005792 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80069fa:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20000938 	.word	0x20000938
 8006a04:	20000414 	.word	0x20000414
 8006a08:	20000894 	.word	0x20000894

08006a0c <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8006a10:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr
	...

08006a1c <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	6039      	str	r1, [r7, #0]
 8006a26:	71fb      	strb	r3, [r7, #7]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b23      	cmp	r3, #35	; 0x23
 8006a30:	d84a      	bhi.n	8006ac8 <CDC_Control_FS+0xac>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <CDC_Control_FS+0x1c>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006ac9 	.word	0x08006ac9
 8006a3c:	08006ac9 	.word	0x08006ac9
 8006a40:	08006ac9 	.word	0x08006ac9
 8006a44:	08006ac9 	.word	0x08006ac9
 8006a48:	08006ac9 	.word	0x08006ac9
 8006a4c:	08006ac9 	.word	0x08006ac9
 8006a50:	08006ac9 	.word	0x08006ac9
 8006a54:	08006ac9 	.word	0x08006ac9
 8006a58:	08006ac9 	.word	0x08006ac9
 8006a5c:	08006ac9 	.word	0x08006ac9
 8006a60:	08006ac9 	.word	0x08006ac9
 8006a64:	08006ac9 	.word	0x08006ac9
 8006a68:	08006ac9 	.word	0x08006ac9
 8006a6c:	08006ac9 	.word	0x08006ac9
 8006a70:	08006ac9 	.word	0x08006ac9
 8006a74:	08006ac9 	.word	0x08006ac9
 8006a78:	08006ac9 	.word	0x08006ac9
 8006a7c:	08006ac9 	.word	0x08006ac9
 8006a80:	08006ac9 	.word	0x08006ac9
 8006a84:	08006ac9 	.word	0x08006ac9
 8006a88:	08006ac9 	.word	0x08006ac9
 8006a8c:	08006ac9 	.word	0x08006ac9
 8006a90:	08006ac9 	.word	0x08006ac9
 8006a94:	08006ac9 	.word	0x08006ac9
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006ac9 	.word	0x08006ac9
 8006aa0:	08006ac9 	.word	0x08006ac9
 8006aa4:	08006ac9 	.word	0x08006ac9
 8006aa8:	08006ac9 	.word	0x08006ac9
 8006aac:	08006ac9 	.word	0x08006ac9
 8006ab0:	08006ac9 	.word	0x08006ac9
 8006ab4:	08006ac9 	.word	0x08006ac9
 8006ab8:	08006ac9 	.word	0x08006ac9
 8006abc:	08006ac9 	.word	0x08006ac9
 8006ac0:	08006ac9 	.word	0x08006ac9
 8006ac4:	08006ac9 	.word	0x08006ac9
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8006ac8:	bf00      	nop
	}

	return (USBD_OK);
 8006aca:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop

08006ad8 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	480e      	ldr	r0, [pc, #56]	; (8006b20 <CDC_Receive_FS+0x48>)
 8006ae6:	f7fe fe54 	bl	8005792 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006aea:	480d      	ldr	r0, [pc, #52]	; (8006b20 <CDC_Receive_FS+0x48>)
 8006aec:	f7fe fe93 	bl	8005816 <USBD_CDC_ReceivePacket>

	// This function CDC_Receive_FS is a callback function invoked when data is received - add 3 extra lines of code to copy the data to my own buffer
	received_data_size = *Len;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a0b      	ldr	r2, [pc, #44]	; (8006b24 <CDC_Receive_FS+0x4c>)
 8006af6:	6013      	str	r3, [r2, #0]
	memcpy(received_data, Buf, received_data_size);
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <CDC_Receive_FS+0x4c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4809      	ldr	r0, [pc, #36]	; (8006b28 <CDC_Receive_FS+0x50>)
 8006b02:	f000 fc0b 	bl	800731c <memcpy>
	receive_total += received_data_size;
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <CDC_Receive_FS+0x54>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <CDC_Receive_FS+0x4c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4413      	add	r3, r2
 8006b10:	4a06      	ldr	r2, [pc, #24]	; (8006b2c <CDC_Receive_FS+0x54>)
 8006b12:	6013      	str	r3, [r2, #0]

	return (USBD_OK);
 8006b14:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000414 	.word	0x20000414
 8006b24:	20000890 	.word	0x20000890
 8006b28:	200008d4 	.word	0x200008d4
 8006b2c:	2000019c 	.word	0x2000019c

08006b30 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8006b40:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <CDC_Transmit_FS+0x48>)
 8006b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b46:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e00b      	b.n	8006b6e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b56:	887b      	ldrh	r3, [r7, #2]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	4806      	ldr	r0, [pc, #24]	; (8006b78 <CDC_Transmit_FS+0x48>)
 8006b5e:	f7fe fdff 	bl	8005760 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b62:	4805      	ldr	r0, [pc, #20]	; (8006b78 <CDC_Transmit_FS+0x48>)
 8006b64:	f7fe fe28 	bl	80057b8 <USBD_CDC_TransmitPacket>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000414 	.word	0x20000414

08006b7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	6039      	str	r1, [r7, #0]
 8006b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2212      	movs	r2, #18
 8006b8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b8e:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000148 	.word	0x20000148

08006ba0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006bb2:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	2000015c 	.word	0x2000015c

08006bc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	4907      	ldr	r1, [pc, #28]	; (8006bf8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bda:	4808      	ldr	r0, [pc, #32]	; (8006bfc <USBD_FS_ProductStrDescriptor+0x38>)
 8006bdc:	f7ff fdf5 	bl	80067ca <USBD_GetString>
 8006be0:	e004      	b.n	8006bec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	4904      	ldr	r1, [pc, #16]	; (8006bf8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006be6:	4805      	ldr	r0, [pc, #20]	; (8006bfc <USBD_FS_ProductStrDescriptor+0x38>)
 8006be8:	f7ff fdef 	bl	80067ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bec:	4b02      	ldr	r3, [pc, #8]	; (8006bf8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000980 	.word	0x20000980
 8006bfc:	08007394 	.word	0x08007394

08006c00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	6039      	str	r1, [r7, #0]
 8006c0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	4904      	ldr	r1, [pc, #16]	; (8006c20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c10:	4804      	ldr	r0, [pc, #16]	; (8006c24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c12:	f7ff fdda 	bl	80067ca <USBD_GetString>
  return USBD_StrDesc;
 8006c16:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20000980 	.word	0x20000980
 8006c24:	080073ac 	.word	0x080073ac

08006c28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	221a      	movs	r2, #26
 8006c38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c3a:	f000 f843 	bl	8006cc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c3e:	4b02      	ldr	r3, [pc, #8]	; (8006c48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20000160 	.word	0x20000160

08006c4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d105      	bne.n	8006c6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4907      	ldr	r1, [pc, #28]	; (8006c80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c62:	4808      	ldr	r0, [pc, #32]	; (8006c84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c64:	f7ff fdb1 	bl	80067ca <USBD_GetString>
 8006c68:	e004      	b.n	8006c74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	4904      	ldr	r1, [pc, #16]	; (8006c80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c6e:	4805      	ldr	r0, [pc, #20]	; (8006c84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c70:	f7ff fdab 	bl	80067ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c74:	4b02      	ldr	r3, [pc, #8]	; (8006c80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000980 	.word	0x20000980
 8006c84:	080073c0 	.word	0x080073c0

08006c88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	6039      	str	r1, [r7, #0]
 8006c92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4907      	ldr	r1, [pc, #28]	; (8006cbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c9e:	4808      	ldr	r0, [pc, #32]	; (8006cc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ca0:	f7ff fd93 	bl	80067ca <USBD_GetString>
 8006ca4:	e004      	b.n	8006cb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	4904      	ldr	r1, [pc, #16]	; (8006cbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006caa:	4805      	ldr	r0, [pc, #20]	; (8006cc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cac:	f7ff fd8d 	bl	80067ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cb0:	4b02      	ldr	r3, [pc, #8]	; (8006cbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000980 	.word	0x20000980
 8006cc0:	080073cc 	.word	0x080073cc

08006cc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cca:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <Get_SerialNum+0x44>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <Get_SerialNum+0x48>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <Get_SerialNum+0x4c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cea:	2208      	movs	r2, #8
 8006cec:	4909      	ldr	r1, [pc, #36]	; (8006d14 <Get_SerialNum+0x50>)
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f814 	bl	8006d1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	4908      	ldr	r1, [pc, #32]	; (8006d18 <Get_SerialNum+0x54>)
 8006cf8:	68b8      	ldr	r0, [r7, #8]
 8006cfa:	f000 f80f 	bl	8006d1c <IntToUnicode>
  }
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	1ffff7e8 	.word	0x1ffff7e8
 8006d0c:	1ffff7ec 	.word	0x1ffff7ec
 8006d10:	1ffff7f0 	.word	0x1ffff7f0
 8006d14:	20000162 	.word	0x20000162
 8006d18:	20000172 	.word	0x20000172

08006d1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	75fb      	strb	r3, [r7, #23]
 8006d32:	e027      	b.n	8006d84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	0f1b      	lsrs	r3, r3, #28
 8006d38:	2b09      	cmp	r3, #9
 8006d3a:	d80b      	bhi.n	8006d54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	0f1b      	lsrs	r3, r3, #28
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4619      	mov	r1, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3230      	adds	r2, #48	; 0x30
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e00a      	b.n	8006d6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	0f1b      	lsrs	r3, r3, #28
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	440b      	add	r3, r1
 8006d64:	3237      	adds	r2, #55	; 0x37
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	3301      	adds	r3, #1
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	3301      	adds	r3, #1
 8006d82:	75fb      	strb	r3, [r7, #23]
 8006d84:	7dfa      	ldrb	r2, [r7, #23]
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3d3      	bcc.n	8006d34 <IntToUnicode+0x18>
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <HAL_PCD_MspInit+0x44>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d113      	bne.n	8006dd2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006daa:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <HAL_PCD_MspInit+0x48>)
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	4a0c      	ldr	r2, [pc, #48]	; (8006de0 <HAL_PCD_MspInit+0x48>)
 8006db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006db4:	61d3      	str	r3, [r2, #28]
 8006db6:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <HAL_PCD_MspInit+0x48>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	2014      	movs	r0, #20
 8006dc8:	f7fa fb1b 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006dcc:	2014      	movs	r0, #20
 8006dce:	f7fa fb34 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40005c00 	.word	0x40005c00
 8006de0:	40021000 	.word	0x40021000

08006de4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f7fe fdc1 	bl	8005982 <USBD_LL_SetupStage>
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	015b      	lsls	r3, r3, #5
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	f7fe fdf4 	bl	8005a18 <USBD_LL_DataOutStage>
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	015b      	lsls	r3, r3, #5
 8006e50:	4413      	add	r3, r2
 8006e52:	333c      	adds	r3, #60	; 0x3c
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f7fe fe4e 	bl	8005afa <USBD_LL_DataInStage>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fe ff5e 	bl	8005d36 <USBD_LL_SOF>
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d001      	beq.n	8006e9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e96:	f7f9 fbdb 	bl	8000650 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ea0:	7bfa      	ldrb	r2, [r7, #15]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe ff0e 	bl	8005cc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe fec7 	bl	8005c44 <USBD_LL_Reset>
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe ff08 	bl	8005ce4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <HAL_PCD_SuspendCallback+0x30>)
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	4a03      	ldr	r2, [pc, #12]	; (8006ef0 <HAL_PCD_SuspendCallback+0x30>)
 8006ee2:	f043 0306 	orr.w	r3, r3, #6
 8006ee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	e000ed00 	.word	0xe000ed00

08006ef4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe ff02 	bl	8005d0c <USBD_LL_Resume>
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006f18:	4a28      	ldr	r2, [pc, #160]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006f28:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f2a:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <USBD_LL_Init+0xb0>)
 8006f2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006f2e:	4b23      	ldr	r3, [pc, #140]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f30:	2208      	movs	r2, #8
 8006f32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f34:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f36:	2202      	movs	r2, #2
 8006f38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f3a:	4b20      	ldr	r3, [pc, #128]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f40:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f46:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f4c:	481b      	ldr	r0, [pc, #108]	; (8006fbc <USBD_LL_Init+0xac>)
 8006f4e:	f7fa fd41 	bl	80019d4 <HAL_PCD_Init>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f58:	f7f9 fb7a 	bl	8000650 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f62:	2318      	movs	r3, #24
 8006f64:	2200      	movs	r2, #0
 8006f66:	2100      	movs	r1, #0
 8006f68:	f7fb fbda 	bl	8002720 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f72:	2358      	movs	r3, #88	; 0x58
 8006f74:	2200      	movs	r2, #0
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	f7fb fbd2 	bl	8002720 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f82:	23c0      	movs	r3, #192	; 0xc0
 8006f84:	2200      	movs	r2, #0
 8006f86:	2181      	movs	r1, #129	; 0x81
 8006f88:	f7fb fbca 	bl	8002720 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f96:	2200      	movs	r2, #0
 8006f98:	2101      	movs	r1, #1
 8006f9a:	f7fb fbc1 	bl	8002720 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2182      	movs	r1, #130	; 0x82
 8006fac:	f7fb fbb8 	bl	8002720 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000b80 	.word	0x20000b80
 8006fc0:	40005c00 	.word	0x40005c00

08006fc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fa fddb 	bl	8001b96 <HAL_PCD_Start>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f948 	bl	800727c <USBD_Get_USB_Status>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	4608      	mov	r0, r1
 8007004:	4611      	mov	r1, r2
 8007006:	461a      	mov	r2, r3
 8007008:	4603      	mov	r3, r0
 800700a:	70fb      	strb	r3, [r7, #3]
 800700c:	460b      	mov	r3, r1
 800700e:	70bb      	strb	r3, [r7, #2]
 8007010:	4613      	mov	r3, r2
 8007012:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007022:	78bb      	ldrb	r3, [r7, #2]
 8007024:	883a      	ldrh	r2, [r7, #0]
 8007026:	78f9      	ldrb	r1, [r7, #3]
 8007028:	f7fa ff0e 	bl	8001e48 <HAL_PCD_EP_Open>
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 f922 	bl	800727c <USBD_Get_USB_Status>
 8007038:	4603      	mov	r3, r0
 800703a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800703c:	7bbb      	ldrb	r3, [r7, #14]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007060:	78fa      	ldrb	r2, [r7, #3]
 8007062:	4611      	mov	r1, r2
 8007064:	4618      	mov	r0, r3
 8007066:	f7fa ff4f 	bl	8001f08 <HAL_PCD_EP_Close>
 800706a:	4603      	mov	r3, r0
 800706c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 f903 	bl	800727c <USBD_Get_USB_Status>
 8007076:	4603      	mov	r3, r0
 8007078:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800707a:	7bbb      	ldrb	r3, [r7, #14]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fa fff9 	bl	800209a <HAL_PCD_EP_SetStall>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f8e4 	bl	800727c <USBD_Get_USB_Status>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070dc:	78fa      	ldrb	r2, [r7, #3]
 80070de:	4611      	mov	r1, r2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fb f834 	bl	800214e <HAL_PCD_EP_ClrStall>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 f8c5 	bl	800727c <USBD_Get_USB_Status>
 80070f2:	4603      	mov	r3, r0
 80070f4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007112:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007118:	2b00      	cmp	r3, #0
 800711a:	da08      	bge.n	800712e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	015b      	lsls	r3, r3, #5
 8007126:	4413      	add	r3, r2
 8007128:	332a      	adds	r3, #42	; 0x2a
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	e008      	b.n	8007140 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	015b      	lsls	r3, r3, #5
 8007138:	4413      	add	r3, r2
 800713a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800713e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr

0800714a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007164:	78fa      	ldrb	r2, [r7, #3]
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f7fa fe48 	bl	8001dfe <HAL_PCD_SetAddress>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 f881 	bl	800727c <USBD_Get_USB_Status>
 800717a:	4603      	mov	r3, r0
 800717c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800717e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	461a      	mov	r2, r3
 8007194:	460b      	mov	r3, r1
 8007196:	72fb      	strb	r3, [r7, #11]
 8007198:	4613      	mov	r3, r2
 800719a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071aa:	893b      	ldrh	r3, [r7, #8]
 80071ac:	7af9      	ldrb	r1, [r7, #11]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	f7fa ff3a 	bl	8002028 <HAL_PCD_EP_Transmit>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f85e 	bl	800727c <USBD_Get_USB_Status>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80071c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	461a      	mov	r2, r3
 80071da:	460b      	mov	r3, r1
 80071dc:	72fb      	strb	r3, [r7, #11]
 80071de:	4613      	mov	r3, r2
 80071e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	7af9      	ldrb	r1, [r7, #11]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	f7fa fec9 	bl	8001f8c <HAL_PCD_EP_Receive>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f83b 	bl	800727c <USBD_Get_USB_Status>
 8007206:	4603      	mov	r3, r0
 8007208:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800720a:	7dbb      	ldrb	r3, [r7, #22]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007226:	78fa      	ldrb	r2, [r7, #3]
 8007228:	4611      	mov	r1, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7fa fee8 	bl	8002000 <HAL_PCD_EP_GetRxCount>
 8007230:	4603      	mov	r3, r0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007244:	4b02      	ldr	r3, [pc, #8]	; (8007250 <USBD_static_malloc+0x14>)
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr
 8007250:	200001a0 	.word	0x200001a0

08007254 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr

08007266 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr

0800727c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	2b03      	cmp	r3, #3
 800728e:	d817      	bhi.n	80072c0 <USBD_Get_USB_Status+0x44>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <USBD_Get_USB_Status+0x1c>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072a9 	.word	0x080072a9
 800729c:	080072af 	.word	0x080072af
 80072a0:	080072b5 	.word	0x080072b5
 80072a4:	080072bb 	.word	0x080072bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
    break;
 80072ac:	e00b      	b.n	80072c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072ae:	2302      	movs	r3, #2
 80072b0:	73fb      	strb	r3, [r7, #15]
    break;
 80072b2:	e008      	b.n	80072c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072b4:	2301      	movs	r3, #1
 80072b6:	73fb      	strb	r3, [r7, #15]
    break;
 80072b8:	e005      	b.n	80072c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072ba:	2302      	movs	r3, #2
 80072bc:	73fb      	strb	r3, [r7, #15]
    break;
 80072be:	e002      	b.n	80072c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072c0:	2302      	movs	r3, #2
 80072c2:	73fb      	strb	r3, [r7, #15]
    break;
 80072c4:	bf00      	nop
  }
  return usb_status;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop

080072d4 <__libc_init_array>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	2500      	movs	r5, #0
 80072d8:	4e0c      	ldr	r6, [pc, #48]	; (800730c <__libc_init_array+0x38>)
 80072da:	4c0d      	ldr	r4, [pc, #52]	; (8007310 <__libc_init_array+0x3c>)
 80072dc:	1ba4      	subs	r4, r4, r6
 80072de:	10a4      	asrs	r4, r4, #2
 80072e0:	42a5      	cmp	r5, r4
 80072e2:	d109      	bne.n	80072f8 <__libc_init_array+0x24>
 80072e4:	f000 f82e 	bl	8007344 <_init>
 80072e8:	2500      	movs	r5, #0
 80072ea:	4e0a      	ldr	r6, [pc, #40]	; (8007314 <__libc_init_array+0x40>)
 80072ec:	4c0a      	ldr	r4, [pc, #40]	; (8007318 <__libc_init_array+0x44>)
 80072ee:	1ba4      	subs	r4, r4, r6
 80072f0:	10a4      	asrs	r4, r4, #2
 80072f2:	42a5      	cmp	r5, r4
 80072f4:	d105      	bne.n	8007302 <__libc_init_array+0x2e>
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072fc:	4798      	blx	r3
 80072fe:	3501      	adds	r5, #1
 8007300:	e7ee      	b.n	80072e0 <__libc_init_array+0xc>
 8007302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007306:	4798      	blx	r3
 8007308:	3501      	adds	r5, #1
 800730a:	e7f2      	b.n	80072f2 <__libc_init_array+0x1e>
 800730c:	080073f4 	.word	0x080073f4
 8007310:	080073f4 	.word	0x080073f4
 8007314:	080073f4 	.word	0x080073f4
 8007318:	080073f8 	.word	0x080073f8

0800731c <memcpy>:
 800731c:	b510      	push	{r4, lr}
 800731e:	1e43      	subs	r3, r0, #1
 8007320:	440a      	add	r2, r1
 8007322:	4291      	cmp	r1, r2
 8007324:	d100      	bne.n	8007328 <memcpy+0xc>
 8007326:	bd10      	pop	{r4, pc}
 8007328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007330:	e7f7      	b.n	8007322 <memcpy+0x6>

08007332 <memset>:
 8007332:	4603      	mov	r3, r0
 8007334:	4402      	add	r2, r0
 8007336:	4293      	cmp	r3, r2
 8007338:	d100      	bne.n	800733c <memset+0xa>
 800733a:	4770      	bx	lr
 800733c:	f803 1b01 	strb.w	r1, [r3], #1
 8007340:	e7f9      	b.n	8007336 <memset+0x4>
	...

08007344 <_init>:
 8007344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007346:	bf00      	nop
 8007348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734a:	bc08      	pop	{r3}
 800734c:	469e      	mov	lr, r3
 800734e:	4770      	bx	lr

08007350 <_fini>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr
