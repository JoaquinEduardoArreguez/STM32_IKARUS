
Ikarus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007248  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c8  080073c8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080073c8  080073c8  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073c8  080073c8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080073d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c70  2000017c  0800754c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  0800754c  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a116  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000387e  00000000  00000000  0003a2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  0003db40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001308  00000000  00000000  0003eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018038  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a52  00000000  00000000  00058330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078b13  00000000  00000000  0006ad82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000558c  00000000  00000000  000e3910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800733c 	.word	0x0800733c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800733c 	.word	0x0800733c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b24      	ldr	r3, [pc, #144]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a23      	ldr	r2, [pc, #140]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b21      	ldr	r3, [pc, #132]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1d      	ldr	r2, [pc, #116]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b18      	ldr	r3, [pc, #96]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	480c      	ldr	r0, [pc, #48]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001c8:	f001 fa76 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80001cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001e6:	f001 f90d 	bl	8001404 <HAL_GPIO_Init>

}
 80001ea:	bf00      	nop
 80001ec:	3720      	adds	r7, #32
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	40011000 	.word	0x40011000

080001fc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <MX_I2C2_Init+0x50>)
 8000202:	4a13      	ldr	r2, [pc, #76]	; (8000250 <MX_I2C2_Init+0x54>)
 8000204:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000206:	4b11      	ldr	r3, [pc, #68]	; (800024c <MX_I2C2_Init+0x50>)
 8000208:	4a12      	ldr	r2, [pc, #72]	; (8000254 <MX_I2C2_Init+0x58>)
 800020a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <MX_I2C2_Init+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_I2C2_Init+0x50>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <MX_I2C2_Init+0x50>)
 800021a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800021e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000220:	4b0a      	ldr	r3, [pc, #40]	; (800024c <MX_I2C2_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_I2C2_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <MX_I2C2_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <MX_I2C2_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <MX_I2C2_Init+0x50>)
 800023a:	f001 fa6d 	bl	8001718 <HAL_I2C_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000244:	f000 f9ce 	bl	80005e4 <Error_Handler>
  }

}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200003bc 	.word	0x200003bc
 8000250:	40005800 	.word	0x40005800
 8000254:	000186a0 	.word	0x000186a0

08000258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	f107 0310 	add.w	r3, r7, #16
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a16      	ldr	r2, [pc, #88]	; (80002cc <HAL_I2C_MspInit+0x74>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d124      	bne.n	80002c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000290:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000296:	2312      	movs	r3, #18
 8000298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800029a:	2303      	movs	r3, #3
 800029c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <HAL_I2C_MspInit+0x7c>)
 80002a6:	f001 f8ad 	bl	8001404 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b4:	61d3      	str	r3, [r2, #28]
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_I2C_MspInit+0x78>)
 80002b8:	69db      	ldr	r3, [r3, #28]
 80002ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80002c2:	bf00      	nop
 80002c4:	3720      	adds	r7, #32
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40005800 	.word	0x40005800
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40010c00 	.word	0x40010c00

080002d8 <HAL_TIM_PWM_Start_AllChannels>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef HAL_TIM_PWM_Start_AllChannels(TIM_HandleTypeDef *htim) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if (HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002e0:	2100      	movs	r1, #0
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f002 ffd4 	bl	8003290 <HAL_TIM_PWM_Start>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d116      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002ee:	2100      	movs	r1, #0
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f002 ffcd 	bl	8003290 <HAL_TIM_PWM_Start>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10f      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK
 80002fc:	2100      	movs	r1, #0
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f002 ffc6 	bl	8003290 <HAL_TIM_PWM_Start>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d108      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
			&& HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1) == HAL_OK) {
 800030a:	2100      	movs	r1, #0
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f002 ffbf 	bl	8003290 <HAL_TIM_PWM_Start>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d101      	bne.n	800031c <HAL_TIM_PWM_Start_AllChannels+0x44>
		return HAL_OK;
 8000318:	2300      	movs	r3, #0
 800031a:	e000      	b.n	800031e <HAL_TIM_PWM_Start_AllChannels+0x46>
	}
	return HAL_ERROR;
 800031c:	2301      	movs	r3, #1
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <set_pmw_handler_all_channels_pulse_width>:
;

void set_pmw_handler_all_channels_pulse_width(TIM_HandleTypeDef handler,
		unsigned int pulseWidth) {
 8000326:	b084      	sub	sp, #16
 8000328:	b490      	push	{r4, r7}
 800032a:	af00      	add	r7, sp, #0
 800032c:	f107 0408 	add.w	r4, r7, #8
 8000330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	handler.Instance->CCR1 = pulseWidth;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
	handler.Instance->CCR2 = pulseWidth;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800033e:	639a      	str	r2, [r3, #56]	; 0x38
	handler.Instance->CCR3 = pulseWidth;
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000344:	63da      	str	r2, [r3, #60]	; 0x3c
	handler.Instance->CCR4 = pulseWidth;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800034a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc90      	pop	{r4, r7}
 8000352:	b004      	add	sp, #16
 8000354:	4770      	bx	lr
	...

08000358 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035a:	b093      	sub	sp, #76	; 0x4c
 800035c:	af0e      	add	r7, sp, #56	; 0x38
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800035e:	f000 febf 	bl	80010e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000362:	f000 f8e5 	bl	8000530 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000366:	f7ff fef1 	bl	800014c <MX_GPIO_Init>
	MX_I2C2_Init();
 800036a:	f7ff ff47 	bl	80001fc <MX_I2C2_Init>
	MX_SPI1_Init();
 800036e:	f000 f93f 	bl	80005f0 <MX_SPI1_Init>
	MX_SPI2_Init();
 8000372:	f000 f973 	bl	800065c <MX_SPI2_Init>
	MX_TIM1_Init();
 8000376:	f000 faf3 	bl	8000960 <MX_TIM1_Init>
	MX_TIM2_Init();
 800037a:	f000 fba9 	bl	8000ad0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800037e:	f000 fc3d 	bl	8000bfc <MX_TIM3_Init>
	MX_TIM4_Init();
 8000382:	f000 fcd3 	bl	8000d2c <MX_TIM4_Init>
	MX_USB_DEVICE_Init();
 8000386:	f006 fac7 	bl	8006918 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	unsigned int position_minimum = 350;
 800038a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800038e:	60bb      	str	r3, [r7, #8]
	unsigned int position_center = 750;
 8000390:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000394:	607b      	str	r3, [r7, #4]
	unsigned int position_maximum = 1250;
 8000396:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800039a:	603b      	str	r3, [r7, #0]

	unsigned int position = position_center;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	60fb      	str	r3, [r7, #12]

	set_pmw_handler_all_channels_pulse_width(htim1, position);
 80003a0:	4e5e      	ldr	r6, [pc, #376]	; (800051c <main+0x1c4>)
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	930c      	str	r3, [sp, #48]	; 0x30
 80003a6:	466d      	mov	r5, sp
 80003a8:	f106 0410 	add.w	r4, r6, #16
 80003ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003c0:	f7ff ffb1 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim2, position);
 80003c4:	4e56      	ldr	r6, [pc, #344]	; (8000520 <main+0x1c8>)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	930c      	str	r3, [sp, #48]	; 0x30
 80003ca:	466d      	mov	r5, sp
 80003cc:	f106 0410 	add.w	r4, r6, #16
 80003d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003e4:	f7ff ff9f 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim3, position);
 80003e8:	4e4e      	ldr	r6, [pc, #312]	; (8000524 <main+0x1cc>)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	930c      	str	r3, [sp, #48]	; 0x30
 80003ee:	466d      	mov	r5, sp
 80003f0:	f106 0410 	add.w	r4, r6, #16
 80003f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000400:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000404:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000408:	f7ff ff8d 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
	set_pmw_handler_all_channels_pulse_width(htim4, position);
 800040c:	4e46      	ldr	r6, [pc, #280]	; (8000528 <main+0x1d0>)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	930c      	str	r3, [sp, #48]	; 0x30
 8000412:	466d      	mov	r5, sp
 8000414:	f106 0410 	add.w	r4, r6, #16
 8000418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800041c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000420:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000424:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000428:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800042c:	f7ff ff7b 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>

	HAL_TIM_PWM_Start_AllChannels(&htim1);
 8000430:	483a      	ldr	r0, [pc, #232]	; (800051c <main+0x1c4>)
 8000432:	f7ff ff51 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim2);
 8000436:	483a      	ldr	r0, [pc, #232]	; (8000520 <main+0x1c8>)
 8000438:	f7ff ff4e 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim3);
 800043c:	4839      	ldr	r0, [pc, #228]	; (8000524 <main+0x1cc>)
 800043e:	f7ff ff4b 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
	HAL_TIM_PWM_Start_AllChannels(&htim4);
 8000442:	4839      	ldr	r0, [pc, #228]	; (8000528 <main+0x1d0>)
 8000444:	f7ff ff48 	bl	80002d8 <HAL_TIM_PWM_Start_AllChannels>
			uint8_t Buf[] = "\r\nWe are ON baby\r\n";
			CDC_Transmit_FS(Buf, sizeof(Buf));
		}
		*/

		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8000448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044c:	4837      	ldr	r0, [pc, #220]	; (800052c <main+0x1d4>)
 800044e:	f001 f94b 	bl	80016e8 <HAL_GPIO_TogglePin>

		set_pmw_handler_all_channels_pulse_width(htim1, position);
 8000452:	4e32      	ldr	r6, [pc, #200]	; (800051c <main+0x1c4>)
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	930c      	str	r3, [sp, #48]	; 0x30
 8000458:	466d      	mov	r5, sp
 800045a:	f106 0410 	add.w	r4, r6, #16
 800045e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000466:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800046a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800046e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000472:	f7ff ff58 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim2, position);
 8000476:	4e2a      	ldr	r6, [pc, #168]	; (8000520 <main+0x1c8>)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	930c      	str	r3, [sp, #48]	; 0x30
 800047c:	466d      	mov	r5, sp
 800047e:	f106 0410 	add.w	r4, r6, #16
 8000482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800048a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800048e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000492:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000496:	f7ff ff46 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim3, position);
 800049a:	4e22      	ldr	r6, [pc, #136]	; (8000524 <main+0x1cc>)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	930c      	str	r3, [sp, #48]	; 0x30
 80004a0:	466d      	mov	r5, sp
 80004a2:	f106 0410 	add.w	r4, r6, #16
 80004a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004ba:	f7ff ff34 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>
		set_pmw_handler_all_channels_pulse_width(htim4, position);
 80004be:	4e1a      	ldr	r6, [pc, #104]	; (8000528 <main+0x1d0>)
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	930c      	str	r3, [sp, #48]	; 0x30
 80004c4:	466d      	mov	r5, sp
 80004c6:	f106 0410 	add.w	r4, r6, #16
 80004ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004de:	f7ff ff22 	bl	8000326 <set_pmw_handler_all_channels_pulse_width>

		position++;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
		if (position >= position_maximum) {
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d30f      	bcc.n	8000510 <main+0x1b8>
			position = position_minimum;
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	60fb      	str	r3, [r7, #12]
			htim2.Instance->CCR1 = position;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <main+0x1c8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin,
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <main+0x1d4>)
 8000504:	f001 f8d8 	bl	80016b8 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_Delay(600);
 8000508:	f44f 7016 	mov.w	r0, #600	; 0x258
 800050c:	f000 fe4a 	bl	80011a4 <HAL_Delay>
		}

		HAL_Delay(5000);
 8000510:	f241 3088 	movw	r0, #5000	; 0x1388
 8000514:	f000 fe46 	bl	80011a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8000518:	e796      	b.n	8000448 <main+0xf0>
 800051a:	bf00      	nop
 800051c:	20000808 	.word	0x20000808
 8000520:	20000848 	.word	0x20000848
 8000524:	200007c8 	.word	0x200007c8
 8000528:	20000788 	.word	0x20000788
 800052c:	40011000 	.word	0x40011000

08000530 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053a:	2228      	movs	r2, #40	; 0x28
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fef3 	bl	800732a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800057c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f8d0 	bl	800272c <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x66>
		Error_Handler();
 8000592:	f000 f827 	bl	80005e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fb3a 	bl	8002c2c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x92>
		Error_Handler();
 80005be:	f000 f811 	bl	80005e4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005c2:	2310      	movs	r3, #16
 80005c4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fcb5 	bl	8002f3c <HAL_RCCEx_PeriphCLKConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xac>
		Error_Handler();
 80005d8:	f000 f804 	bl	80005e4 <Error_Handler>
	}
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_SPI1_Init+0x64>)
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <MX_SPI1_Init+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_SPI1_Init+0x64>)
 80005fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_SPI1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_SPI1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_SPI1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_SPI1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_SPI1_Init+0x64>)
 800061c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000620:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_SPI1_Init+0x64>)
 8000624:	2208      	movs	r2, #8
 8000626:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_SPI1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_SPI1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_SPI1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_SPI1_Init+0x64>)
 800063c:	220a      	movs	r2, #10
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_SPI1_Init+0x64>)
 8000642:	f002 fd31 	bl	80030a8 <HAL_SPI_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800064c:	f7ff ffca 	bl	80005e4 <Error_Handler>
  }

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000730 	.word	0x20000730
 8000658:	40013000 	.word	0x40013000

0800065c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_SPI2_Init+0x64>)
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <MX_SPI2_Init+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_SPI2_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_SPI2_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_SPI2_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_SPI2_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_SPI2_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_SPI2_Init+0x64>)
 8000686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_SPI2_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_SPI2_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_SPI2_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_SPI2_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_SPI2_Init+0x64>)
 80006a6:	220a      	movs	r2, #10
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_SPI2_Init+0x64>)
 80006ac:	f002 fcfc 	bl	80030a8 <HAL_SPI_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80006b6:	f7ff ff95 	bl	80005e4 <Error_Handler>
  }

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200006d8 	.word	0x200006d8
 80006c4:	40003800 	.word	0x40003800

080006c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	; 0x30
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a3e      	ldr	r2, [pc, #248]	; (80007dc <HAL_SPI_MspInit+0x114>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d13e      	bne.n	8000766 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 80006ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b3a      	ldr	r3, [pc, #232]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a36      	ldr	r2, [pc, #216]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000718:	2328      	movs	r3, #40	; 0x28
 800071a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	482e      	ldr	r0, [pc, #184]	; (80007e4 <HAL_SPI_MspInit+0x11c>)
 800072c:	f000 fe6a 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000730:	2310      	movs	r3, #16
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4828      	ldr	r0, [pc, #160]	; (80007e4 <HAL_SPI_MspInit+0x11c>)
 8000744:	f000 fe5e 	bl	8001404 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <HAL_SPI_MspInit+0x120>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800074e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000750:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <HAL_SPI_MspInit+0x120>)
 8000760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000762:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000764:	e036      	b.n	80007d4 <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a20      	ldr	r2, [pc, #128]	; (80007ec <HAL_SPI_MspInit+0x124>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d131      	bne.n	80007d4 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	61d3      	str	r3, [r2, #28]
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_SPI_MspInit+0x118>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80007a0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <HAL_SPI_MspInit+0x11c>)
 80007b6:	f000 fe25 	bl	8001404 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <HAL_SPI_MspInit+0x11c>)
 80007d0:	f000 fe18 	bl	8001404 <HAL_GPIO_Init>
}
 80007d4:	bf00      	nop
 80007d6:	3730      	adds	r7, #48	; 0x30
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40013000 	.word	0x40013000
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010c00 	.word	0x40010c00
 80007e8:	40010000 	.word	0x40010000
 80007ec:	40003800 	.word	0x40003800

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_MspInit+0x5c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_MspInit+0x5c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x5c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x5c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x5c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x5c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_MspInit+0x60>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_MspInit+0x60>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <HardFault_Handler+0x4>

08000866 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <MemManage_Handler+0x4>

0800086c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <BusFault_Handler+0x4>

08000872 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <UsageFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 fc64 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008ae:	f001 f962 	bl	8001b76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000b80 	.word	0x20000b80

080008bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <TIM2_IRQHandler+0x10>)
 80008c2:	f002 fd17 	bl	80032f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000848 	.word	0x20000848

080008d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <TIM3_IRQHandler+0x10>)
 80008d6:	f002 fd0d 	bl	80032f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200007c8 	.word	0x200007c8

080008e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <TIM4_IRQHandler+0x10>)
 80008ea:	f002 fd03 	bl	80032f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000788 	.word	0x20000788

080008f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <SystemInit+0x5c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <SystemInit+0x5c>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <SystemInit+0x5c>)
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	4911      	ldr	r1, [pc, #68]	; (8000954 <SystemInit+0x5c>)
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <SystemInit+0x60>)
 8000910:	4013      	ands	r3, r2
 8000912:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <SystemInit+0x5c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <SystemInit+0x5c>)
 800091a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800091e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000922:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <SystemInit+0x5c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <SystemInit+0x5c>)
 800092a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800092e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <SystemInit+0x5c>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <SystemInit+0x5c>)
 8000936:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800093a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SystemInit+0x5c>)
 800093e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000942:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <SystemInit+0x64>)
 8000946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800094a:	609a      	str	r2, [r3, #8]
#endif 
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000
 8000958:	f8ff0000 	.word	0xf8ff0000
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b096      	sub	sp, #88	; 0x58
 8000964:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2220      	movs	r2, #32
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f006 fcc6 	bl	800732a <memset>

  htim1.Instance = TIM1;
 800099e:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009a0:	4a4a      	ldr	r2, [pc, #296]	; (8000acc <MX_TIM1_Init+0x16c>)
 80009a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144-1;
 80009a4:	4b48      	ldr	r3, [pc, #288]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009a6:	228f      	movs	r2, #143	; 0x8f
 80009a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009b0:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80009b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ca:	483f      	ldr	r0, [pc, #252]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009cc:	f002 fbcd 	bl	800316a <HAL_TIM_Base_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009d6:	f7ff fe05 	bl	80005e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009e4:	4619      	mov	r1, r3
 80009e6:	4838      	ldr	r0, [pc, #224]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009e8:	f002 feb2 	bl	8003750 <HAL_TIM_ConfigClockSource>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009f2:	f7ff fdf7 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009f6:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <MX_TIM1_Init+0x168>)
 80009f8:	f002 fbe2 	bl	80031c0 <HAL_TIM_OC_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a02:	f7ff fdef 	bl	80005e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a12:	4619      	mov	r1, r3
 8000a14:	482c      	ldr	r0, [pc, #176]	; (8000ac8 <MX_TIM1_Init+0x168>)
 8000a16:	f003 fa23 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a20:	f7ff fde0 	bl	80005e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <MX_TIM1_Init+0x168>)
 8000a4a:	f002 fd5b 	bl	8003504 <HAL_TIM_OC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a54:	f7ff fdc6 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <MX_TIM1_Init+0x168>)
 8000a62:	f002 fd4f 	bl	8003504 <HAL_TIM_OC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a6c:	f7ff fdba 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	2208      	movs	r2, #8
 8000a76:	4619      	mov	r1, r3
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <MX_TIM1_Init+0x168>)
 8000a7a:	f002 fd43 	bl	8003504 <HAL_TIM_OC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a84:	f7ff fdae 	bl	80005e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM1_Init+0x168>)
 8000aac:	f003 fa1c 	bl	8003ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000ab6:	f7ff fd95 	bl	80005e4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM1_Init+0x168>)
 8000abc:	f000 fa3e 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3758      	adds	r7, #88	; 0x58
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000808 	.word	0x20000808
 8000acc:	40012c00 	.word	0x40012c00

08000ad0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000b00:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000b08:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b0a:	228f      	movs	r2, #143	; 0x8f
 8000b0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b16:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b28:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b2a:	f002 fb1e 	bl	800316a <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b34:	f7ff fd56 	bl	80005e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b42:	4619      	mov	r1, r3
 8000b44:	482c      	ldr	r0, [pc, #176]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b46:	f002 fe03 	bl	8003750 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b50:	f7ff fd48 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b54:	4828      	ldr	r0, [pc, #160]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b56:	f002 fb67 	bl	8003228 <HAL_TIM_PWM_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b60:	f7ff fd40 	bl	80005e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4619      	mov	r1, r3
 8000b72:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b74:	f003 f974 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b7e:	f7ff fd31 	bl	80005e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b82:	2360      	movs	r3, #96	; 0x60
 8000b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4817      	ldr	r0, [pc, #92]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000b9a:	f002 fd13 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ba4:	f7ff fd1e 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2204      	movs	r2, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000bb0:	f002 fd08 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bba:	f7ff fd13 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000bc6:	f002 fcfd 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000bd0:	f7ff fd08 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000bdc:	f002 fcf2 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000be6:	f7ff fcfd 	bl	80005e4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <MX_TIM2_Init+0x128>)
 8000bec:	f000 f9a6 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000848 	.word	0x20000848

08000bfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	f107 0320 	add.w	r3, r7, #32
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	615a      	str	r2, [r3, #20]
 8000c2a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c2e:	4a3e      	ldr	r2, [pc, #248]	; (8000d28 <MX_TIM3_Init+0x12c>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 144-1;
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c34:	228f      	movs	r2, #143	; 0x8f
 8000c36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c40:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c52:	4834      	ldr	r0, [pc, #208]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c54:	f002 fa89 	bl	800316a <HAL_TIM_Base_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c5e:	f7ff fcc1 	bl	80005e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	482d      	ldr	r0, [pc, #180]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c70:	f002 fd6e 	bl	8003750 <HAL_TIM_ConfigClockSource>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c7a:	f7ff fcb3 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c7e:	4829      	ldr	r0, [pc, #164]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c80:	f002 fad2 	bl	8003228 <HAL_TIM_PWM_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c8a:	f7ff fcab 	bl	80005e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4821      	ldr	r0, [pc, #132]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c9e:	f003 f8df 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ca8:	f7ff fc9c 	bl	80005e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cac:	2360      	movs	r3, #96	; 0x60
 8000cae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4818      	ldr	r0, [pc, #96]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000cc4:	f002 fc7e 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cce:	f7ff fc89 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000cda:	f002 fc73 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000ce4:	f7ff fc7e 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2208      	movs	r2, #8
 8000cec:	4619      	mov	r1, r3
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000cf0:	f002 fc68 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000cfa:	f7ff fc73 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	220c      	movs	r2, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000d06:	f002 fc5d 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000d10:	f7ff fc68 	bl	80005e4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000d16:	f000 f911 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	; 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200007c8 	.word	0x200007c8
 8000d28:	40000400 	.word	0x40000400

08000d2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000d5c:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <MX_TIM4_Init+0x12c>)
 8000d60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8000d62:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000d64:	228f      	movs	r2, #143	; 0x8f
 8000d66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000d6e:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000d70:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d82:	4834      	ldr	r0, [pc, #208]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000d84:	f002 f9f1 	bl	800316a <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d8e:	f7ff fc29 	bl	80005e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	482d      	ldr	r0, [pc, #180]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000da0:	f002 fcd6 	bl	8003750 <HAL_TIM_ConfigClockSource>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000daa:	f7ff fc1b 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dae:	4829      	ldr	r0, [pc, #164]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000db0:	f002 fa3a 	bl	8003228 <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000dba:	f7ff fc13 	bl	80005e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4821      	ldr	r0, [pc, #132]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000dce:	f003 f847 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000dd8:	f7ff fc04 	bl	80005e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	; 0x60
 8000dde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4818      	ldr	r0, [pc, #96]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000df4:	f002 fbe6 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000dfe:	f7ff fbf1 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2204      	movs	r2, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4812      	ldr	r0, [pc, #72]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000e0a:	f002 fbdb 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e14:	f7ff fbe6 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000e20:	f002 fbd0 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000e2a:	f7ff fbdb 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	220c      	movs	r2, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000e36:	f002 fbc5 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000e40:	f7ff fbd0 	bl	80005e4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <MX_TIM4_Init+0x128>)
 8000e46:	f000 f879 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000e4a:	bf00      	nop
 8000e4c:	3738      	adds	r7, #56	; 0x38
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000788 	.word	0x20000788
 8000e58:	40000800 	.word	0x40000800

08000e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a30      	ldr	r2, [pc, #192]	; (8000f2c <HAL_TIM_Base_MspInit+0xd0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10c      	bne.n	8000e88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000e74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e86:	e04c      	b.n	8000f22 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e90:	d114      	bne.n	8000ebc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	201c      	movs	r0, #28
 8000eb0:	f000 fa71 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb4:	201c      	movs	r0, #28
 8000eb6:	f000 fa8a 	bl	80013ce <HAL_NVIC_EnableIRQ>
}
 8000eba:	e032      	b.n	8000f22 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_TIM_Base_MspInit+0xd8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d114      	bne.n	8000ef0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	201d      	movs	r0, #29
 8000ee4:	f000 fa57 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee8:	201d      	movs	r0, #29
 8000eea:	f000 fa70 	bl	80013ce <HAL_NVIC_EnableIRQ>
}
 8000eee:	e018      	b.n	8000f22 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_TIM_Base_MspInit+0xdc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d113      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_TIM_Base_MspInit+0xd4>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	201e      	movs	r0, #30
 8000f18:	f000 fa3d 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f1c:	201e      	movs	r0, #30
 8000f1e:	f000 fa56 	bl	80013ce <HAL_NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40012c00 	.word	0x40012c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40000400 	.word	0x40000400
 8000f38:	40000800 	.word	0x40000800

08000f3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a49      	ldr	r2, [pc, #292]	; (800107c <HAL_TIM_MspPostInit+0x140>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d119      	bne.n	8000f90 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b48      	ldr	r3, [pc, #288]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a47      	ldr	r2, [pc, #284]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b45      	ldr	r3, [pc, #276]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f74:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	4619      	mov	r1, r3
 8000f88:	483e      	ldr	r0, [pc, #248]	; (8001084 <HAL_TIM_MspPostInit+0x148>)
 8000f8a:	f000 fa3b 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f8e:	e071      	b.n	8001074 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f98:	d118      	bne.n	8000fcc <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b39      	ldr	r3, [pc, #228]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a38      	ldr	r2, [pc, #224]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	482f      	ldr	r0, [pc, #188]	; (8001084 <HAL_TIM_MspPostInit+0x148>)
 8000fc6:	f000 fa1d 	bl	8001404 <HAL_GPIO_Init>
}
 8000fca:	e053      	b.n	8001074 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <HAL_TIM_MspPostInit+0x14c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d130      	bne.n	8001038 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a23      	ldr	r2, [pc, #140]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2302      	movs	r3, #2
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4619      	mov	r1, r3
 8001018:	481a      	ldr	r0, [pc, #104]	; (8001084 <HAL_TIM_MspPostInit+0x148>)
 800101a:	f000 f9f3 	bl	8001404 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101e:	2303      	movs	r3, #3
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2302      	movs	r3, #2
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4619      	mov	r1, r3
 8001030:	4816      	ldr	r0, [pc, #88]	; (800108c <HAL_TIM_MspPostInit+0x150>)
 8001032:	f000 f9e7 	bl	8001404 <HAL_GPIO_Init>
}
 8001036:	e01d      	b.n	8001074 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_TIM_MspPostInit+0x154>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d118      	bne.n	8001074 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6193      	str	r3, [r2, #24]
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_TIM_MspPostInit+0x144>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800105a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2302      	movs	r3, #2
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4619      	mov	r1, r3
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <HAL_TIM_MspPostInit+0x150>)
 8001070:	f000 f9c8 	bl	8001404 <HAL_GPIO_Init>
}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40012c00 	.word	0x40012c00
 8001080:	40021000 	.word	0x40021000
 8001084:	40010800 	.word	0x40010800
 8001088:	40000400 	.word	0x40000400
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40000800 	.word	0x40000800

08001094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001094:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001096:	e003      	b.n	80010a0 <LoopCopyDataInit>

08001098 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800109a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800109c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800109e:	3104      	adds	r1, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010a8:	d3f6      	bcc.n	8001098 <CopyDataInit>
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010ac:	e002      	b.n	80010b4 <LoopFillZerobss>

080010ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010b0:	f842 3b04 	str.w	r3, [r2], #4

080010b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010b8:	d3f9      	bcc.n	80010ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ba:	f7ff fc1d 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f006 f905 	bl	80072cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c2:	f7ff f949 	bl	8000358 <main>
  bx lr
 80010c6:	4770      	bx	lr
  ldr r3, =_sidata
 80010c8:	080073d0 	.word	0x080073d0
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010d0:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80010d4:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80010d8:	20000dec 	.word	0x20000dec

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f945 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fb78 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f95d 	bl	80013ea <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f925 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_IncTick+0x20>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_IncTick+0x20>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000008 	.word	0x20000008
 800118c:	20000888 	.word	0x20000888

08001190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <HAL_GetTick+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000888 	.word	0x20000888

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff fff0 	bl	8001190 <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_Delay+0x40>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffe0 	bl	8001190 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000008 	.word	0x20000008

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4906      	ldr	r1, [pc, #24]	; (8001280 <__NVIC_EnableIRQ+0x34>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff90 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff2d 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff42 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff90 	bl	80012d8 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5f 	bl	8001284 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff35 	bl	800124c <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e127      	b.n	8001668 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001418:	2201      	movs	r2, #1
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8116 	bne.w	8001662 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b12      	cmp	r3, #18
 800143c:	d034      	beq.n	80014a8 <HAL_GPIO_Init+0xa4>
 800143e:	2b12      	cmp	r3, #18
 8001440:	d80d      	bhi.n	800145e <HAL_GPIO_Init+0x5a>
 8001442:	2b02      	cmp	r3, #2
 8001444:	d02b      	beq.n	800149e <HAL_GPIO_Init+0x9a>
 8001446:	2b02      	cmp	r3, #2
 8001448:	d804      	bhi.n	8001454 <HAL_GPIO_Init+0x50>
 800144a:	2b00      	cmp	r3, #0
 800144c:	d031      	beq.n	80014b2 <HAL_GPIO_Init+0xae>
 800144e:	2b01      	cmp	r3, #1
 8001450:	d01c      	beq.n	800148c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001452:	e048      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001454:	2b03      	cmp	r3, #3
 8001456:	d043      	beq.n	80014e0 <HAL_GPIO_Init+0xdc>
 8001458:	2b11      	cmp	r3, #17
 800145a:	d01b      	beq.n	8001494 <HAL_GPIO_Init+0x90>
          break;
 800145c:	e043      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800145e:	4a89      	ldr	r2, [pc, #548]	; (8001684 <HAL_GPIO_Init+0x280>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d026      	beq.n	80014b2 <HAL_GPIO_Init+0xae>
 8001464:	4a87      	ldr	r2, [pc, #540]	; (8001684 <HAL_GPIO_Init+0x280>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d806      	bhi.n	8001478 <HAL_GPIO_Init+0x74>
 800146a:	4a87      	ldr	r2, [pc, #540]	; (8001688 <HAL_GPIO_Init+0x284>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d020      	beq.n	80014b2 <HAL_GPIO_Init+0xae>
 8001470:	4a86      	ldr	r2, [pc, #536]	; (800168c <HAL_GPIO_Init+0x288>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d01d      	beq.n	80014b2 <HAL_GPIO_Init+0xae>
          break;
 8001476:	e036      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001478:	4a85      	ldr	r2, [pc, #532]	; (8001690 <HAL_GPIO_Init+0x28c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d019      	beq.n	80014b2 <HAL_GPIO_Init+0xae>
 800147e:	4a85      	ldr	r2, [pc, #532]	; (8001694 <HAL_GPIO_Init+0x290>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d016      	beq.n	80014b2 <HAL_GPIO_Init+0xae>
 8001484:	4a84      	ldr	r2, [pc, #528]	; (8001698 <HAL_GPIO_Init+0x294>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0xae>
          break;
 800148a:	e02c      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e028      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	3304      	adds	r3, #4
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e023      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	3308      	adds	r3, #8
 80014a4:	623b      	str	r3, [r7, #32]
          break;
 80014a6:	e01e      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	330c      	adds	r3, #12
 80014ae:	623b      	str	r3, [r7, #32]
          break;
 80014b0:	e019      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ba:	2304      	movs	r3, #4
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e012      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d105      	bne.n	80014d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c8:	2308      	movs	r3, #8
 80014ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	611a      	str	r2, [r3, #16]
          break;
 80014d2:	e008      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d4:	2308      	movs	r3, #8
 80014d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	615a      	str	r2, [r3, #20]
          break;
 80014de:	e002      	b.n	80014e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2bff      	cmp	r3, #255	; 0xff
 80014ea:	d801      	bhi.n	80014f0 <HAL_GPIO_Init+0xec>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	e001      	b.n	80014f4 <HAL_GPIO_Init+0xf0>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3304      	adds	r3, #4
 80014f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2bff      	cmp	r3, #255	; 0xff
 80014fa:	d802      	bhi.n	8001502 <HAL_GPIO_Init+0xfe>
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	e002      	b.n	8001508 <HAL_GPIO_Init+0x104>
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	3b08      	subs	r3, #8
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	210f      	movs	r1, #15
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	401a      	ands	r2, r3
 800151a:	6a39      	ldr	r1, [r7, #32]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	431a      	orrs	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8096 	beq.w	8001662 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001536:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_GPIO_Init+0x298>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_GPIO_Init+0x298>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b56      	ldr	r3, [pc, #344]	; (800169c <HAL_GPIO_Init+0x298>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800154e:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_GPIO_Init+0x29c>)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_GPIO_Init+0x2a0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x19e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <HAL_GPIO_Init+0x2a4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x19a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a49      	ldr	r2, [pc, #292]	; (80016ac <HAL_GPIO_Init+0x2a8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x196>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a48      	ldr	r2, [pc, #288]	; (80016b0 <HAL_GPIO_Init+0x2ac>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x192>
 8001592:	2303      	movs	r3, #3
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x1a0>
 8001596:	2304      	movs	r3, #4
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x1a0>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x1a0>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x1a0>
 80015a2:	2300      	movs	r3, #0
 80015a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b4:	493a      	ldr	r1, [pc, #232]	; (80016a0 <HAL_GPIO_Init+0x29c>)
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015ce:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4938      	ldr	r1, [pc, #224]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
 80015da:	e006      	b.n	80015ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015dc:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	4933      	ldr	r1, [pc, #204]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	492e      	ldr	r1, [pc, #184]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
 8001602:	e006      	b.n	8001612 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	43db      	mvns	r3, r3
 800160c:	4929      	ldr	r1, [pc, #164]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 800160e:	4013      	ands	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	4924      	ldr	r1, [pc, #144]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800162c:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	43db      	mvns	r3, r3
 8001634:	491f      	ldr	r1, [pc, #124]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 8001636:	4013      	ands	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	491a      	ldr	r1, [pc, #104]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	60cb      	str	r3, [r1, #12]
 8001652:	e006      	b.n	8001662 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	43db      	mvns	r3, r3
 800165c:	4915      	ldr	r1, [pc, #84]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 800165e:	4013      	ands	r3, r2
 8001660:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	3301      	adds	r3, #1
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f47f aed0 	bne.w	8001418 <HAL_GPIO_Init+0x14>
  }
}
 8001678:	bf00      	nop
 800167a:	372c      	adds	r7, #44	; 0x2c
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	10210000 	.word	0x10210000
 8001688:	10110000 	.word	0x10110000
 800168c:	10120000 	.word	0x10120000
 8001690:	10310000 	.word	0x10310000
 8001694:	10320000 	.word	0x10320000
 8001698:	10220000 	.word	0x10220000
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40011400 	.word	0x40011400
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001706:	e002      	b.n	800170e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001708:	887a      	ldrh	r2, [r7, #2]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	611a      	str	r2, [r3, #16]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e10f      	b.n	800194a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7fe fd8a 	bl	8000258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2224      	movs	r2, #36	; 0x24
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800175c:	f001 fbbc 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8001760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a7b      	ldr	r2, [pc, #492]	; (8001954 <HAL_I2C_Init+0x23c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d807      	bhi.n	800177c <HAL_I2C_Init+0x64>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_I2C_Init+0x240>)
 8001770:	4293      	cmp	r3, r2
 8001772:	bf94      	ite	ls
 8001774:	2301      	movls	r3, #1
 8001776:	2300      	movhi	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	e006      	b.n	800178a <HAL_I2C_Init+0x72>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a77      	ldr	r2, [pc, #476]	; (800195c <HAL_I2C_Init+0x244>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0db      	b.n	800194a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a72      	ldr	r2, [pc, #456]	; (8001960 <HAL_I2C_Init+0x248>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a64      	ldr	r2, [pc, #400]	; (8001954 <HAL_I2C_Init+0x23c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d802      	bhi.n	80017cc <HAL_I2C_Init+0xb4>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3301      	adds	r3, #1
 80017ca:	e009      	b.n	80017e0 <HAL_I2C_Init+0xc8>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	4a63      	ldr	r2, [pc, #396]	; (8001964 <HAL_I2C_Init+0x24c>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	3301      	adds	r3, #1
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4956      	ldr	r1, [pc, #344]	; (8001954 <HAL_I2C_Init+0x23c>)
 80017fc:	428b      	cmp	r3, r1
 80017fe:	d80d      	bhi.n	800181c <HAL_I2C_Init+0x104>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e59      	subs	r1, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fbb1 f3f3 	udiv	r3, r1, r3
 800180e:	3301      	adds	r3, #1
 8001810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	bf38      	it	cc
 8001818:	2304      	movcc	r3, #4
 800181a:	e04f      	b.n	80018bc <HAL_I2C_Init+0x1a4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_I2C_Init+0x130>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e012      	b.n	800186e <HAL_I2C_Init+0x156>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Init+0x15e>
 8001872:	2301      	movs	r3, #1
 8001874:	e022      	b.n	80018bc <HAL_I2C_Init+0x1a4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10e      	bne.n	800189c <HAL_I2C_Init+0x184>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e58      	subs	r0, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	e00f      	b.n	80018bc <HAL_I2C_Init+0x1a4>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	6809      	ldr	r1, [r1, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6911      	ldr	r1, [r2, #16]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	000186a0 	.word	0x000186a0
 8001958:	001e847f 	.word	0x001e847f
 800195c:	003d08ff 	.word	0x003d08ff
 8001960:	431bde83 	.word	0x431bde83
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	b08b      	sub	sp, #44	; 0x2c
 800196c:	af06      	add	r7, sp, #24
 800196e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0d3      	b.n	8001b22 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f005 f9fe 	bl	8006d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fb2b 	bl	8003ffc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	687e      	ldr	r6, [r7, #4]
 80019ae:	466d      	mov	r5, sp
 80019b0:	f106 0410 	add.w	r4, r6, #16
 80019b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	602b      	str	r3, [r5, #0]
 80019bc:	1d33      	adds	r3, r6, #4
 80019be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f002 faf4 	bl	8003fae <USB_CoreInit>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0a4      	b.n	8001b22 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fb28 	bl	8004034 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e035      	b.n	8001a56 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	015b      	lsls	r3, r3, #5
 80019f0:	4413      	add	r3, r2
 80019f2:	3329      	adds	r3, #41	; 0x29
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	015b      	lsls	r3, r3, #5
 80019fe:	4413      	add	r3, r2
 8001a00:	3328      	adds	r3, #40	; 0x28
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	b291      	uxth	r1, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	4413      	add	r3, r2
 8001a12:	3336      	adds	r3, #54	; 0x36
 8001a14:	460a      	mov	r2, r1
 8001a16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	015b      	lsls	r3, r3, #5
 8001a1e:	4413      	add	r3, r2
 8001a20:	332b      	adds	r3, #43	; 0x2b
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3338      	adds	r3, #56	; 0x38
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	015b      	lsls	r3, r3, #5
 8001a3a:	4413      	add	r3, r2
 8001a3c:	333c      	adds	r3, #60	; 0x3c
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	3302      	adds	r3, #2
 8001a48:	015b      	lsls	r3, r3, #5
 8001a4a:	4413      	add	r3, r2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	3301      	adds	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3c4      	bcc.n	80019ea <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e031      	b.n	8001aca <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	015b      	lsls	r3, r3, #5
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	015b      	lsls	r3, r3, #5
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	015b      	lsls	r3, r3, #5
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	015b      	lsls	r3, r3, #5
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	330a      	adds	r3, #10
 8001abc:	015b      	lsls	r3, r3, #5
 8001abe:	4413      	add	r3, r2
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c8      	bcc.n	8001a66 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	687e      	ldr	r6, [r7, #4]
 8001adc:	466d      	mov	r5, sp
 8001ade:	f106 0410 	add.w	r4, r6, #16
 8001ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	602b      	str	r3, [r5, #0]
 8001aea:	1d33      	adds	r3, r6, #4
 8001aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aee:	6838      	ldr	r0, [r7, #0]
 8001af0:	f002 faac 	bl	800404c <USB_DevInit>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00d      	b.n	8001b22 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fae9 	bl	80050f2 <USB_DevDisconnect>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_PCD_Start+0x16>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e016      	b.n	8001b6e <HAL_PCD_Start+0x44>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b48:	2101      	movs	r1, #1
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f005 fb87 	bl	800725e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fac2 	bl	80050de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fa35 	bl	8003fce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fabf 	bl	8005106 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b92:	d102      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 faf3 	bl	8002180 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fab1 	bl	8005106 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d112      	bne.n	8001bd6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f005 f956 	bl	8006e7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8de 	bl	8001d92 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fa93 	bl	8005106 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bea:	d10b      	bne.n	8001c04 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fa7c 	bl	8005106 <USB_ReadInterrupts>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c18:	d10b      	bne.n	8001c32 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fa65 	bl	8005106 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c46:	d126      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0204 	bic.w	r2, r2, #4
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0208 	bic.w	r2, r2, #8
 8001c72:	b292      	uxth	r2, r2
 8001c74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f005 f937 	bl	8006eec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c90:	b292      	uxth	r2, r2
 8001c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fa33 	bl	8005106 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001caa:	d13d      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0208 	orr.w	r2, r2, #8
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd6:	b292      	uxth	r2, r2
 8001cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0204 	orr.w	r2, r2, #4
 8001cee:	b292      	uxth	r2, r2
 8001cf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fa04 	bl	8005106 <USB_ReadInterrupts>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d08:	d10b      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f005 f8c8 	bl	8006eb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 f9ea 	bl	8005106 <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d10e      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d50:	b292      	uxth	r2, r2
 8001d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f005 f881 	bl	8006e5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 f9d0 	bl	8005106 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d70:	d10b      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_PCD_SetAddress+0x1a>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e013      	b.n	8001dd4 <HAL_PCD_SetAddress+0x42>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 f977 	bl	80050b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	70fb      	strb	r3, [r7, #3]
 8001dee:	460b      	mov	r3, r1
 8001df0:	803b      	strh	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0b      	bge.n	8001e1a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	015b      	lsls	r3, r3, #5
 8001e0a:	3328      	adds	r3, #40	; 0x28
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	705a      	strb	r2, [r3, #1]
 8001e18:	e00b      	b.n	8001e32 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	015b      	lsls	r3, r3, #5
 8001e22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e3e:	883a      	ldrh	r2, [r7, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	78ba      	ldrb	r2, [r7, #2]
 8001e48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e5c:	78bb      	ldrb	r3, [r7, #2]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d102      	bne.n	8001e68 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_PCD_EP_Open+0x9a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e00e      	b.n	8001e94 <HAL_PCD_EP_Open+0xb8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68f9      	ldr	r1, [r7, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 f905 	bl	8004094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001e92:	7afb      	ldrb	r3, [r7, #11]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	da0b      	bge.n	8001ec8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	015b      	lsls	r3, r3, #5
 8001eb8:	3328      	adds	r3, #40	; 0x28
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	705a      	strb	r2, [r3, #1]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	015b      	lsls	r3, r3, #5
 8001ed0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_EP_Close+0x5e>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e00e      	b.n	8001f18 <HAL_PCD_EP_Close+0x7c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68f9      	ldr	r1, [r7, #12]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fbb1 	bl	8004670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	015b      	lsls	r3, r3, #5
 8001f38:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2200      	movs	r2, #0
 8001f58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f66:	7afb      	ldrb	r3, [r7, #11]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6979      	ldr	r1, [r7, #20]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f002 fd10 	bl	800499c <USB_EPStartXfer>
 8001f7c:	e005      	b.n	8001f8a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6979      	ldr	r1, [r7, #20]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fd09 	bl	800499c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	330a      	adds	r3, #10
 8001faa:	015b      	lsls	r3, r3, #5
 8001fac:	4413      	add	r3, r2
 8001fae:	3304      	adds	r3, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	015b      	lsls	r3, r3, #5
 8001fd4:	3328      	adds	r3, #40	; 0x28
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6979      	ldr	r1, [r7, #20]
 8002010:	4618      	mov	r0, r3
 8002012:	f002 fcc3 	bl	800499c <USB_EPStartXfer>
 8002016:	e005      	b.n	8002024 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6979      	ldr	r1, [r7, #20]
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fcbc 	bl	800499c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 0207 	and.w	r2, r3, #7
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d901      	bls.n	800204c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e046      	b.n	80020da <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800204c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da0b      	bge.n	800206c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	015b      	lsls	r3, r3, #5
 800205c:	3328      	adds	r3, #40	; 0x28
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	705a      	strb	r2, [r3, #1]
 800206a:	e009      	b.n	8002080 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	015b      	lsls	r3, r3, #5
 8002070:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_PCD_EP_SetStall+0x72>
 800209c:	2302      	movs	r3, #2
 800209e:	e01c      	b.n	80020da <HAL_PCD_EP_SetStall+0xac>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 ff2c 	bl	8004f0c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d108      	bne.n	80020d0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f003 f82a 	bl	8005124 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 020f 	and.w	r2, r3, #15
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d901      	bls.n	8002100 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e03a      	b.n	8002176 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002104:	2b00      	cmp	r3, #0
 8002106:	da0b      	bge.n	8002120 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	015b      	lsls	r3, r3, #5
 8002110:	3328      	adds	r3, #40	; 0x28
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	705a      	strb	r2, [r3, #1]
 800211e:	e00b      	b.n	8002138 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	015b      	lsls	r3, r3, #5
 8002128:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	b2da      	uxtb	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_EP_ClrStall+0x76>
 8002154:	2302      	movs	r3, #2
 8002156:	e00e      	b.n	8002176 <HAL_PCD_EP_ClrStall+0x94>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 ff12 	bl	8004f90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002188:	e282      	b.n	8002690 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002192:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002194:	8afb      	ldrh	r3, [r7, #22]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800219e:	7d7b      	ldrb	r3, [r7, #21]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 8142 	bne.w	800242a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021a6:	8afb      	ldrh	r3, [r7, #22]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d151      	bne.n	8002254 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c0:	b29c      	uxth	r4, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80021ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3328      	adds	r3, #40	; 0x28
 80021d6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	3302      	adds	r3, #2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	441a      	add	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002212:	2100      	movs	r1, #0
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f004 fe0b 	bl	8006e30 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8234 	beq.w	8002690 <PCD_EP_ISR_Handler+0x510>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 822f 	bne.w	8002690 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800223e:	b2da      	uxtb	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b292      	uxth	r2, r2
 8002246:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002252:	e21d      	b.n	8002690 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800225a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002264:	8a7b      	ldrh	r3, [r7, #18]
 8002266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226a:	2b00      	cmp	r3, #0
 800226c:	d033      	beq.n	80022d6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002276:	b29b      	uxth	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	3306      	adds	r3, #6
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f002 ff88 	bl	80051c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022be:	4013      	ands	r3, r2
 80022c0:	b29c      	uxth	r4, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80022ca:	b292      	uxth	r2, r2
 80022cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f004 fd84 	bl	8006ddc <HAL_PCD_SetupStageCallback>
 80022d4:	e1dc      	b.n	8002690 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f280 81d8 	bge.w	8002690 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022ec:	4013      	ands	r3, r2
 80022ee:	b29c      	uxth	r4, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80022f8:	b292      	uxth	r2, r2
 80022fa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002304:	b29b      	uxth	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	3306      	adds	r3, #6
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d019      	beq.n	8002364 <PCD_EP_ISR_Handler+0x1e4>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d015      	beq.n	8002364 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6959      	ldr	r1, [r3, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002348:	b29b      	uxth	r3, r3
 800234a:	f002 ff3a 	bl	80051c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	441a      	add	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800235c:	2100      	movs	r1, #0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f004 fd4e 	bl	8006e00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461c      	mov	r4, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002372:	b29b      	uxth	r3, r3
 8002374:	441c      	add	r4, r3
 8002376:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800237a:	461c      	mov	r4, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10e      	bne.n	80023a2 <PCD_EP_ISR_Handler+0x222>
 8002384:	8823      	ldrh	r3, [r4, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800238c:	b29b      	uxth	r3, r3
 800238e:	8023      	strh	r3, [r4, #0]
 8002390:	8823      	ldrh	r3, [r4, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800239c:	b29b      	uxth	r3, r3
 800239e:	8023      	strh	r3, [r4, #0]
 80023a0:	e02d      	b.n	80023fe <PCD_EP_ISR_Handler+0x27e>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b3e      	cmp	r3, #62	; 0x3e
 80023a8:	d812      	bhi.n	80023d0 <PCD_EP_ISR_Handler+0x250>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <PCD_EP_ISR_Handler+0x244>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	029b      	lsls	r3, r3, #10
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	8023      	strh	r3, [r4, #0]
 80023ce:	e016      	b.n	80023fe <PCD_EP_ISR_Handler+0x27e>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <PCD_EP_ISR_Handler+0x26a>
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800240a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240e:	b29c      	uxth	r4, r3
 8002410:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002414:	b29c      	uxth	r4, r3
 8002416:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800241a:	b29c      	uxth	r4, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4ba2      	ldr	r3, [pc, #648]	; (80026ac <PCD_EP_ISR_Handler+0x52c>)
 8002422:	4323      	orrs	r3, r4
 8002424:	b29b      	uxth	r3, r3
 8002426:	8013      	strh	r3, [r2, #0]
 8002428:	e132      	b.n	8002690 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	7d7b      	ldrb	r3, [r7, #21]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800243a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f280 80d1 	bge.w	80025e6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	7d7b      	ldrb	r3, [r7, #21]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	b29a      	uxth	r2, r3
 8002454:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002458:	4013      	ands	r3, r2
 800245a:	b29c      	uxth	r4, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	7d7b      	ldrb	r3, [r7, #21]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800246c:	b292      	uxth	r2, r2
 800246e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002470:	7d7b      	ldrb	r3, [r7, #21]
 8002472:	015b      	lsls	r3, r3, #5
 8002474:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	7b1b      	ldrb	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d121      	bne.n	80024ca <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	3306      	adds	r3, #6
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ae:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80024b0:	8bfb      	ldrh	r3, [r7, #30]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d072      	beq.n	800259c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6959      	ldr	r1, [r3, #20]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88da      	ldrh	r2, [r3, #6]
 80024c2:	8bfb      	ldrh	r3, [r7, #30]
 80024c4:	f002 fe7d 	bl	80051c2 <USB_ReadPMA>
 80024c8:	e068      	b.n	800259c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d021      	beq.n	8002528 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	3302      	adds	r3, #2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800250e:	8bfb      	ldrh	r3, [r7, #30]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02a      	beq.n	800256a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6959      	ldr	r1, [r3, #20]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	891a      	ldrh	r2, [r3, #8]
 8002520:	8bfb      	ldrh	r3, [r7, #30]
 8002522:	f002 fe4e 	bl	80051c2 <USB_ReadPMA>
 8002526:	e020      	b.n	800256a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002530:	b29b      	uxth	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	3306      	adds	r3, #6
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002550:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002552:	8bfb      	ldrh	r3, [r7, #30]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6959      	ldr	r1, [r3, #20]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	895a      	ldrh	r2, [r3, #10]
 8002564:	8bfb      	ldrh	r3, [r7, #30]
 8002566:	f002 fe2c 	bl	80051c2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002584:	b29c      	uxth	r4, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	441a      	add	r2, r3
 8002594:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <PCD_EP_ISR_Handler+0x530>)
 8002596:	4323      	orrs	r3, r4
 8002598:	b29b      	uxth	r3, r3
 800259a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	8bfb      	ldrh	r3, [r7, #30]
 80025a2:	441a      	add	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	8bfb      	ldrh	r3, [r7, #30]
 80025ae:	441a      	add	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <PCD_EP_ISR_Handler+0x446>
 80025bc:	8bfa      	ldrh	r2, [r7, #30]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d206      	bcs.n	80025d4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f004 fc17 	bl	8006e00 <HAL_PCD_DataOutStageCallback>
 80025d2:	e008      	b.n	80025e6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	7819      	ldrb	r1, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fc9d 	bl	8001f20 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025e6:	8a7b      	ldrh	r3, [r7, #18]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d04f      	beq.n	8002690 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80025f0:	7d7b      	ldrb	r3, [r7, #21]
 80025f2:	015b      	lsls	r3, r3, #5
 80025f4:	3328      	adds	r3, #40	; 0x28
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	7d7b      	ldrb	r3, [r7, #21]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002614:	b29c      	uxth	r4, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	7d7b      	ldrb	r3, [r7, #21]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262a:	b29b      	uxth	r3, r3
 800262c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	3302      	adds	r3, #2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	441a      	add	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f004 fbda 	bl	8006e30 <HAL_PCD_DataInStageCallback>
 800267c:	e008      	b.n	8002690 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	7819      	ldrb	r1, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fc96 	bl	8001fbc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002698:	b29b      	uxth	r3, r3
 800269a:	b21b      	sxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	f6ff ad74 	blt.w	800218a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3724      	adds	r7, #36	; 0x24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}
 80026ac:	ffff8080 	.word	0xffff8080
 80026b0:	ffff80c0 	.word	0xffff80c0

080026b4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	4613      	mov	r3, r2
 80026c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	015b      	lsls	r3, r3, #5
 80026da:	3328      	adds	r3, #40	; 0x28
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e006      	b.n	80026f2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026e4:	897b      	ldrh	r3, [r7, #10]
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026f2:	893b      	ldrh	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d107      	bne.n	8002708 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2200      	movs	r2, #0
 80026fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	b29a      	uxth	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	80da      	strh	r2, [r3, #6]
 8002706:	e00b      	b.n	8002720 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2201      	movs	r2, #1
 800270c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	b29a      	uxth	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	b29a      	uxth	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e26c      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8087 	beq.w	800285a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800274c:	4b92      	ldr	r3, [pc, #584]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b04      	cmp	r3, #4
 8002756:	d00c      	beq.n	8002772 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002758:	4b8f      	ldr	r3, [pc, #572]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b08      	cmp	r3, #8
 8002762:	d112      	bne.n	800278a <HAL_RCC_OscConfig+0x5e>
 8002764:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002770:	d10b      	bne.n	800278a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002772:	4b89      	ldr	r3, [pc, #548]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d06c      	beq.n	8002858 <HAL_RCC_OscConfig+0x12c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d168      	bne.n	8002858 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e246      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x76>
 8002794:	4b80      	ldr	r3, [pc, #512]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a7f      	ldr	r2, [pc, #508]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e02e      	b.n	8002800 <HAL_RCC_OscConfig+0xd4>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x98>
 80027aa:	4b7b      	ldr	r3, [pc, #492]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7a      	ldr	r2, [pc, #488]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b78      	ldr	r3, [pc, #480]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a77      	ldr	r2, [pc, #476]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e01d      	b.n	8002800 <HAL_RCC_OscConfig+0xd4>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0xbc>
 80027ce:	4b72      	ldr	r3, [pc, #456]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a71      	ldr	r2, [pc, #452]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a6e      	ldr	r2, [pc, #440]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0xd4>
 80027e8:	4b6b      	ldr	r3, [pc, #428]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a6a      	ldr	r2, [pc, #424]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b68      	ldr	r3, [pc, #416]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a67      	ldr	r2, [pc, #412]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe fcc2 	bl	8001190 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fcbe 	bl	8001190 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1fa      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	4b5d      	ldr	r3, [pc, #372]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0xe4>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fcae 	bl	8001190 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002838:	f7fe fcaa 	bl	8001190 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e1e6      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x10c>
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d063      	beq.n	800292e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002866:	4b4c      	ldr	r3, [pc, #304]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002872:	4b49      	ldr	r3, [pc, #292]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	d11c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x18c>
 800287e:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d116      	bne.n	80028b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_RCC_OscConfig+0x176>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d001      	beq.n	80028a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e1ba      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a2:	4b3d      	ldr	r3, [pc, #244]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4939      	ldr	r1, [pc, #228]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b6:	e03a      	b.n	800292e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c0:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe fc63 	bl	8001190 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ce:	f7fe fc5f 	bl	8001190 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e19b      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ec:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4927      	ldr	r1, [pc, #156]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
 8002900:	e015      	b.n	800292e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe fc42 	bl	8001190 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002910:	f7fe fc3e 	bl	8001190 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e17a      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d03a      	beq.n	80029b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d019      	beq.n	8002976 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7fe fc22 	bl	8001190 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe fc1e 	bl	8001190 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e15a      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_RCC_OscConfig+0x26c>)
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800296e:	2001      	movs	r0, #1
 8002970:	f000 fac6 	bl	8002f00 <RCC_Delay>
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297c:	f7fe fc08 	bl	8001190 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002982:	e00f      	b.n	80029a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe fc04 	bl	8001190 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d908      	bls.n	80029a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e140      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	42420000 	.word	0x42420000
 80029a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	4b9e      	ldr	r3, [pc, #632]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e9      	bne.n	8002984 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a6 	beq.w	8002b0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b97      	ldr	r3, [pc, #604]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b94      	ldr	r3, [pc, #592]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a93      	ldr	r2, [pc, #588]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b91      	ldr	r3, [pc, #580]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	4b8e      	ldr	r3, [pc, #568]	; (8002c24 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d118      	bne.n	8002a28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <HAL_RCC_OscConfig+0x4f8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a8a      	ldr	r2, [pc, #552]	; (8002c24 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a02:	f7fe fbc5 	bl	8001190 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0a:	f7fe fbc1 	bl	8001190 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b64      	cmp	r3, #100	; 0x64
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0fd      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x312>
 8002a30:	4b7b      	ldr	r3, [pc, #492]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a7a      	ldr	r2, [pc, #488]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6213      	str	r3, [r2, #32]
 8002a3c:	e02d      	b.n	8002a9a <HAL_RCC_OscConfig+0x36e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x334>
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4a75      	ldr	r2, [pc, #468]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	6213      	str	r3, [r2, #32]
 8002a52:	4b73      	ldr	r3, [pc, #460]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4a72      	ldr	r2, [pc, #456]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	f023 0304 	bic.w	r3, r3, #4
 8002a5c:	6213      	str	r3, [r2, #32]
 8002a5e:	e01c      	b.n	8002a9a <HAL_RCC_OscConfig+0x36e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d10c      	bne.n	8002a82 <HAL_RCC_OscConfig+0x356>
 8002a68:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4a6c      	ldr	r2, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	f043 0304 	orr.w	r3, r3, #4
 8002a72:	6213      	str	r3, [r2, #32]
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4a69      	ldr	r2, [pc, #420]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6213      	str	r3, [r2, #32]
 8002a80:	e00b      	b.n	8002a9a <HAL_RCC_OscConfig+0x36e>
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	4a66      	ldr	r2, [pc, #408]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6213      	str	r3, [r2, #32]
 8002a8e:	4b64      	ldr	r3, [pc, #400]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a63      	ldr	r2, [pc, #396]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d015      	beq.n	8002ace <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fb75 	bl	8001190 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fb71 	bl	8001190 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0ab      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	4b57      	ldr	r3, [pc, #348]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ee      	beq.n	8002aaa <HAL_RCC_OscConfig+0x37e>
 8002acc:	e014      	b.n	8002af8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fb5f 	bl	8001190 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe fb5b 	bl	8001190 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e095      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aec:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ee      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d105      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afe:	4b48      	ldr	r3, [pc, #288]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4a47      	ldr	r2, [pc, #284]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8081 	beq.w	8002c16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b14:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d061      	beq.n	8002be4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d146      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b28:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <HAL_RCC_OscConfig+0x4fc>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fb2f 	bl	8001190 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fb2b 	bl	8001190 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e067      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b48:	4b35      	ldr	r3, [pc, #212]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d108      	bne.n	8002b70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b5e:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	492d      	ldr	r1, [pc, #180]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a19      	ldr	r1, [r3, #32]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	430b      	orrs	r3, r1
 8002b82:	4927      	ldr	r1, [pc, #156]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x4fc>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fe faff 	bl	8001190 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe fafb 	bl	8001190 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e037      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x46a>
 8002bb4:	e02f      	b.n	8002c16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <HAL_RCC_OscConfig+0x4fc>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fae8 	bl	8001190 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fae4 	bl	8001190 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e020      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x498>
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e013      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40007000 	.word	0x40007000
 8002c28:	42420060 	.word	0x42420060

08002c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0d0      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d910      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b67      	ldr	r3, [pc, #412]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 0207 	bic.w	r2, r3, #7
 8002c56:	4965      	ldr	r1, [pc, #404]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0b8      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca0:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002caa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	494d      	ldr	r1, [pc, #308]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d040      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d115      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cea:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e073      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e06b      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4936      	ldr	r1, [pc, #216]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fa38 	bl	8001190 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fe fa34 	bl	8001190 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e053      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b27      	ldr	r3, [pc, #156]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d210      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4922      	ldr	r1, [pc, #136]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e032      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4916      	ldr	r1, [pc, #88]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	490e      	ldr	r1, [pc, #56]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dba:	f000 f821 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	fa21 f303 	lsr.w	r3, r1, r3
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x1cc>)
 8002dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_ClockConfig+0x1d0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f996 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40022000 	.word	0x40022000
 8002df0:	40021000 	.word	0x40021000
 8002df4:	080073b0 	.word	0x080073b0
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000004 	.word	0x20000004

08002e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	b490      	push	{r4, r7}
 8002e02:	b08a      	sub	sp, #40	; 0x28
 8002e04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e08:	1d3c      	adds	r4, r7, #4
 8002e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e10:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e2a:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x40>
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0x46>
 8002e3e:	e02d      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e40:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e42:	623b      	str	r3, [r7, #32]
      break;
 8002e44:	e02d      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	0c9b      	lsrs	r3, r3, #18
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e52:	4413      	add	r3, r2
 8002e54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0c5b      	lsrs	r3, r3, #17
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e72:	4413      	add	r3, r2
 8002e74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e7e:	fb02 f203 	mul.w	r2, r2, r3
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	e004      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	623b      	str	r3, [r7, #32]
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e9e:	623b      	str	r3, [r7, #32]
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3728      	adds	r7, #40	; 0x28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc90      	pop	{r4, r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	08007354 	.word	0x08007354
 8002eb4:	08007364 	.word	0x08007364
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	007a1200 	.word	0x007a1200
 8002ec0:	003d0900 	.word	0x003d0900

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff2 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4a03      	ldr	r2, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	080073c0 	.word	0x080073c0

08002f00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <RCC_Delay+0x34>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <RCC_Delay+0x38>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0a5b      	lsrs	r3, r3, #9
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f1c:	bf00      	nop
  }
  while (Delay --);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e5a      	subs	r2, r3, #1
 8002f22:	60fa      	str	r2, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f9      	bne.n	8002f1c <RCC_Delay+0x1c>
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000000 	.word	0x20000000
 8002f38:	10624dd3 	.word	0x10624dd3

08002f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d07d      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5c:	4b4f      	ldr	r3, [pc, #316]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10d      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f68:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4a4b      	ldr	r2, [pc, #300]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f72:	61d3      	str	r3, [r2, #28]
 8002f74:	4b49      	ldr	r3, [pc, #292]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d118      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f90:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9c:	f7fe f8f8 	bl	8001190 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe f8f4 	bl	8001190 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e06d      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02e      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d027      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe0:	4b2e      	ldr	r3, [pc, #184]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fea:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ff6:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d014      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fe f8c3 	bl	8001190 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe f8bf 	bl	8001190 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e036      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ee      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4917      	ldr	r1, [pc, #92]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	4313      	orrs	r3, r2
 8003040:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4a13      	ldr	r2, [pc, #76]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003052:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	490b      	ldr	r1, [pc, #44]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4904      	ldr	r1, [pc, #16]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42420440 	.word	0x42420440

080030a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e053      	b.n	8003162 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d106      	bne.n	80030da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7fd faf7 	bl	80006c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	ea42 0103 	orr.w	r1, r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	0c1a      	lsrs	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f002 0204 	and.w	r2, r2, #4
 8003140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e01d      	b.n	80031b8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fd fe63 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f000 fbb5 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e01d      	b.n	800320e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f815 	bl	8003216 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fb8a 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e01d      	b.n	8003276 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f815 	bl	800327e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f000 fb56 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fdb8 	bl	8003e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_TIM_PWM_Start+0x60>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b06      	cmp	r3, #6
 80032d2:	d007      	beq.n	80032e4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40012c00 	.word	0x40012c00

080032f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0202 	mvn.w	r2, #2
 8003320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fad3 	bl	80038e2 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fac6 	bl	80038d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fad5 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0204 	mvn.w	r2, #4
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 faa9 	bl	80038e2 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa9c 	bl	80038d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 faab 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0208 	mvn.w	r2, #8
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2204      	movs	r2, #4
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa7f 	bl	80038e2 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa72 	bl	80038d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fa81 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b10      	cmp	r3, #16
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b10      	cmp	r3, #16
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2208      	movs	r2, #8
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa55 	bl	80038e2 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa48 	bl	80038d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fa57 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10e      	bne.n	8003478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0201 	mvn.w	r2, #1
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa23 	bl	80038be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b80      	cmp	r3, #128	; 0x80
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fd7c 	bl	8003f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa1b 	bl	8003906 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0220 	mvn.w	r2, #32
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fd47 	bl	8003f8a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_TIM_OC_ConfigChannel+0x1a>
 800351a:	2302      	movs	r3, #2
 800351c:	e04e      	b.n	80035bc <HAL_TIM_OC_ConfigChannel+0xb8>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b0c      	cmp	r3, #12
 8003532:	d839      	bhi.n	80035a8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003534:	a201      	add	r2, pc, #4	; (adr r2, 800353c <HAL_TIM_OC_ConfigChannel+0x38>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	08003571 	.word	0x08003571
 8003540:	080035a9 	.word	0x080035a9
 8003544:	080035a9 	.word	0x080035a9
 8003548:	080035a9 	.word	0x080035a9
 800354c:	0800357f 	.word	0x0800357f
 8003550:	080035a9 	.word	0x080035a9
 8003554:	080035a9 	.word	0x080035a9
 8003558:	080035a9 	.word	0x080035a9
 800355c:	0800358d 	.word	0x0800358d
 8003560:	080035a9 	.word	0x080035a9
 8003564:	080035a9 	.word	0x080035a9
 8003568:	080035a9 	.word	0x080035a9
 800356c:	0800359b 	.word	0x0800359b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa30 	bl	80039dc <TIM_OC1_SetConfig>
      break;
 800357c:	e015      	b.n	80035aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fa8f 	bl	8003aa8 <TIM_OC2_SetConfig>
      break;
 800358a:	e00e      	b.n	80035aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 faf2 	bl	8003b7c <TIM_OC3_SetConfig>
      break;
 8003598:	e007      	b.n	80035aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fb55 	bl	8003c50 <TIM_OC4_SetConfig>
      break;
 80035a6:	e000      	b.n	80035aa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80035a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035da:	2302      	movs	r3, #2
 80035dc:	e0b4      	b.n	8003748 <HAL_TIM_PWM_ConfigChannel+0x184>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	f200 809f 	bhi.w	8003734 <HAL_TIM_PWM_ConfigChannel+0x170>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003735 	.word	0x08003735
 8003604:	08003735 	.word	0x08003735
 8003608:	08003735 	.word	0x08003735
 800360c:	08003671 	.word	0x08003671
 8003610:	08003735 	.word	0x08003735
 8003614:	08003735 	.word	0x08003735
 8003618:	08003735 	.word	0x08003735
 800361c:	080036b3 	.word	0x080036b3
 8003620:	08003735 	.word	0x08003735
 8003624:	08003735 	.word	0x08003735
 8003628:	08003735 	.word	0x08003735
 800362c:	080036f3 	.word	0x080036f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f9d0 	bl	80039dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6999      	ldr	r1, [r3, #24]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	619a      	str	r2, [r3, #24]
      break;
 800366e:	e062      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fa16 	bl	8003aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
      break;
 80036b0:	e041      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fa5f 	bl	8003b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0208 	orr.w	r2, r2, #8
 80036cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0204 	bic.w	r2, r2, #4
 80036dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	61da      	str	r2, [r3, #28]
      break;
 80036f0:	e021      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 faa9 	bl	8003c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69d9      	ldr	r1, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	61da      	str	r2, [r3, #28]
      break;
 8003732:	e000      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003734:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIM_ConfigClockSource+0x18>
 8003764:	2302      	movs	r3, #2
 8003766:	e0a6      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x166>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d067      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0x120>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d80b      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x6c>
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d073      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x140>
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d802      	bhi.n	80037b2 <HAL_TIM_ConfigClockSource+0x62>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d06f      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037b0:	e078      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d06c      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x140>
 80037b6:	2b30      	cmp	r3, #48	; 0x30
 80037b8:	d06a      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037ba:	e073      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037bc:	2b70      	cmp	r3, #112	; 0x70
 80037be:	d00d      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x8c>
 80037c0:	2b70      	cmp	r3, #112	; 0x70
 80037c2:	d804      	bhi.n	80037ce <HAL_TIM_ConfigClockSource+0x7e>
 80037c4:	2b50      	cmp	r3, #80	; 0x50
 80037c6:	d033      	beq.n	8003830 <HAL_TIM_ConfigClockSource+0xe0>
 80037c8:	2b60      	cmp	r3, #96	; 0x60
 80037ca:	d041      	beq.n	8003850 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037cc:	e06a      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d066      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x152>
 80037d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d8:	d017      	beq.n	800380a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80037da:	e063      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6899      	ldr	r1, [r3, #8]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f000 faf5 	bl	8003dda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	609a      	str	r2, [r3, #8]
      break;
 8003808:	e04c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f000 fade 	bl	8003dda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800382c:	609a      	str	r2, [r3, #8]
      break;
 800382e:	e039      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	461a      	mov	r2, r3
 800383e:	f000 fa55 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2150      	movs	r1, #80	; 0x50
 8003848:	4618      	mov	r0, r3
 800384a:	f000 faac 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 800384e:	e029      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	461a      	mov	r2, r3
 800385e:	f000 fa73 	bl	8003d48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2160      	movs	r1, #96	; 0x60
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fa9c 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 800386e:	e019      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	461a      	mov	r2, r3
 800387e:	f000 fa35 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2140      	movs	r1, #64	; 0x40
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fa8c 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 800388e:	e009      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fa83 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80038a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <TIM_Base_SetConfig+0xb8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00b      	beq.n	8003948 <TIM_Base_SetConfig+0x30>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d007      	beq.n	8003948 <TIM_Base_SetConfig+0x30>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <TIM_Base_SetConfig+0xbc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0x30>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <TIM_Base_SetConfig+0xc0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d108      	bne.n	800395a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <TIM_Base_SetConfig+0xb8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0x62>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x62>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <TIM_Base_SetConfig+0xbc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <TIM_Base_SetConfig+0xc0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <TIM_Base_SetConfig+0xb8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800

080039dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f023 0201 	bic.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 0302 	bic.w	r3, r3, #2
 8003a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <TIM_OC1_SetConfig+0xc8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d10c      	bne.n	8003a52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f023 0308 	bic.w	r3, r3, #8
 8003a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <TIM_OC1_SetConfig+0xc8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d111      	bne.n	8003a7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	621a      	str	r2, [r3, #32]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40012c00 	.word	0x40012c00

08003aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0210 	bic.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0320 	bic.w	r3, r3, #32
 8003af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <TIM_OC2_SetConfig+0xd0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10d      	bne.n	8003b24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <TIM_OC2_SetConfig+0xd0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d113      	bne.n	8003b54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00

08003b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <TIM_OC3_SetConfig+0xd0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10d      	bne.n	8003bf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <TIM_OC3_SetConfig+0xd0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d113      	bne.n	8003c26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00

08003c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	031b      	lsls	r3, r3, #12
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a0f      	ldr	r2, [pc, #60]	; (8003ce8 <TIM_OC4_SetConfig+0x98>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d109      	bne.n	8003cc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	40012c00 	.word	0x40012c00

08003cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f023 030a 	bic.w	r3, r3, #10
 8003d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f023 0210 	bic.w	r2, r3, #16
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	031b      	lsls	r3, r3, #12
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f043 0307 	orr.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	609a      	str	r2, [r3, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	609a      	str	r2, [r3, #8]
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e032      	b.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e03d      	b.n	8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fae:	b084      	sub	sp, #16
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	f107 0014 	add.w	r0, r7, #20
 8003fbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	b004      	add	sp, #16
 8003fcc:	4770      	bx	lr

08003fce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fd6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fda:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004004:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004008:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004010:	b29b      	uxth	r3, r3
 8004012:	b21a      	sxth	r2, r3
 8004014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004018:	43db      	mvns	r3, r3
 800401a:	b21b      	sxth	r3, r3
 800401c:	4013      	ands	r3, r2
 800401e:	b21b      	sxth	r3, r3
 8004020:	b29a      	uxth	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800404c:	b084      	sub	sp, #16
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	f107 0014 	add.w	r0, r7, #20
 800405a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff ffa5 	bl	8003fce <USB_EnableGlobalInt>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004090:	b004      	add	sp, #16
 8004092:	4770      	bx	lr

08004094 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004094:	b490      	push	{r4, r7}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	78db      	ldrb	r3, [r3, #3]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d819      	bhi.n	80040f6 <USB_ActivateEndpoint+0x62>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <USB_ActivateEndpoint+0x34>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040ed 	.word	0x080040ed
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	080040e3 	.word	0x080040e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040d8:	89bb      	ldrh	r3, [r7, #12]
 80040da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040de:	81bb      	strh	r3, [r7, #12]
      break;
 80040e0:	e00d      	b.n	80040fe <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040e2:	89bb      	ldrh	r3, [r7, #12]
 80040e4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040e8:	81bb      	strh	r3, [r7, #12]
      break;
 80040ea:	e008      	b.n	80040fe <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040ec:	89bb      	ldrh	r3, [r7, #12]
 80040ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040f2:	81bb      	strh	r3, [r7, #12]
      break;
 80040f4:	e003      	b.n	80040fe <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      break;
 80040fa:	e000      	b.n	80040fe <USB_ActivateEndpoint+0x6a>
      break;
 80040fc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	89bb      	ldrh	r3, [r7, #12]
 800410a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800410e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411a:	b29b      	uxth	r3, r3
 800411c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004134:	b29a      	uxth	r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	4313      	orrs	r3, r2
 800413e:	b29c      	uxth	r4, r3
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	4b8a      	ldr	r3, [pc, #552]	; (8004374 <USB_ActivateEndpoint+0x2e0>)
 800414c:	4323      	orrs	r3, r4
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	7b1b      	ldrb	r3, [r3, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 8112 	bne.w	8004380 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d067      	beq.n	8004234 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004164:	687c      	ldr	r4, [r7, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416c:	b29b      	uxth	r3, r3
 800416e:	441c      	add	r4, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	4423      	add	r3, r4
 8004178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800417c:	461c      	mov	r4, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	88db      	ldrh	r3, [r3, #6]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	b29b      	uxth	r3, r3
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	b29b      	uxth	r3, r3
 800418a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29c      	uxth	r4, r3
 800419a:	4623      	mov	r3, r4
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d014      	beq.n	80041ce <USB_ActivateEndpoint+0x13a>
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	b29c      	uxth	r4, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	4b6c      	ldr	r3, [pc, #432]	; (8004378 <USB_ActivateEndpoint+0x2e4>)
 80041c8:	4323      	orrs	r3, r4
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	78db      	ldrb	r3, [r3, #3]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d018      	beq.n	8004208 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	b29c      	uxth	r4, r3
 80041ee:	f084 0320 	eor.w	r3, r4, #32
 80041f2:	b29c      	uxth	r4, r3
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	4b5d      	ldr	r3, [pc, #372]	; (8004374 <USB_ActivateEndpoint+0x2e0>)
 8004200:	4323      	orrs	r3, r4
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
 8004206:	e22b      	b.n	8004660 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421e:	b29c      	uxth	r4, r3
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	4b52      	ldr	r3, [pc, #328]	; (8004374 <USB_ActivateEndpoint+0x2e0>)
 800422c:	4323      	orrs	r3, r4
 800422e:	b29b      	uxth	r3, r3
 8004230:	8013      	strh	r3, [r2, #0]
 8004232:	e215      	b.n	8004660 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004234:	687c      	ldr	r4, [r7, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423c:	b29b      	uxth	r3, r3
 800423e:	441c      	add	r4, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	4423      	add	r3, r4
 8004248:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800424c:	461c      	mov	r4, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	88db      	ldrh	r3, [r3, #6]
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	b29b      	uxth	r3, r3
 800425a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800425c:	687c      	ldr	r4, [r7, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004264:	b29b      	uxth	r3, r3
 8004266:	441c      	add	r4, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	4423      	add	r3, r4
 8004270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004274:	461c      	mov	r4, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10e      	bne.n	800429c <USB_ActivateEndpoint+0x208>
 800427e:	8823      	ldrh	r3, [r4, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004286:	b29b      	uxth	r3, r3
 8004288:	8023      	strh	r3, [r4, #0]
 800428a:	8823      	ldrh	r3, [r4, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004296:	b29b      	uxth	r3, r3
 8004298:	8023      	strh	r3, [r4, #0]
 800429a:	e02d      	b.n	80042f8 <USB_ActivateEndpoint+0x264>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b3e      	cmp	r3, #62	; 0x3e
 80042a2:	d812      	bhi.n	80042ca <USB_ActivateEndpoint+0x236>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	085b      	lsrs	r3, r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <USB_ActivateEndpoint+0x22a>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	029b      	lsls	r3, r3, #10
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8023      	strh	r3, [r4, #0]
 80042c8:	e016      	b.n	80042f8 <USB_ActivateEndpoint+0x264>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <USB_ActivateEndpoint+0x250>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	029b      	lsls	r3, r3, #10
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29c      	uxth	r4, r3
 8004306:	4623      	mov	r3, r4
 8004308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d014      	beq.n	800433a <USB_ActivateEndpoint+0x2a6>
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	b29c      	uxth	r4, r3
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <USB_ActivateEndpoint+0x2e8>)
 8004334:	4323      	orrs	r3, r4
 8004336:	b29b      	uxth	r3, r3
 8004338:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800434c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004350:	b29c      	uxth	r4, r3
 8004352:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004356:	b29c      	uxth	r4, r3
 8004358:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800435c:	b29c      	uxth	r4, r3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	4b02      	ldr	r3, [pc, #8]	; (8004374 <USB_ActivateEndpoint+0x2e0>)
 800436a:	4323      	orrs	r3, r4
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]
 8004370:	e176      	b.n	8004660 <USB_ActivateEndpoint+0x5cc>
 8004372:	bf00      	nop
 8004374:	ffff8080 	.word	0xffff8080
 8004378:	ffff80c0 	.word	0xffff80c0
 800437c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	b29c      	uxth	r4, r3
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	441a      	add	r2, r3
 80043a2:	4b96      	ldr	r3, [pc, #600]	; (80045fc <USB_ActivateEndpoint+0x568>)
 80043a4:	4323      	orrs	r3, r4
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80043aa:	687c      	ldr	r4, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	441c      	add	r4, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4423      	add	r3, r4
 80043be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043c2:	461c      	mov	r4, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	891b      	ldrh	r3, [r3, #8]
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	8023      	strh	r3, [r4, #0]
 80043d2:	687c      	ldr	r4, [r7, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043da:	b29b      	uxth	r3, r3
 80043dc:	441c      	add	r4, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	4423      	add	r3, r4
 80043e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043ea:	461c      	mov	r4, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	895b      	ldrh	r3, [r3, #10]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 8088 	bne.w	8004514 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	b29c      	uxth	r4, r3
 8004412:	4623      	mov	r3, r4
 8004414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d014      	beq.n	8004446 <USB_ActivateEndpoint+0x3b2>
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	b29c      	uxth	r4, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	4b70      	ldr	r3, [pc, #448]	; (8004600 <USB_ActivateEndpoint+0x56c>)
 8004440:	4323      	orrs	r3, r4
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29c      	uxth	r4, r3
 8004454:	4623      	mov	r3, r4
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d014      	beq.n	8004488 <USB_ActivateEndpoint+0x3f4>
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004474:	b29c      	uxth	r4, r3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	441a      	add	r2, r3
 8004480:	4b60      	ldr	r3, [pc, #384]	; (8004604 <USB_ActivateEndpoint+0x570>)
 8004482:	4323      	orrs	r3, r4
 8004484:	b29b      	uxth	r3, r3
 8004486:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	b29c      	uxth	r4, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	441a      	add	r2, r3
 80044aa:	4b56      	ldr	r3, [pc, #344]	; (8004604 <USB_ActivateEndpoint+0x570>)
 80044ac:	4323      	orrs	r3, r4
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c8:	b29c      	uxth	r4, r3
 80044ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80044ce:	b29c      	uxth	r4, r3
 80044d0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80044d4:	b29c      	uxth	r4, r3
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	4b49      	ldr	r3, [pc, #292]	; (8004608 <USB_ActivateEndpoint+0x574>)
 80044e2:	4323      	orrs	r3, r4
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fe:	b29c      	uxth	r4, r3
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	4b3f      	ldr	r3, [pc, #252]	; (8004608 <USB_ActivateEndpoint+0x574>)
 800450c:	4323      	orrs	r3, r4
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]
 8004512:	e0a5      	b.n	8004660 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29c      	uxth	r4, r3
 8004522:	4623      	mov	r3, r4
 8004524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d014      	beq.n	8004556 <USB_ActivateEndpoint+0x4c2>
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	b29c      	uxth	r4, r3
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <USB_ActivateEndpoint+0x56c>)
 8004550:	4323      	orrs	r3, r4
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29c      	uxth	r4, r3
 8004564:	4623      	mov	r3, r4
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d014      	beq.n	8004598 <USB_ActivateEndpoint+0x504>
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004584:	b29c      	uxth	r4, r3
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <USB_ActivateEndpoint+0x570>)
 8004592:	4323      	orrs	r3, r4
 8004594:	b29b      	uxth	r3, r3
 8004596:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	b29c      	uxth	r4, r3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <USB_ActivateEndpoint+0x56c>)
 80045bc:	4323      	orrs	r3, r4
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	78db      	ldrb	r3, [r3, #3]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d020      	beq.n	800460c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e0:	b29c      	uxth	r4, r3
 80045e2:	f084 0320 	eor.w	r3, r4, #32
 80045e6:	b29c      	uxth	r4, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <USB_ActivateEndpoint+0x574>)
 80045f4:	4323      	orrs	r3, r4
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	8013      	strh	r3, [r2, #0]
 80045fa:	e01c      	b.n	8004636 <USB_ActivateEndpoint+0x5a2>
 80045fc:	ffff8180 	.word	0xffff8180
 8004600:	ffffc080 	.word	0xffffc080
 8004604:	ffff80c0 	.word	0xffff80c0
 8004608:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004622:	b29c      	uxth	r4, r3
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <USB_ActivateEndpoint+0x5d8>)
 8004630:	4323      	orrs	r3, r4
 8004632:	b29b      	uxth	r3, r3
 8004634:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	b29c      	uxth	r4, r3
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	441a      	add	r2, r3
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <USB_ActivateEndpoint+0x5d8>)
 800465a:	4323      	orrs	r3, r4
 800465c:	b29b      	uxth	r3, r3
 800465e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bc90      	pop	{r4, r7}
 800466a:	4770      	bx	lr
 800466c:	ffff8080 	.word	0xffff8080

08004670 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004670:	b490      	push	{r4, r7}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	7b1b      	ldrb	r3, [r3, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d171      	bne.n	8004766 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d036      	beq.n	80046f8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29c      	uxth	r4, r3
 8004698:	4623      	mov	r3, r4
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d014      	beq.n	80046cc <USB_DeactivateEndpoint+0x5c>
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	b29c      	uxth	r4, r3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	4b6b      	ldr	r3, [pc, #428]	; (8004874 <USB_DeactivateEndpoint+0x204>)
 80046c6:	4323      	orrs	r3, r4
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e2:	b29c      	uxth	r4, r3
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	4b62      	ldr	r3, [pc, #392]	; (8004878 <USB_DeactivateEndpoint+0x208>)
 80046f0:	4323      	orrs	r3, r4
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
 80046f6:	e144      	b.n	8004982 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29c      	uxth	r4, r3
 8004706:	4623      	mov	r3, r4
 8004708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d014      	beq.n	800473a <USB_DeactivateEndpoint+0xca>
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	b29c      	uxth	r4, r3
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	4b52      	ldr	r3, [pc, #328]	; (800487c <USB_DeactivateEndpoint+0x20c>)
 8004734:	4323      	orrs	r3, r4
 8004736:	b29b      	uxth	r3, r3
 8004738:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800474c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004750:	b29c      	uxth	r4, r3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	4b46      	ldr	r3, [pc, #280]	; (8004878 <USB_DeactivateEndpoint+0x208>)
 800475e:	4323      	orrs	r3, r4
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]
 8004764:	e10d      	b.n	8004982 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	785b      	ldrb	r3, [r3, #1]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f040 8088 	bne.w	8004880 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29c      	uxth	r4, r3
 800477e:	4623      	mov	r3, r4
 8004780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d014      	beq.n	80047b2 <USB_DeactivateEndpoint+0x142>
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	b29c      	uxth	r4, r3
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <USB_DeactivateEndpoint+0x20c>)
 80047ac:	4323      	orrs	r3, r4
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29c      	uxth	r4, r3
 80047c0:	4623      	mov	r3, r4
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d014      	beq.n	80047f4 <USB_DeactivateEndpoint+0x184>
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e0:	b29c      	uxth	r4, r3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	441a      	add	r2, r3
 80047ec:	4b21      	ldr	r3, [pc, #132]	; (8004874 <USB_DeactivateEndpoint+0x204>)
 80047ee:	4323      	orrs	r3, r4
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	b29c      	uxth	r4, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <USB_DeactivateEndpoint+0x204>)
 8004818:	4323      	orrs	r3, r4
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	b29c      	uxth	r4, r3
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <USB_DeactivateEndpoint+0x208>)
 8004842:	4323      	orrs	r3, r4
 8004844:	b29b      	uxth	r3, r3
 8004846:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485e:	b29c      	uxth	r4, r3
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	4b03      	ldr	r3, [pc, #12]	; (8004878 <USB_DeactivateEndpoint+0x208>)
 800486c:	4323      	orrs	r3, r4
 800486e:	b29b      	uxth	r3, r3
 8004870:	8013      	strh	r3, [r2, #0]
 8004872:	e086      	b.n	8004982 <USB_DeactivateEndpoint+0x312>
 8004874:	ffff80c0 	.word	0xffff80c0
 8004878:	ffff8080 	.word	0xffff8080
 800487c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29c      	uxth	r4, r3
 800488e:	4623      	mov	r3, r4
 8004890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d014      	beq.n	80048c2 <USB_DeactivateEndpoint+0x252>
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	b29c      	uxth	r4, r3
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	4b35      	ldr	r3, [pc, #212]	; (8004990 <USB_DeactivateEndpoint+0x320>)
 80048bc:	4323      	orrs	r3, r4
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29c      	uxth	r4, r3
 80048d0:	4623      	mov	r3, r4
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d014      	beq.n	8004904 <USB_DeactivateEndpoint+0x294>
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	b29c      	uxth	r4, r3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <USB_DeactivateEndpoint+0x324>)
 80048fe:	4323      	orrs	r3, r4
 8004900:	b29b      	uxth	r3, r3
 8004902:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	b29c      	uxth	r4, r3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	441a      	add	r2, r3
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <USB_DeactivateEndpoint+0x320>)
 8004928:	4323      	orrs	r3, r4
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004944:	b29c      	uxth	r4, r3
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <USB_DeactivateEndpoint+0x328>)
 8004952:	4323      	orrs	r3, r4
 8004954:	b29b      	uxth	r3, r3
 8004956:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	b29c      	uxth	r4, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <USB_DeactivateEndpoint+0x328>)
 800497c:	4323      	orrs	r3, r4
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bc90      	pop	{r4, r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	ffffc080 	.word	0xffffc080
 8004994:	ffff80c0 	.word	0xffff80c0
 8004998:	ffff8080 	.word	0xffff8080

0800499c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b08d      	sub	sp, #52	; 0x34
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	f040 8160 	bne.w	8004c70 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d909      	bls.n	80049d0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	1ad2      	subs	r2, r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	619a      	str	r2, [r3, #24]
 80049ce:	e005      	b.n	80049dc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	7b1b      	ldrb	r3, [r3, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d119      	bne.n	8004a18 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6959      	ldr	r1, [r3, #20]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	88da      	ldrh	r2, [r3, #6]
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fba2 	bl	800513a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049f6:	687c      	ldr	r4, [r7, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	441c      	add	r4, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	4423      	add	r3, r4
 8004a0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a0e:	461c      	mov	r4, r3
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8023      	strh	r3, [r4, #0]
 8004a16:	e10f      	b.n	8004c38 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d065      	beq.n	8004afa <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a2e:	687c      	ldr	r4, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d148      	bne.n	8004aca <USB_EPStartXfer+0x12e>
 8004a38:	687c      	ldr	r4, [r7, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	441c      	add	r4, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	4423      	add	r3, r4
 8004a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a50:	461c      	mov	r4, r3
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10e      	bne.n	8004a76 <USB_EPStartXfer+0xda>
 8004a58:	8823      	ldrh	r3, [r4, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	8023      	strh	r3, [r4, #0]
 8004a64:	8823      	ldrh	r3, [r4, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8023      	strh	r3, [r4, #0]
 8004a74:	e03d      	b.n	8004af2 <USB_EPStartXfer+0x156>
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	2b3e      	cmp	r3, #62	; 0x3e
 8004a7a:	d810      	bhi.n	8004a9e <USB_EPStartXfer+0x102>
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <USB_EPStartXfer+0xf6>
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	3301      	adds	r3, #1
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	029b      	lsls	r3, r3, #10
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8023      	strh	r3, [r4, #0]
 8004a9c:	e029      	b.n	8004af2 <USB_EPStartXfer+0x156>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <USB_EPStartXfer+0x118>
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	029b      	lsls	r3, r3, #10
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	8023      	strh	r3, [r4, #0]
 8004ac8:	e013      	b.n	8004af2 <USB_EPStartXfer+0x156>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10f      	bne.n	8004af2 <USB_EPStartXfer+0x156>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	441c      	add	r4, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	4423      	add	r3, r4
 8004ae4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	895b      	ldrh	r3, [r3, #10]
 8004af6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004af8:	e063      	b.n	8004bc2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d148      	bne.n	8004b94 <USB_EPStartXfer+0x1f8>
 8004b02:	687c      	ldr	r4, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	441c      	add	r4, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	4423      	add	r3, r4
 8004b16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10e      	bne.n	8004b40 <USB_EPStartXfer+0x1a4>
 8004b22:	8823      	ldrh	r3, [r4, #0]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8023      	strh	r3, [r4, #0]
 8004b2e:	8823      	ldrh	r3, [r4, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8023      	strh	r3, [r4, #0]
 8004b3e:	e03d      	b.n	8004bbc <USB_EPStartXfer+0x220>
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	2b3e      	cmp	r3, #62	; 0x3e
 8004b44:	d810      	bhi.n	8004b68 <USB_EPStartXfer+0x1cc>
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <USB_EPStartXfer+0x1c0>
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	8023      	strh	r3, [r4, #0]
 8004b66:	e029      	b.n	8004bbc <USB_EPStartXfer+0x220>
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <USB_EPStartXfer+0x1e2>
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	029b      	lsls	r3, r3, #10
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8023      	strh	r3, [r4, #0]
 8004b92:	e013      	b.n	8004bbc <USB_EPStartXfer+0x220>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10f      	bne.n	8004bbc <USB_EPStartXfer+0x220>
 8004b9c:	687c      	ldr	r4, [r7, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	441c      	add	r4, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	4423      	add	r3, r4
 8004bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bb4:	461c      	mov	r4, r3
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	891b      	ldrh	r3, [r3, #8]
 8004bc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6959      	ldr	r1, [r3, #20]
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fab4 	bl	800513a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d115      	bne.n	8004c06 <USB_EPStartXfer+0x26a>
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	b29c      	uxth	r4, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	441a      	add	r2, r3
 8004bfc:	4b9a      	ldr	r3, [pc, #616]	; (8004e68 <USB_EPStartXfer+0x4cc>)
 8004bfe:	4323      	orrs	r3, r4
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]
 8004c04:	e018      	b.n	8004c38 <USB_EPStartXfer+0x29c>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d114      	bne.n	8004c38 <USB_EPStartXfer+0x29c>
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	b29c      	uxth	r4, r3
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	4b8e      	ldr	r3, [pc, #568]	; (8004e6c <USB_EPStartXfer+0x4d0>)
 8004c32:	4323      	orrs	r3, r4
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4e:	b29c      	uxth	r4, r3
 8004c50:	f084 0310 	eor.w	r3, r4, #16
 8004c54:	b29c      	uxth	r4, r3
 8004c56:	f084 0320 	eor.w	r3, r4, #32
 8004c5a:	b29c      	uxth	r4, r3
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	4b82      	ldr	r3, [pc, #520]	; (8004e70 <USB_EPStartXfer+0x4d4>)
 8004c68:	4323      	orrs	r3, r4
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]
 8004c6e:	e146      	b.n	8004efe <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d909      	bls.n	8004c90 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	1ad2      	subs	r2, r2, r3
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	619a      	str	r2, [r3, #24]
 8004c8e:	e005      	b.n	8004c9c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	7b1b      	ldrb	r3, [r3, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d148      	bne.n	8004d36 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ca4:	687c      	ldr	r4, [r7, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	441c      	add	r4, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	4423      	add	r3, r4
 8004cb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cbc:	461c      	mov	r4, r3
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10e      	bne.n	8004ce2 <USB_EPStartXfer+0x346>
 8004cc4:	8823      	ldrh	r3, [r4, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	8023      	strh	r3, [r4, #0]
 8004cd0:	8823      	ldrh	r3, [r4, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8023      	strh	r3, [r4, #0]
 8004ce0:	e0f2      	b.n	8004ec8 <USB_EPStartXfer+0x52c>
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ce6:	d810      	bhi.n	8004d0a <USB_EPStartXfer+0x36e>
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <USB_EPStartXfer+0x362>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	029b      	lsls	r3, r3, #10
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8023      	strh	r3, [r4, #0]
 8004d08:	e0de      	b.n	8004ec8 <USB_EPStartXfer+0x52c>
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <USB_EPStartXfer+0x384>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	029b      	lsls	r3, r3, #10
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8023      	strh	r3, [r4, #0]
 8004d34:	e0c8      	b.n	8004ec8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	785b      	ldrb	r3, [r3, #1]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d148      	bne.n	8004dd0 <USB_EPStartXfer+0x434>
 8004d3e:	687c      	ldr	r4, [r7, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	441c      	add	r4, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	4423      	add	r3, r4
 8004d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d56:	461c      	mov	r4, r3
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10e      	bne.n	8004d7c <USB_EPStartXfer+0x3e0>
 8004d5e:	8823      	ldrh	r3, [r4, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8023      	strh	r3, [r4, #0]
 8004d6a:	8823      	ldrh	r3, [r4, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8023      	strh	r3, [r4, #0]
 8004d7a:	e03d      	b.n	8004df8 <USB_EPStartXfer+0x45c>
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d80:	d810      	bhi.n	8004da4 <USB_EPStartXfer+0x408>
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <USB_EPStartXfer+0x3fc>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	3301      	adds	r3, #1
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8023      	strh	r3, [r4, #0]
 8004da2:	e029      	b.n	8004df8 <USB_EPStartXfer+0x45c>
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <USB_EPStartXfer+0x41e>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	029b      	lsls	r3, r3, #10
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8023      	strh	r3, [r4, #0]
 8004dce:	e013      	b.n	8004df8 <USB_EPStartXfer+0x45c>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10f      	bne.n	8004df8 <USB_EPStartXfer+0x45c>
 8004dd8:	687c      	ldr	r4, [r7, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	441c      	add	r4, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	4423      	add	r3, r4
 8004dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004df0:	461c      	mov	r4, r3
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8023      	strh	r3, [r4, #0]
 8004df8:	687c      	ldr	r4, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14e      	bne.n	8004ea0 <USB_EPStartXfer+0x504>
 8004e02:	687c      	ldr	r4, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	441c      	add	r4, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	4423      	add	r3, r4
 8004e16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e1a:	461c      	mov	r4, r3
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10e      	bne.n	8004e40 <USB_EPStartXfer+0x4a4>
 8004e22:	8823      	ldrh	r3, [r4, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8023      	strh	r3, [r4, #0]
 8004e2e:	8823      	ldrh	r3, [r4, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8023      	strh	r3, [r4, #0]
 8004e3e:	e043      	b.n	8004ec8 <USB_EPStartXfer+0x52c>
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	2b3e      	cmp	r3, #62	; 0x3e
 8004e44:	d816      	bhi.n	8004e74 <USB_EPStartXfer+0x4d8>
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <USB_EPStartXfer+0x4c0>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	029b      	lsls	r3, r3, #10
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8023      	strh	r3, [r4, #0]
 8004e66:	e02f      	b.n	8004ec8 <USB_EPStartXfer+0x52c>
 8004e68:	ffff80c0 	.word	0xffff80c0
 8004e6c:	ffffc080 	.word	0xffffc080
 8004e70:	ffff8080 	.word	0xffff8080
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <USB_EPStartXfer+0x4ee>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	029b      	lsls	r3, r3, #10
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8023      	strh	r3, [r4, #0]
 8004e9e:	e013      	b.n	8004ec8 <USB_EPStartXfer+0x52c>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	785b      	ldrb	r3, [r3, #1]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10f      	bne.n	8004ec8 <USB_EPStartXfer+0x52c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	441c      	add	r4, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	4423      	add	r3, r4
 8004eba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	b29c      	uxth	r4, r3
 8004ee0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ee4:	b29c      	uxth	r4, r3
 8004ee6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004eea:	b29c      	uxth	r4, r3
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <USB_EPStartXfer+0x56c>)
 8004ef8:	4323      	orrs	r3, r4
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3734      	adds	r7, #52	; 0x34
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd90      	pop	{r4, r7, pc}
 8004f08:	ffff8080 	.word	0xffff8080

08004f0c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f0c:	b490      	push	{r4, r7}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d018      	beq.n	8004f50 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f34:	b29c      	uxth	r4, r3
 8004f36:	f084 0310 	eor.w	r3, r4, #16
 8004f3a:	b29c      	uxth	r4, r3
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <USB_EPSetStall+0x80>)
 8004f48:	4323      	orrs	r3, r4
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8013      	strh	r3, [r2, #0]
 8004f4e:	e017      	b.n	8004f80 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	b29c      	uxth	r4, r3
 8004f68:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f6c:	b29c      	uxth	r4, r3
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	441a      	add	r2, r3
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <USB_EPSetStall+0x80>)
 8004f7a:	4323      	orrs	r3, r4
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc90      	pop	{r4, r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	ffff8080 	.word	0xffff8080

08004f90 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f90:	b490      	push	{r4, r7}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	7b1b      	ldrb	r3, [r3, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d17d      	bne.n	800509e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d03d      	beq.n	8005026 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29c      	uxth	r4, r3
 8004fb8:	4623      	mov	r3, r4
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d014      	beq.n	8004fec <USB_EPClearStall+0x5c>
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd8:	b29c      	uxth	r4, r3
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	4b31      	ldr	r3, [pc, #196]	; (80050ac <USB_EPClearStall+0x11c>)
 8004fe6:	4323      	orrs	r3, r4
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	78db      	ldrb	r3, [r3, #3]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d054      	beq.n	800509e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500a:	b29c      	uxth	r4, r3
 800500c:	f084 0320 	eor.w	r3, r4, #32
 8005010:	b29c      	uxth	r4, r3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <USB_EPClearStall+0x120>)
 800501e:	4323      	orrs	r3, r4
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]
 8005024:	e03b      	b.n	800509e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29c      	uxth	r4, r3
 8005034:	4623      	mov	r3, r4
 8005036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d014      	beq.n	8005068 <USB_EPClearStall+0xd8>
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	b29c      	uxth	r4, r3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <USB_EPClearStall+0x124>)
 8005062:	4323      	orrs	r3, r4
 8005064:	b29b      	uxth	r3, r3
 8005066:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	b29c      	uxth	r4, r3
 8005080:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005084:	b29c      	uxth	r4, r3
 8005086:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800508a:	b29c      	uxth	r4, r3
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <USB_EPClearStall+0x120>)
 8005098:	4323      	orrs	r3, r4
 800509a:	b29b      	uxth	r3, r3
 800509c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc90      	pop	{r4, r7}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	ffff80c0 	.word	0xffff80c0
 80050b0:	ffff8080 	.word	0xffff8080
 80050b4:	ffffc080 	.word	0xffffc080

080050b8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2280      	movs	r2, #128	; 0x80
 80050ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005114:	b29b      	uxth	r3, r3
 8005116:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005118:	68fb      	ldr	r3, [r7, #12]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800513a:	b480      	push	{r7}
 800513c:	b08d      	sub	sp, #52	; 0x34
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	4611      	mov	r1, r2
 8005146:	461a      	mov	r2, r3
 8005148:	460b      	mov	r3, r1
 800514a:	80fb      	strh	r3, [r7, #6]
 800514c:	4613      	mov	r3, r2
 800514e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005150:	88bb      	ldrh	r3, [r7, #4]
 8005152:	3301      	adds	r3, #1
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	005a      	lsls	r2, r3, #1
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	e01e      	b.n	80051b2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	3301      	adds	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	b29a      	uxth	r2, r3
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	3302      	adds	r3, #2
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	3302      	adds	r3, #2
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	3301      	adds	r3, #1
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	3b01      	subs	r3, #1
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1dd      	bne.n	8005174 <USB_WritePMA+0x3a>
  }
}
 80051b8:	bf00      	nop
 80051ba:	3734      	adds	r7, #52	; 0x34
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b08b      	sub	sp, #44	; 0x2c
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	4611      	mov	r1, r2
 80051ce:	461a      	mov	r2, r3
 80051d0:	460b      	mov	r3, r1
 80051d2:	80fb      	strh	r3, [r7, #6]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80051d8:	88bb      	ldrh	r3, [r7, #4]
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	005a      	lsls	r2, r3, #1
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	e01b      	b.n	8005234 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	3302      	adds	r3, #2
 8005208:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3301      	adds	r3, #1
 8005216:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	0a1b      	lsrs	r3, r3, #8
 800521c:	b2da      	uxtb	r2, r3
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	3302      	adds	r3, #2
 800522c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	3b01      	subs	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e0      	bne.n	80051fc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800523a:	88bb      	ldrh	r3, [r7, #4]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	701a      	strb	r2, [r3, #0]
  }
}
 8005256:	bf00      	nop
 8005258:	372c      	adds	r7, #44	; 0x2c
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	7c1b      	ldrb	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d115      	bne.n	80052a4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527c:	2202      	movs	r2, #2
 800527e:	2181      	movs	r1, #129	; 0x81
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 feb6 	bl	8006ff2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800528c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005290:	2202      	movs	r2, #2
 8005292:	2101      	movs	r1, #1
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 feac 	bl	8006ff2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80052a2:	e012      	b.n	80052ca <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052a4:	2340      	movs	r3, #64	; 0x40
 80052a6:	2202      	movs	r2, #2
 80052a8:	2181      	movs	r1, #129	; 0x81
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 fea1 	bl	8006ff2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052b6:	2340      	movs	r3, #64	; 0x40
 80052b8:	2202      	movs	r2, #2
 80052ba:	2101      	movs	r1, #1
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fe98 	bl	8006ff2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052ca:	2308      	movs	r3, #8
 80052cc:	2203      	movs	r2, #3
 80052ce:	2182      	movs	r1, #130	; 0x82
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f001 fe8e 	bl	8006ff2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052e0:	f001 ffa8 	bl	8007234 <USBD_static_malloc>
 80052e4:	4602      	mov	r2, r0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80052f6:	2301      	movs	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
 80052fa:	e026      	b.n	800534a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005302:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2200      	movs	r2, #0
 8005312:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	7c1b      	ldrb	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800532c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005330:	2101      	movs	r1, #1
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 ff47 	bl	80071c6 <USBD_LL_PrepareReceive>
 8005338:	e007      	b.n	800534a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	2101      	movs	r1, #1
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 ff3e 	bl	80071c6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005364:	2181      	movs	r1, #129	; 0x81
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 fe69 	bl	800703e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005372:	2101      	movs	r1, #1
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 fe62 	bl	800703e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005382:	2182      	movs	r1, #130	; 0x82
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fe5a 	bl	800703e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00e      	beq.n	80053b8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 ff4e 	bl	800724c <USBD_static_free>
    pdev->pClassData = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d039      	beq.n	8005460 <USBD_CDC_Setup+0x9e>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d17c      	bne.n	80054ea <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	88db      	ldrh	r3, [r3, #6]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d029      	beq.n	800544c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da11      	bge.n	8005426 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800540e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	88d2      	ldrh	r2, [r2, #6]
 8005414:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005416:	6939      	ldr	r1, [r7, #16]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	88db      	ldrh	r3, [r3, #6]
 800541c:	461a      	mov	r2, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 f9f6 	bl	8006810 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005424:	e068      	b.n	80054f8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	785a      	ldrb	r2, [r3, #1]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	88db      	ldrh	r3, [r3, #6]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800543c:	6939      	ldr	r1, [r7, #16]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	88db      	ldrh	r3, [r3, #6]
 8005442:	461a      	mov	r2, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 fa11 	bl	800686c <USBD_CtlPrepareRx>
      break;
 800544a:	e055      	b.n	80054f8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	7850      	ldrb	r0, [r2, #1]
 8005458:	2200      	movs	r2, #0
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	4798      	blx	r3
      break;
 800545e:	e04b      	b.n	80054f8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b0a      	cmp	r3, #10
 8005466:	d017      	beq.n	8005498 <USBD_CDC_Setup+0xd6>
 8005468:	2b0b      	cmp	r3, #11
 800546a:	d029      	beq.n	80054c0 <USBD_CDC_Setup+0xfe>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d133      	bne.n	80054d8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005476:	2b03      	cmp	r3, #3
 8005478:	d107      	bne.n	800548a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800547a:	f107 030c 	add.w	r3, r7, #12
 800547e:	2202      	movs	r2, #2
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 f9c4 	bl	8006810 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005488:	e02e      	b.n	80054e8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 f955 	bl	800673c <USBD_CtlError>
            ret = USBD_FAIL;
 8005492:	2302      	movs	r3, #2
 8005494:	75fb      	strb	r3, [r7, #23]
          break;
 8005496:	e027      	b.n	80054e8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d107      	bne.n	80054b2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80054a2:	f107 030f 	add.w	r3, r7, #15
 80054a6:	2201      	movs	r2, #1
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 f9b0 	bl	8006810 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054b0:	e01a      	b.n	80054e8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 f941 	bl	800673c <USBD_CtlError>
            ret = USBD_FAIL;
 80054ba:	2302      	movs	r3, #2
 80054bc:	75fb      	strb	r3, [r7, #23]
          break;
 80054be:	e013      	b.n	80054e8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d00d      	beq.n	80054e6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f001 f935 	bl	800673c <USBD_CtlError>
            ret = USBD_FAIL;
 80054d2:	2302      	movs	r3, #2
 80054d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80054d6:	e006      	b.n	80054e6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 f92e 	bl	800673c <USBD_CtlError>
          ret = USBD_FAIL;
 80054e0:	2302      	movs	r3, #2
 80054e2:	75fb      	strb	r3, [r7, #23]
          break;
 80054e4:	e000      	b.n	80054e8 <USBD_CDC_Setup+0x126>
          break;
 80054e6:	bf00      	nop
      }
      break;
 80054e8:	e006      	b.n	80054f8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f001 f925 	bl	800673c <USBD_CtlError>
      ret = USBD_FAIL;
 80054f2:	2302      	movs	r3, #2
 80054f4:	75fb      	strb	r3, [r7, #23]
      break;
 80054f6:	bf00      	nop
  }

  return ret;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005514:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800551c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d037      	beq.n	8005598 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	331c      	adds	r3, #28
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d026      	beq.n	800558c <USBD_CDC_DataIn+0x8a>
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	331c      	adds	r3, #28
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	0152      	lsls	r2, r2, #5
 8005556:	440a      	add	r2, r1
 8005558:	3238      	adds	r2, #56	; 0x38
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005560:	fb02 f201 	mul.w	r2, r2, r1
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d110      	bne.n	800558c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	331c      	adds	r3, #28
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800557e:	78f9      	ldrb	r1, [r7, #3]
 8005580:	2300      	movs	r3, #0
 8005582:	2200      	movs	r2, #0
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 fdfb 	bl	8007180 <USBD_LL_Transmit>
 800558a:	e003      	b.n	8005594 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 fe26 	bl	800720c <USBD_LL_GetRxDataSize>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80055e6:	4611      	mov	r1, r2
 80055e8:	4798      	blx	r3

    return USBD_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005606:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800560e:	2b00      	cmp	r3, #0
 8005610:	d015      	beq.n	800563e <USBD_CDC_EP0_RxReady+0x46>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005618:	2bff      	cmp	r3, #255	; 0xff
 800561a:	d010      	beq.n	800563e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800562a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005632:	b292      	uxth	r2, r2
 8005634:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	22ff      	movs	r2, #255	; 0xff
 800563a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2243      	movs	r2, #67	; 0x43
 8005654:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005656:	4b03      	ldr	r3, [pc, #12]	; (8005664 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000094 	.word	0x20000094

08005668 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2243      	movs	r2, #67	; 0x43
 8005674:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005676:	4b03      	ldr	r3, [pc, #12]	; (8005684 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000050 	.word	0x20000050

08005688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2243      	movs	r2, #67	; 0x43
 8005694:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005696:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	200000d8 	.word	0x200000d8

080056a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	220a      	movs	r2, #10
 80056b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80056b6:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	2000000c 	.word	0x2000000c

080056c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80056d2:	2302      	movs	r3, #2
 80056d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005708:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005712:	88fa      	ldrh	r2, [r7, #6]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr

08005726 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005736:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01c      	beq.n	80057a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800576c:	2b00      	cmp	r3, #0
 800576e:	d115      	bne.n	800579c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800578e:	b29b      	uxth	r3, r3
 8005790:	2181      	movs	r1, #129	; 0x81
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f001 fcf4 	bl	8007180 <USBD_LL_Transmit>

      return USBD_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e002      	b.n	80057a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d017      	beq.n	80057f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7c1b      	ldrb	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d6:	2101      	movs	r1, #1
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fcf4 	bl	80071c6 <USBD_LL_PrepareReceive>
 80057de:	e007      	b.n	80057f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057e6:	2340      	movs	r3, #64	; 0x40
 80057e8:	2101      	movs	r1, #1
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fceb 	bl	80071c6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	4613      	mov	r3, r2
 800580a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005812:	2302      	movs	r3, #2
 8005814:	e01a      	b.n	800584c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	79fa      	ldrb	r2, [r7, #7]
 8005842:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f001 fb5f 	bl	8006f08 <USBD_LL_Init>

  return USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
 8005874:	e001      	b.n	800587a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005876:	2302      	movs	r3, #2
 8005878:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800587a:	7bfb      	ldrb	r3, [r7, #15]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b082      	sub	sp, #8
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fb94 	bl	8006fbc <USBD_LL_Start>

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058be:	2302      	movs	r3, #2
 80058c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00c      	beq.n	80058e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	4611      	mov	r1, r2
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	4798      	blx	r3
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	4611      	mov	r1, r2
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3

  return USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fecb 	bl	80066c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800593c:	461a      	mov	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2b01      	cmp	r3, #1
 8005950:	d00c      	beq.n	800596c <USBD_LL_SetupStage+0x56>
 8005952:	2b01      	cmp	r3, #1
 8005954:	d302      	bcc.n	800595c <USBD_LL_SetupStage+0x46>
 8005956:	2b02      	cmp	r3, #2
 8005958:	d010      	beq.n	800597c <USBD_LL_SetupStage+0x66>
 800595a:	e017      	b.n	800598c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f9cb 	bl	8005d00 <USBD_StdDevReq>
      break;
 800596a:	e01a      	b.n	80059a2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fa2d 	bl	8005dd4 <USBD_StdItfReq>
      break;
 800597a:	e012      	b.n	80059a2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa6b 	bl	8005e60 <USBD_StdEPReq>
      break;
 800598a:	e00a      	b.n	80059a2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fb6e 	bl	800707c <USBD_LL_StallEP>
      break;
 80059a0:	bf00      	nop
  }

  return USBD_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	460b      	mov	r3, r1
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d14b      	bne.n	8005a58 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d134      	bne.n	8005a3c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d919      	bls.n	8005a12 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	1ad2      	subs	r2, r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d203      	bcs.n	8005a00 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	e002      	b.n	8005a06 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 ff4c 	bl	80068a8 <USBD_CtlContinueRx>
 8005a10:	e038      	b.n	8005a84 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d105      	bne.n	8005a34 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 ff49 	bl	80068cc <USBD_CtlSendStatus>
 8005a3a:	e023      	b.n	8005a84 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	d11e      	bne.n	8005a84 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005a4e:	2100      	movs	r1, #0
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f001 fb13 	bl	800707c <USBD_LL_StallEP>
 8005a56:	e015      	b.n	8005a84 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d108      	bne.n	8005a80 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	7afa      	ldrb	r2, [r7, #11]
 8005a78:	4611      	mov	r1, r2
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	4798      	blx	r3
 8005a7e:	e001      	b.n	8005a84 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a80:	2302      	movs	r3, #2
 8005a82:	e000      	b.n	8005a86 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	460b      	mov	r3, r1
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d17f      	bne.n	8005ba2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d15c      	bne.n	8005b6c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d915      	bls.n	8005aea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 feb6 	bl	8006848 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005adc:	2300      	movs	r3, #0
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f001 fb6f 	bl	80071c6 <USBD_LL_PrepareReceive>
 8005ae8:	e04e      	b.n	8005b88 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	6912      	ldr	r2, [r2, #16]
 8005af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005af6:	fb02 f201 	mul.w	r2, r2, r1
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11c      	bne.n	8005b3a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d316      	bcc.n	8005b3a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d20f      	bcs.n	8005b3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fe92 	bl	8006848 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2100      	movs	r1, #0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f001 fb47 	bl	80071c6 <USBD_LL_PrepareReceive>
 8005b38:	e026      	b.n	8005b88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d105      	bne.n	8005b5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f001 fa8c 	bl	800707c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fec4 	bl	80068f2 <USBD_CtlReceiveStatus>
 8005b6a:	e00d      	b.n	8005b88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d004      	beq.n	8005b80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d103      	bne.n	8005b88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005b80:	2180      	movs	r1, #128	; 0x80
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f001 fa7a 	bl	800707c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d11d      	bne.n	8005bce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fe83 	bl	800589e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ba0:	e015      	b.n	8005bce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d108      	bne.n	8005bca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	7afa      	ldrb	r2, [r7, #11]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	4798      	blx	r3
 8005bc8:	e001      	b.n	8005bce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e000      	b.n	8005bd0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	2200      	movs	r2, #0
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fa03 	bl	8006ff2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2240      	movs	r2, #64	; 0x40
 8005bf8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bfc:	2340      	movs	r3, #64	; 0x40
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2180      	movs	r1, #128	; 0x80
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 f9f5 	bl	8006ff2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2240      	movs	r2, #64	; 0x40
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6852      	ldr	r2, [r2, #4]
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4798      	blx	r3
  }

  return USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	78fa      	ldrb	r2, [r7, #3]
 8005c6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2204      	movs	r2, #4
 8005c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d105      	bne.n	8005cbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d10b      	bne.n	8005cf4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d004      	beq.n	8005d24 <USBD_StdDevReq+0x24>
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d002      	beq.n	8005d24 <USBD_StdDevReq+0x24>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <USBD_StdDevReq+0x34>
 8005d22:	e04c      	b.n	8005dbe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4798      	blx	r3
      break;
 8005d32:	e049      	b.n	8005dc8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	2b09      	cmp	r3, #9
 8005d3a:	d83a      	bhi.n	8005db2 <USBD_StdDevReq+0xb2>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <USBD_StdDevReq+0x44>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d95 	.word	0x08005d95
 8005d48:	08005da9 	.word	0x08005da9
 8005d4c:	08005db3 	.word	0x08005db3
 8005d50:	08005d9f 	.word	0x08005d9f
 8005d54:	08005db3 	.word	0x08005db3
 8005d58:	08005d77 	.word	0x08005d77
 8005d5c:	08005d6d 	.word	0x08005d6d
 8005d60:	08005db3 	.word	0x08005db3
 8005d64:	08005d8b 	.word	0x08005d8b
 8005d68:	08005d81 	.word	0x08005d81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f9d4 	bl	800611c <USBD_GetDescriptor>
          break;
 8005d74:	e022      	b.n	8005dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fb37 	bl	80063ec <USBD_SetAddress>
          break;
 8005d7e:	e01d      	b.n	8005dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fb74 	bl	8006470 <USBD_SetConfig>
          break;
 8005d88:	e018      	b.n	8005dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fbfd 	bl	800658c <USBD_GetConfig>
          break;
 8005d92:	e013      	b.n	8005dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fc2c 	bl	80065f4 <USBD_GetStatus>
          break;
 8005d9c:	e00e      	b.n	8005dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fc5a 	bl	800665a <USBD_SetFeature>
          break;
 8005da6:	e009      	b.n	8005dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fc69 	bl	8006682 <USBD_ClrFeature>
          break;
 8005db0:	e004      	b.n	8005dbc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fcc1 	bl	800673c <USBD_CtlError>
          break;
 8005dba:	bf00      	nop
      }
      break;
 8005dbc:	e004      	b.n	8005dc8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fcbb 	bl	800673c <USBD_CtlError>
      break;
 8005dc6:	bf00      	nop
  }

  return ret;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop

08005dd4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d003      	beq.n	8005df6 <USBD_StdItfReq+0x22>
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d001      	beq.n	8005df6 <USBD_StdItfReq+0x22>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d12a      	bne.n	8005e4c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d81d      	bhi.n	8005e3e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	889b      	ldrh	r3, [r3, #4]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d813      	bhi.n	8005e34 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	88db      	ldrh	r3, [r3, #6]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d110      	bne.n	8005e48 <USBD_StdItfReq+0x74>
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10d      	bne.n	8005e48 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fd4d 	bl	80068cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e32:	e009      	b.n	8005e48 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fc80 	bl	800673c <USBD_CtlError>
          break;
 8005e3c:	e004      	b.n	8005e48 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fc7b 	bl	800673c <USBD_CtlError>
          break;
 8005e46:	e000      	b.n	8005e4a <USBD_StdItfReq+0x76>
          break;
 8005e48:	bf00      	nop
      }
      break;
 8005e4a:	e004      	b.n	8005e56 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fc74 	bl	800673c <USBD_CtlError>
      break;
 8005e54:	bf00      	nop
  }

  return USBD_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	889b      	ldrh	r3, [r3, #4]
 8005e72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d004      	beq.n	8005e8a <USBD_StdEPReq+0x2a>
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d002      	beq.n	8005e8a <USBD_StdEPReq+0x2a>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <USBD_StdEPReq+0x3a>
 8005e88:	e13d      	b.n	8006106 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
      break;
 8005e98:	e13a      	b.n	8006110 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d10a      	bne.n	8005ebc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	e12a      	b.n	8006112 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d03e      	beq.n	8005f42 <USBD_StdEPReq+0xe2>
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d002      	beq.n	8005ece <USBD_StdEPReq+0x6e>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d070      	beq.n	8005fae <USBD_StdEPReq+0x14e>
 8005ecc:	e115      	b.n	80060fa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d002      	beq.n	8005ede <USBD_StdEPReq+0x7e>
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d015      	beq.n	8005f08 <USBD_StdEPReq+0xa8>
 8005edc:	e02b      	b.n	8005f36 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ede:	7bbb      	ldrb	r3, [r7, #14]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00c      	beq.n	8005efe <USBD_StdEPReq+0x9e>
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	2b80      	cmp	r3, #128	; 0x80
 8005ee8:	d009      	beq.n	8005efe <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005eea:	7bbb      	ldrb	r3, [r7, #14]
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 f8c4 	bl	800707c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 f8c0 	bl	800707c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005efc:	e020      	b.n	8005f40 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fc1b 	bl	800673c <USBD_CtlError>
              break;
 8005f06:	e01b      	b.n	8005f40 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	885b      	ldrh	r3, [r3, #2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10e      	bne.n	8005f2e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <USBD_StdEPReq+0xce>
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d008      	beq.n	8005f2e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	88db      	ldrh	r3, [r3, #6]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 f8a7 	bl	800707c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fccc 	bl	80068cc <USBD_CtlSendStatus>

              break;
 8005f34:	e004      	b.n	8005f40 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fbff 	bl	800673c <USBD_CtlError>
              break;
 8005f3e:	bf00      	nop
          }
          break;
 8005f40:	e0e0      	b.n	8006104 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d002      	beq.n	8005f52 <USBD_StdEPReq+0xf2>
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d015      	beq.n	8005f7c <USBD_StdEPReq+0x11c>
 8005f50:	e026      	b.n	8005fa0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00c      	beq.n	8005f72 <USBD_StdEPReq+0x112>
 8005f58:	7bbb      	ldrb	r3, [r7, #14]
 8005f5a:	2b80      	cmp	r3, #128	; 0x80
 8005f5c:	d009      	beq.n	8005f72 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f5e:	7bbb      	ldrb	r3, [r7, #14]
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 f88a 	bl	800707c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f68:	2180      	movs	r1, #128	; 0x80
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 f886 	bl	800707c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f70:	e01c      	b.n	8005fac <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fbe1 	bl	800673c <USBD_CtlError>
              break;
 8005f7a:	e017      	b.n	8005fac <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d112      	bne.n	8005faa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d004      	beq.n	8005f98 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 f891 	bl	80070ba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fc97 	bl	80068cc <USBD_CtlSendStatus>
              }
              break;
 8005f9e:	e004      	b.n	8005faa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fbca 	bl	800673c <USBD_CtlError>
              break;
 8005fa8:	e000      	b.n	8005fac <USBD_StdEPReq+0x14c>
              break;
 8005faa:	bf00      	nop
          }
          break;
 8005fac:	e0aa      	b.n	8006104 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d002      	beq.n	8005fbe <USBD_StdEPReq+0x15e>
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d032      	beq.n	8006022 <USBD_StdEPReq+0x1c2>
 8005fbc:	e097      	b.n	80060ee <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <USBD_StdEPReq+0x174>
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d004      	beq.n	8005fd4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fbb5 	bl	800673c <USBD_CtlError>
                break;
 8005fd2:	e091      	b.n	80060f8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da0b      	bge.n	8005ff4 <USBD_StdEPReq+0x194>
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	3310      	adds	r3, #16
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4413      	add	r3, r2
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	e00b      	b.n	800600c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	3304      	adds	r3, #4
 800600c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2202      	movs	r2, #2
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fbf8 	bl	8006810 <USBD_CtlSendData>
              break;
 8006020:	e06a      	b.n	80060f8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da11      	bge.n	800604e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	f003 020f 	and.w	r2, r3, #15
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	3318      	adds	r3, #24
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d117      	bne.n	8006074 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fb78 	bl	800673c <USBD_CtlError>
                  break;
 800604c:	e054      	b.n	80060f8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800604e:	7bbb      	ldrb	r3, [r7, #14]
 8006050:	f003 020f 	and.w	r2, r3, #15
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fb65 	bl	800673c <USBD_CtlError>
                  break;
 8006072:	e041      	b.n	80060f8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006078:	2b00      	cmp	r3, #0
 800607a:	da0b      	bge.n	8006094 <USBD_StdEPReq+0x234>
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	3310      	adds	r3, #16
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4413      	add	r3, r2
 8006090:	3304      	adds	r3, #4
 8006092:	e00b      	b.n	80060ac <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <USBD_StdEPReq+0x25a>
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	2b80      	cmp	r3, #128	; 0x80
 80060b8:	d103      	bne.n	80060c2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e00e      	b.n	80060e0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 f816 	bl	80070f8 <USBD_LL_IsStallEP>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2201      	movs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	e002      	b.n	80060e0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2202      	movs	r2, #2
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fb92 	bl	8006810 <USBD_CtlSendData>
              break;
 80060ec:	e004      	b.n	80060f8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fb23 	bl	800673c <USBD_CtlError>
              break;
 80060f6:	bf00      	nop
          }
          break;
 80060f8:	e004      	b.n	8006104 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fb1d 	bl	800673c <USBD_CtlError>
          break;
 8006102:	bf00      	nop
      }
      break;
 8006104:	e004      	b.n	8006110 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fb17 	bl	800673c <USBD_CtlError>
      break;
 800610e:	bf00      	nop
  }

  return ret;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	885b      	ldrh	r3, [r3, #2]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	2b06      	cmp	r3, #6
 800613e:	f200 8128 	bhi.w	8006392 <USBD_GetDescriptor+0x276>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <USBD_GetDescriptor+0x2c>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	08006165 	.word	0x08006165
 800614c:	0800617d 	.word	0x0800617d
 8006150:	080061bd 	.word	0x080061bd
 8006154:	08006393 	.word	0x08006393
 8006158:	08006393 	.word	0x08006393
 800615c:	08006333 	.word	0x08006333
 8006160:	0800635f 	.word	0x0800635f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	7c12      	ldrb	r2, [r2, #16]
 8006170:	f107 0108 	add.w	r1, r7, #8
 8006174:	4610      	mov	r0, r2
 8006176:	4798      	blx	r3
 8006178:	60f8      	str	r0, [r7, #12]
      break;
 800617a:	e112      	b.n	80063a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	7c1b      	ldrb	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10d      	bne.n	80061a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	f107 0208 	add.w	r2, r7, #8
 8006190:	4610      	mov	r0, r2
 8006192:	4798      	blx	r3
 8006194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	2202      	movs	r2, #2
 800619c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800619e:	e100      	b.n	80063a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	f107 0208 	add.w	r2, r7, #8
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
 80061b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	2202      	movs	r2, #2
 80061b8:	701a      	strb	r2, [r3, #0]
      break;
 80061ba:	e0f2      	b.n	80063a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	885b      	ldrh	r3, [r3, #2]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	f200 80ac 	bhi.w	8006320 <USBD_GetDescriptor+0x204>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <USBD_GetDescriptor+0xb4>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061e9 	.word	0x080061e9
 80061d4:	0800621d 	.word	0x0800621d
 80061d8:	08006251 	.word	0x08006251
 80061dc:	08006285 	.word	0x08006285
 80061e0:	080062b9 	.word	0x080062b9
 80061e4:	080062ed 	.word	0x080062ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	7c12      	ldrb	r2, [r2, #16]
 8006200:	f107 0108 	add.w	r1, r7, #8
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800620a:	e091      	b.n	8006330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fa94 	bl	800673c <USBD_CtlError>
            err++;
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	3301      	adds	r3, #1
 8006218:	72fb      	strb	r3, [r7, #11]
          break;
 800621a:	e089      	b.n	8006330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	7c12      	ldrb	r2, [r2, #16]
 8006234:	f107 0108 	add.w	r1, r7, #8
 8006238:	4610      	mov	r0, r2
 800623a:	4798      	blx	r3
 800623c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800623e:	e077      	b.n	8006330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa7a 	bl	800673c <USBD_CtlError>
            err++;
 8006248:	7afb      	ldrb	r3, [r7, #11]
 800624a:	3301      	adds	r3, #1
 800624c:	72fb      	strb	r3, [r7, #11]
          break;
 800624e:	e06f      	b.n	8006330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	7c12      	ldrb	r2, [r2, #16]
 8006268:	f107 0108 	add.w	r1, r7, #8
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
 8006270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006272:	e05d      	b.n	8006330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa60 	bl	800673c <USBD_CtlError>
            err++;
 800627c:	7afb      	ldrb	r3, [r7, #11]
 800627e:	3301      	adds	r3, #1
 8006280:	72fb      	strb	r3, [r7, #11]
          break;
 8006282:	e055      	b.n	8006330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	7c12      	ldrb	r2, [r2, #16]
 800629c:	f107 0108 	add.w	r1, r7, #8
 80062a0:	4610      	mov	r0, r2
 80062a2:	4798      	blx	r3
 80062a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062a6:	e043      	b.n	8006330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fa46 	bl	800673c <USBD_CtlError>
            err++;
 80062b0:	7afb      	ldrb	r3, [r7, #11]
 80062b2:	3301      	adds	r3, #1
 80062b4:	72fb      	strb	r3, [r7, #11]
          break;
 80062b6:	e03b      	b.n	8006330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	7c12      	ldrb	r2, [r2, #16]
 80062d0:	f107 0108 	add.w	r1, r7, #8
 80062d4:	4610      	mov	r0, r2
 80062d6:	4798      	blx	r3
 80062d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062da:	e029      	b.n	8006330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa2c 	bl	800673c <USBD_CtlError>
            err++;
 80062e4:	7afb      	ldrb	r3, [r7, #11]
 80062e6:	3301      	adds	r3, #1
 80062e8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ea:	e021      	b.n	8006330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	7c12      	ldrb	r2, [r2, #16]
 8006304:	f107 0108 	add.w	r1, r7, #8
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
 800630c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800630e:	e00f      	b.n	8006330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fa12 	bl	800673c <USBD_CtlError>
            err++;
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	3301      	adds	r3, #1
 800631c:	72fb      	strb	r3, [r7, #11]
          break;
 800631e:	e007      	b.n	8006330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa0a 	bl	800673c <USBD_CtlError>
          err++;
 8006328:	7afb      	ldrb	r3, [r7, #11]
 800632a:	3301      	adds	r3, #1
 800632c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800632e:	e038      	b.n	80063a2 <USBD_GetDescriptor+0x286>
 8006330:	e037      	b.n	80063a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7c1b      	ldrb	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006342:	f107 0208 	add.w	r2, r7, #8
 8006346:	4610      	mov	r0, r2
 8006348:	4798      	blx	r3
 800634a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800634c:	e029      	b.n	80063a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f9f3 	bl	800673c <USBD_CtlError>
        err++;
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	3301      	adds	r3, #1
 800635a:	72fb      	strb	r3, [r7, #11]
      break;
 800635c:	e021      	b.n	80063a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	7c1b      	ldrb	r3, [r3, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10d      	bne.n	8006382 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	f107 0208 	add.w	r2, r7, #8
 8006372:	4610      	mov	r0, r2
 8006374:	4798      	blx	r3
 8006376:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	2207      	movs	r2, #7
 800637e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006380:	e00f      	b.n	80063a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f9d9 	bl	800673c <USBD_CtlError>
        err++;
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	3301      	adds	r3, #1
 800638e:	72fb      	strb	r3, [r7, #11]
      break;
 8006390:	e007      	b.n	80063a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f9d1 	bl	800673c <USBD_CtlError>
      err++;
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	3301      	adds	r3, #1
 800639e:	72fb      	strb	r3, [r7, #11]
      break;
 80063a0:	bf00      	nop
  }

  if (err != 0U)
 80063a2:	7afb      	ldrb	r3, [r7, #11]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11c      	bne.n	80063e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80063a8:	893b      	ldrh	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d011      	beq.n	80063d2 <USBD_GetDescriptor+0x2b6>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	88db      	ldrh	r3, [r3, #6]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00d      	beq.n	80063d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	88da      	ldrh	r2, [r3, #6]
 80063ba:	893b      	ldrh	r3, [r7, #8]
 80063bc:	4293      	cmp	r3, r2
 80063be:	bf28      	it	cs
 80063c0:	4613      	movcs	r3, r2
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063c6:	893b      	ldrh	r3, [r7, #8]
 80063c8:	461a      	mov	r2, r3
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fa1f 	bl	8006810 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	88db      	ldrh	r3, [r3, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa76 	bl	80068cc <USBD_CtlSendStatus>
 80063e0:	e000      	b.n	80063e4 <USBD_GetDescriptor+0x2c8>
    return;
 80063e2:	bf00      	nop
    }
  }
}
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop

080063ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	889b      	ldrh	r3, [r3, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d130      	bne.n	8006460 <USBD_SetAddress+0x74>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	88db      	ldrh	r3, [r3, #6]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d12c      	bne.n	8006460 <USBD_SetAddress+0x74>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	885b      	ldrh	r3, [r3, #2]
 800640a:	2b7f      	cmp	r3, #127	; 0x7f
 800640c:	d828      	bhi.n	8006460 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	885b      	ldrh	r3, [r3, #2]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006420:	2b03      	cmp	r3, #3
 8006422:	d104      	bne.n	800642e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f988 	bl	800673c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642c:	e01c      	b.n	8006468 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	7bfa      	ldrb	r2, [r7, #15]
 8006432:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fe81 	bl	8007142 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fa43 	bl	80068cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006454:	e008      	b.n	8006468 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645e:	e003      	b.n	8006468 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f96a 	bl	800673c <USBD_CtlError>
  }
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	885b      	ldrh	r3, [r3, #2]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	4b41      	ldr	r3, [pc, #260]	; (8006588 <USBD_SetConfig+0x118>)
 8006482:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006484:	4b40      	ldr	r3, [pc, #256]	; (8006588 <USBD_SetConfig+0x118>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d904      	bls.n	8006496 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f954 	bl	800673c <USBD_CtlError>
 8006494:	e075      	b.n	8006582 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	2b02      	cmp	r3, #2
 800649e:	d002      	beq.n	80064a6 <USBD_SetConfig+0x36>
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d023      	beq.n	80064ec <USBD_SetConfig+0x7c>
 80064a4:	e062      	b.n	800656c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80064a6:	4b38      	ldr	r3, [pc, #224]	; (8006588 <USBD_SetConfig+0x118>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01a      	beq.n	80064e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80064ae:	4b36      	ldr	r3, [pc, #216]	; (8006588 <USBD_SetConfig+0x118>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2203      	movs	r2, #3
 80064bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064c0:	4b31      	ldr	r3, [pc, #196]	; (8006588 <USBD_SetConfig+0x118>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff f9f3 	bl	80058b2 <USBD_SetClassConfig>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d104      	bne.n	80064dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f931 	bl	800673c <USBD_CtlError>
            return;
 80064da:	e052      	b.n	8006582 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9f5 	bl	80068cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80064e2:	e04e      	b.n	8006582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9f1 	bl	80068cc <USBD_CtlSendStatus>
        break;
 80064ea:	e04a      	b.n	8006582 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80064ec:	4b26      	ldr	r3, [pc, #152]	; (8006588 <USBD_SetConfig+0x118>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d112      	bne.n	800651a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80064fc:	4b22      	ldr	r3, [pc, #136]	; (8006588 <USBD_SetConfig+0x118>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006506:	4b20      	ldr	r3, [pc, #128]	; (8006588 <USBD_SetConfig+0x118>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff f9ef 	bl	80058f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f9da 	bl	80068cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006518:	e033      	b.n	8006582 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800651a:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <USBD_SetConfig+0x118>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d01d      	beq.n	8006564 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff f9dd 	bl	80058f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <USBD_SetConfig+0x118>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <USBD_SetConfig+0x118>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff f9b3 	bl	80058b2 <USBD_SetClassConfig>
 800654c:	4603      	mov	r3, r0
 800654e:	2b02      	cmp	r3, #2
 8006550:	d104      	bne.n	800655c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8f1 	bl	800673c <USBD_CtlError>
            return;
 800655a:	e012      	b.n	8006582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f9b5 	bl	80068cc <USBD_CtlSendStatus>
        break;
 8006562:	e00e      	b.n	8006582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f9b1 	bl	80068cc <USBD_CtlSendStatus>
        break;
 800656a:	e00a      	b.n	8006582 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f8e4 	bl	800673c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006574:	4b04      	ldr	r3, [pc, #16]	; (8006588 <USBD_SetConfig+0x118>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff f9b8 	bl	80058f0 <USBD_ClrClassConfig>
        break;
 8006580:	bf00      	nop
    }
  }
}
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000198 	.word	0x20000198

0800658c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	88db      	ldrh	r3, [r3, #6]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d004      	beq.n	80065a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f8cb 	bl	800673c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065a6:	e021      	b.n	80065ec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	db17      	blt.n	80065e2 <USBD_GetConfig+0x56>
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	dd02      	ble.n	80065bc <USBD_GetConfig+0x30>
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d00b      	beq.n	80065d2 <USBD_GetConfig+0x46>
 80065ba:	e012      	b.n	80065e2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3308      	adds	r3, #8
 80065c6:	2201      	movs	r2, #1
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f920 	bl	8006810 <USBD_CtlSendData>
        break;
 80065d0:	e00c      	b.n	80065ec <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3304      	adds	r3, #4
 80065d6:	2201      	movs	r2, #1
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f918 	bl	8006810 <USBD_CtlSendData>
        break;
 80065e0:	e004      	b.n	80065ec <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f8a9 	bl	800673c <USBD_CtlError>
        break;
 80065ea:	bf00      	nop
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006604:	3b01      	subs	r3, #1
 8006606:	2b02      	cmp	r3, #2
 8006608:	d81e      	bhi.n	8006648 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	88db      	ldrh	r3, [r3, #6]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d004      	beq.n	800661c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f891 	bl	800673c <USBD_CtlError>
        break;
 800661a:	e01a      	b.n	8006652 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f043 0202 	orr.w	r2, r3, #2
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	330c      	adds	r3, #12
 800663c:	2202      	movs	r2, #2
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f8e5 	bl	8006810 <USBD_CtlSendData>
      break;
 8006646:	e004      	b.n	8006652 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f876 	bl	800673c <USBD_CtlError>
      break;
 8006650:	bf00      	nop
  }
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d106      	bne.n	800667a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f929 	bl	80068cc <USBD_CtlSendStatus>
  }
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006692:	3b01      	subs	r3, #1
 8006694:	2b02      	cmp	r3, #2
 8006696:	d80b      	bhi.n	80066b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	885b      	ldrh	r3, [r3, #2]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10c      	bne.n	80066ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f90f 	bl	80068cc <USBD_CtlSendStatus>
      }
      break;
 80066ae:	e004      	b.n	80066ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f842 	bl	800673c <USBD_CtlError>
      break;
 80066b8:	e000      	b.n	80066bc <USBD_ClrFeature+0x3a>
      break;
 80066ba:	bf00      	nop
  }
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781a      	ldrb	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	785a      	ldrb	r2, [r3, #1]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	3302      	adds	r3, #2
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	3303      	adds	r3, #3
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	4413      	add	r3, r2
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	3304      	adds	r3, #4
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b29a      	uxth	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	3305      	adds	r3, #5
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	b29b      	uxth	r3, r3
 800670e:	4413      	add	r3, r2
 8006710:	b29a      	uxth	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	3306      	adds	r3, #6
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b29a      	uxth	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	3307      	adds	r3, #7
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	b29b      	uxth	r3, r3
 800672a:	4413      	add	r3, r2
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	80da      	strh	r2, [r3, #6]

}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006746:	2180      	movs	r1, #128	; 0x80
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fc97 	bl	800707c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800674e:	2100      	movs	r1, #0
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fc93 	bl	800707c <USBD_LL_StallEP>
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b086      	sub	sp, #24
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d032      	beq.n	80067da <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f834 	bl	80067e2 <USBD_GetLen>
 800677a:	4603      	mov	r3, r0
 800677c:	3301      	adds	r3, #1
 800677e:	b29b      	uxth	r3, r3
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	75fa      	strb	r2, [r7, #23]
 800678e:	461a      	mov	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4413      	add	r3, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7812      	ldrb	r2, [r2, #0]
 8006798:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	75fa      	strb	r2, [r7, #23]
 80067a0:	461a      	mov	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4413      	add	r3, r2
 80067a6:	2203      	movs	r2, #3
 80067a8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80067aa:	e012      	b.n	80067d2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	60fa      	str	r2, [r7, #12]
 80067b2:	7dfa      	ldrb	r2, [r7, #23]
 80067b4:	1c51      	adds	r1, r2, #1
 80067b6:	75f9      	strb	r1, [r7, #23]
 80067b8:	4611      	mov	r1, r2
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	440a      	add	r2, r1
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	75fa      	strb	r2, [r7, #23]
 80067c8:	461a      	mov	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	4413      	add	r3, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e8      	bne.n	80067ac <USBD_GetString+0x4e>
    }
  }
}
 80067da:	bf00      	nop
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80067ee:	e005      	b.n	80067fc <USBD_GetLen+0x1a>
  {
    len++;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	3301      	adds	r3, #1
 80067f4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3301      	adds	r3, #1
 80067fa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f5      	bne.n	80067f0 <USBD_GetLen+0xe>
  }

  return len;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2202      	movs	r2, #2
 8006822:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800682c:	88fa      	ldrh	r2, [r7, #6]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	2100      	movs	r1, #0
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fca1 	bl	8007180 <USBD_LL_Transmit>

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	2100      	movs	r1, #0
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fc8f 	bl	8007180 <USBD_LL_Transmit>

  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2203      	movs	r2, #3
 800687e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	2100      	movs	r1, #0
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fc94 	bl	80071c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	2100      	movs	r1, #0
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fc82 	bl	80071c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2204      	movs	r2, #4
 80068d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068dc:	2300      	movs	r3, #0
 80068de:	2200      	movs	r2, #0
 80068e0:	2100      	movs	r1, #0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fc4c 	bl	8007180 <USBD_LL_Transmit>

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2205      	movs	r2, #5
 80068fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006902:	2300      	movs	r3, #0
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fc5c 	bl	80071c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800691c:	2200      	movs	r2, #0
 800691e:	4912      	ldr	r1, [pc, #72]	; (8006968 <MX_USB_DEVICE_Init+0x50>)
 8006920:	4812      	ldr	r0, [pc, #72]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006922:	f7fe ff6c 	bl	80057fe <USBD_Init>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800692c:	f7f9 fe5a 	bl	80005e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006930:	490f      	ldr	r1, [pc, #60]	; (8006970 <MX_USB_DEVICE_Init+0x58>)
 8006932:	480e      	ldr	r0, [pc, #56]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006934:	f7fe ff8e 	bl	8005854 <USBD_RegisterClass>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800693e:	f7f9 fe51 	bl	80005e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006942:	490c      	ldr	r1, [pc, #48]	; (8006974 <MX_USB_DEVICE_Init+0x5c>)
 8006944:	4809      	ldr	r0, [pc, #36]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006946:	f7fe febf 	bl	80056c8 <USBD_CDC_RegisterInterface>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006950:	f7f9 fe48 	bl	80005e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006954:	4805      	ldr	r0, [pc, #20]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006956:	f7fe ff96 	bl	8005886 <USBD_Start>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006960:	f7f9 fe40 	bl	80005e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	2000012c 	.word	0x2000012c
 800696c:	20000410 	.word	0x20000410
 8006970:	20000018 	.word	0x20000018
 8006974:	2000011c 	.word	0x2000011c

08006978 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800697c:	2200      	movs	r2, #0
 800697e:	4905      	ldr	r1, [pc, #20]	; (8006994 <CDC_Init_FS+0x1c>)
 8006980:	4805      	ldr	r0, [pc, #20]	; (8006998 <CDC_Init_FS+0x20>)
 8006982:	f7fe feb7 	bl	80056f4 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006986:	4905      	ldr	r1, [pc, #20]	; (800699c <CDC_Init_FS+0x24>)
 8006988:	4803      	ldr	r0, [pc, #12]	; (8006998 <CDC_Init_FS+0x20>)
 800698a:	f7fe fecc 	bl	8005726 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800698e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8006990:	4618      	mov	r0, r3
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000934 	.word	0x20000934
 8006998:	20000410 	.word	0x20000410
 800699c:	20000890 	.word	0x20000890

080069a0 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 80069a4:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr
	...

080069b0 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	71fb      	strb	r3, [r7, #7]
 80069bc:	4613      	mov	r3, r2
 80069be:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	2b23      	cmp	r3, #35	; 0x23
 80069c4:	d84a      	bhi.n	8006a5c <CDC_Control_FS+0xac>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <CDC_Control_FS+0x1c>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	08006a5d 	.word	0x08006a5d
 80069d0:	08006a5d 	.word	0x08006a5d
 80069d4:	08006a5d 	.word	0x08006a5d
 80069d8:	08006a5d 	.word	0x08006a5d
 80069dc:	08006a5d 	.word	0x08006a5d
 80069e0:	08006a5d 	.word	0x08006a5d
 80069e4:	08006a5d 	.word	0x08006a5d
 80069e8:	08006a5d 	.word	0x08006a5d
 80069ec:	08006a5d 	.word	0x08006a5d
 80069f0:	08006a5d 	.word	0x08006a5d
 80069f4:	08006a5d 	.word	0x08006a5d
 80069f8:	08006a5d 	.word	0x08006a5d
 80069fc:	08006a5d 	.word	0x08006a5d
 8006a00:	08006a5d 	.word	0x08006a5d
 8006a04:	08006a5d 	.word	0x08006a5d
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	08006a5d 	.word	0x08006a5d
 8006a10:	08006a5d 	.word	0x08006a5d
 8006a14:	08006a5d 	.word	0x08006a5d
 8006a18:	08006a5d 	.word	0x08006a5d
 8006a1c:	08006a5d 	.word	0x08006a5d
 8006a20:	08006a5d 	.word	0x08006a5d
 8006a24:	08006a5d 	.word	0x08006a5d
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a5d 	.word	0x08006a5d
 8006a3c:	08006a5d 	.word	0x08006a5d
 8006a40:	08006a5d 	.word	0x08006a5d
 8006a44:	08006a5d 	.word	0x08006a5d
 8006a48:	08006a5d 	.word	0x08006a5d
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a5d 	.word	0x08006a5d
 8006a54:	08006a5d 	.word	0x08006a5d
 8006a58:	08006a5d 	.word	0x08006a5d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8006a5c:	bf00      	nop
	}

	return (USBD_OK);
 8006a5e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop

08006a6c <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8006a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
 8006a76:	466b      	mov	r3, sp
 8006a78:	461e      	mov	r6, r3
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	4829      	ldr	r0, [pc, #164]	; (8006b24 <CDC_Receive_FS+0xb8>)
 8006a7e:	f7fe fe52 	bl	8005726 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a82:	4828      	ldr	r0, [pc, #160]	; (8006b24 <CDC_Receive_FS+0xb8>)
 8006a84:	f7fe fe91 	bl	80057aa <USBD_CDC_ReceivePacket>

	// Cambios
	uint8_t BufAux[*Len+3];
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	1cdd      	adds	r5, r3, #3
 8006a8e:	462b      	mov	r3, r5
 8006a90:	3b01      	subs	r3, #1
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	4629      	mov	r1, r5
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	f04f 0400 	mov.w	r4, #0
 8006aa2:	00d4      	lsls	r4, r2, #3
 8006aa4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006aa8:	00cb      	lsls	r3, r1, #3
 8006aaa:	4629      	mov	r1, r5
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	f04f 0400 	mov.w	r4, #0
 8006ab8:	00d4      	lsls	r4, r2, #3
 8006aba:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006abe:	00cb      	lsls	r3, r1, #3
 8006ac0:	1deb      	adds	r3, r5, #7
 8006ac2:	08db      	lsrs	r3, r3, #3
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	ebad 0d03 	sub.w	sp, sp, r3
 8006aca:	466b      	mov	r3, sp
 8006acc:	3300      	adds	r3, #0
 8006ace:	60bb      	str	r3, [r7, #8]
	memcpy(&BufAux[0], Buf, *Len);
 8006ad0:	68b8      	ldr	r0, [r7, #8]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	f000 fc1b 	bl	8007314 <memcpy>
	BufAux[*Len] = '\r';
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	210d      	movs	r1, #13
 8006ae6:	54d1      	strb	r1, [r2, r3]
	BufAux[*Len+1] = '\n';
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3301      	adds	r3, #1
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	210a      	movs	r1, #10
 8006af2:	54d1      	strb	r1, [r2, r3]
	BufAux[*Len+2] = '\0';
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3302      	adds	r3, #2
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	2100      	movs	r1, #0
 8006afe:	54d1      	strb	r1, [r2, r3]

	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8006b00:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <CDC_Receive_FS+0xb8>)
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d105      	bne.n	8006b16 <CDC_Receive_FS+0xaa>
		CDC_Transmit_FS(BufAux, sizeof(BufAux));
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	b2aa      	uxth	r2, r5
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 f809 	bl	8006b28 <CDC_Transmit_FS>
	}

	return (USBD_OK);
 8006b16:	2300      	movs	r3, #0
 8006b18:	46b5      	mov	sp, r6
	/* USER CODE END 6 */
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000410 	.word	0x20000410

08006b28 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8006b38:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <CDC_Transmit_FS+0x48>)
 8006b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3e:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e00b      	b.n	8006b66 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b4e:	887b      	ldrh	r3, [r7, #2]
 8006b50:	461a      	mov	r2, r3
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4806      	ldr	r0, [pc, #24]	; (8006b70 <CDC_Transmit_FS+0x48>)
 8006b56:	f7fe fdcd 	bl	80056f4 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b5a:	4805      	ldr	r0, [pc, #20]	; (8006b70 <CDC_Transmit_FS+0x48>)
 8006b5c:	f7fe fdf6 	bl	800574c <USBD_CDC_TransmitPacket>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000410 	.word	0x20000410

08006b74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	6039      	str	r1, [r7, #0]
 8006b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2212      	movs	r2, #18
 8006b84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b86:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000148 	.word	0x20000148

08006b98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	6039      	str	r1, [r7, #0]
 8006ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006baa:	4b03      	ldr	r3, [pc, #12]	; (8006bb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	2000015c 	.word	0x2000015c

08006bbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4907      	ldr	r1, [pc, #28]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bd2:	4808      	ldr	r0, [pc, #32]	; (8006bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bd4:	f7ff fdc3 	bl	800675e <USBD_GetString>
 8006bd8:	e004      	b.n	8006be4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bde:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006be0:	f7ff fdbd 	bl	800675e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000980 	.word	0x20000980
 8006bf4:	08007368 	.word	0x08007368

08006bf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	4904      	ldr	r1, [pc, #16]	; (8006c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c08:	4804      	ldr	r0, [pc, #16]	; (8006c1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c0a:	f7ff fda8 	bl	800675e <USBD_GetString>
  return USBD_StrDesc;
 8006c0e:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000980 	.word	0x20000980
 8006c1c:	08007380 	.word	0x08007380

08006c20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	6039      	str	r1, [r7, #0]
 8006c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	221a      	movs	r2, #26
 8006c30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c32:	f000 f843 	bl	8006cbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c36:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000160 	.word	0x20000160

08006c44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d105      	bne.n	8006c62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	4907      	ldr	r1, [pc, #28]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c5a:	4808      	ldr	r0, [pc, #32]	; (8006c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c5c:	f7ff fd7f 	bl	800675e <USBD_GetString>
 8006c60:	e004      	b.n	8006c6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	4904      	ldr	r1, [pc, #16]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c66:	4805      	ldr	r0, [pc, #20]	; (8006c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c68:	f7ff fd79 	bl	800675e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c6c:	4b02      	ldr	r3, [pc, #8]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000980 	.word	0x20000980
 8006c7c:	08007394 	.word	0x08007394

08006c80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4907      	ldr	r1, [pc, #28]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c96:	4808      	ldr	r0, [pc, #32]	; (8006cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c98:	f7ff fd61 	bl	800675e <USBD_GetString>
 8006c9c:	e004      	b.n	8006ca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4904      	ldr	r1, [pc, #16]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ca2:	4805      	ldr	r0, [pc, #20]	; (8006cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ca4:	f7ff fd5b 	bl	800675e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000980 	.word	0x20000980
 8006cb8:	080073a0 	.word	0x080073a0

08006cbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <Get_SerialNum+0x44>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <Get_SerialNum+0x48>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cce:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <Get_SerialNum+0x4c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ce2:	2208      	movs	r2, #8
 8006ce4:	4909      	ldr	r1, [pc, #36]	; (8006d0c <Get_SerialNum+0x50>)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f814 	bl	8006d14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cec:	2204      	movs	r2, #4
 8006cee:	4908      	ldr	r1, [pc, #32]	; (8006d10 <Get_SerialNum+0x54>)
 8006cf0:	68b8      	ldr	r0, [r7, #8]
 8006cf2:	f000 f80f 	bl	8006d14 <IntToUnicode>
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	1ffff7e8 	.word	0x1ffff7e8
 8006d04:	1ffff7ec 	.word	0x1ffff7ec
 8006d08:	1ffff7f0 	.word	0x1ffff7f0
 8006d0c:	20000162 	.word	0x20000162
 8006d10:	20000172 	.word	0x20000172

08006d14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
 8006d2a:	e027      	b.n	8006d7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	0f1b      	lsrs	r3, r3, #28
 8006d30:	2b09      	cmp	r3, #9
 8006d32:	d80b      	bhi.n	8006d4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	0f1b      	lsrs	r3, r3, #28
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	440b      	add	r3, r1
 8006d44:	3230      	adds	r2, #48	; 0x30
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e00a      	b.n	8006d62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	0f1b      	lsrs	r3, r3, #28
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4619      	mov	r1, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3237      	adds	r2, #55	; 0x37
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
 8006d7c:	7dfa      	ldrb	r2, [r7, #23]
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3d3      	bcc.n	8006d2c <IntToUnicode+0x18>
  }
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr
	...

08006d90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <HAL_PCD_MspInit+0x44>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d113      	bne.n	8006dca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006da2:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <HAL_PCD_MspInit+0x48>)
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	4a0c      	ldr	r2, [pc, #48]	; (8006dd8 <HAL_PCD_MspInit+0x48>)
 8006da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dac:	61d3      	str	r3, [r2, #28]
 8006dae:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <HAL_PCD_MspInit+0x48>)
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	2014      	movs	r0, #20
 8006dc0:	f7fa fae9 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006dc4:	2014      	movs	r0, #20
 8006dc6:	f7fa fb02 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40005c00 	.word	0x40005c00
 8006dd8:	40021000 	.word	0x40021000

08006ddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f7fe fd8f 	bl	8005916 <USBD_LL_SetupStage>
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	015b      	lsls	r3, r3, #5
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	4619      	mov	r1, r3
 8006e24:	f7fe fdc2 	bl	80059ac <USBD_LL_DataOutStage>
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	015b      	lsls	r3, r3, #5
 8006e48:	4413      	add	r3, r2
 8006e4a:	333c      	adds	r3, #60	; 0x3c
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	4619      	mov	r1, r3
 8006e52:	f7fe fe1c 	bl	8005a8e <USBD_LL_DataInStage>
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe ff2c 	bl	8005cca <USBD_LL_SOF>
}
 8006e72:	bf00      	nop
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e82:	2301      	movs	r3, #1
 8006e84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d001      	beq.n	8006e92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e8e:	f7f9 fba9 	bl	80005e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e98:	7bfa      	ldrb	r2, [r7, #15]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fedc 	bl	8005c5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fe95 	bl	8005bd8 <USBD_LL_Reset>
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fed6 	bl	8005c78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ed4:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <HAL_PCD_SuspendCallback+0x30>)
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	4a03      	ldr	r2, [pc, #12]	; (8006ee8 <HAL_PCD_SuspendCallback+0x30>)
 8006eda:	f043 0306 	orr.w	r3, r3, #6
 8006ede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	e000ed00 	.word	0xe000ed00

08006eec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fed0 	bl	8005ca0 <USBD_LL_Resume>
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006f10:	4a28      	ldr	r2, [pc, #160]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006f20:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f22:	4a25      	ldr	r2, [pc, #148]	; (8006fb8 <USBD_LL_Init+0xb0>)
 8006f24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006f26:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f28:	2208      	movs	r2, #8
 8006f2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f2c:	4b21      	ldr	r3, [pc, #132]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f2e:	2202      	movs	r2, #2
 8006f30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f32:	4b20      	ldr	r3, [pc, #128]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f38:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f3e:	4b1d      	ldr	r3, [pc, #116]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f44:	481b      	ldr	r0, [pc, #108]	; (8006fb4 <USBD_LL_Init+0xac>)
 8006f46:	f7fa fd0f 	bl	8001968 <HAL_PCD_Init>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f50:	f7f9 fb48 	bl	80005e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f5a:	2318      	movs	r3, #24
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2100      	movs	r1, #0
 8006f60:	f7fb fba8 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f6a:	2358      	movs	r3, #88	; 0x58
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2180      	movs	r1, #128	; 0x80
 8006f70:	f7fb fba0 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f7a:	23c0      	movs	r3, #192	; 0xc0
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2181      	movs	r1, #129	; 0x81
 8006f80:	f7fb fb98 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2101      	movs	r1, #1
 8006f92:	f7fb fb8f 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2182      	movs	r1, #130	; 0x82
 8006fa4:	f7fb fb86 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000b80 	.word	0x20000b80
 8006fb8:	40005c00 	.word	0x40005c00

08006fbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fa fda9 	bl	8001b2a <HAL_PCD_Start>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f948 	bl	8007274 <USBD_Get_USB_Status>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	461a      	mov	r2, r3
 8007000:	4603      	mov	r3, r0
 8007002:	70fb      	strb	r3, [r7, #3]
 8007004:	460b      	mov	r3, r1
 8007006:	70bb      	strb	r3, [r7, #2]
 8007008:	4613      	mov	r3, r2
 800700a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800701a:	78bb      	ldrb	r3, [r7, #2]
 800701c:	883a      	ldrh	r2, [r7, #0]
 800701e:	78f9      	ldrb	r1, [r7, #3]
 8007020:	f7fa fedc 	bl	8001ddc <HAL_PCD_EP_Open>
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f922 	bl	8007274 <USBD_Get_USB_Status>
 8007030:	4603      	mov	r3, r0
 8007032:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007034:	7bbb      	ldrb	r3, [r7, #14]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7fa ff1d 	bl	8001e9c <HAL_PCD_EP_Close>
 8007062:	4603      	mov	r3, r0
 8007064:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 f903 	bl	8007274 <USBD_Get_USB_Status>
 800706e:	4603      	mov	r3, r0
 8007070:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007072:	7bbb      	ldrb	r3, [r7, #14]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f7fa ffc7 	bl	800202e <HAL_PCD_EP_SetStall>
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f8e4 	bl	8007274 <USBD_Get_USB_Status>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fb f802 	bl	80020e2 <HAL_PCD_EP_ClrStall>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f8c5 	bl	8007274 <USBD_Get_USB_Status>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800710a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800710c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	da08      	bge.n	8007126 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	015b      	lsls	r3, r3, #5
 800711e:	4413      	add	r3, r2
 8007120:	332a      	adds	r3, #42	; 0x2a
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	e008      	b.n	8007138 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	015b      	lsls	r3, r3, #5
 8007130:	4413      	add	r3, r2
 8007132:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007136:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr

08007142 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f7fa fe16 	bl	8001d92 <HAL_PCD_SetAddress>
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f881 	bl	8007274 <USBD_Get_USB_Status>
 8007172:	4603      	mov	r3, r0
 8007174:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007176:	7bbb      	ldrb	r3, [r7, #14]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	607a      	str	r2, [r7, #4]
 800718a:	461a      	mov	r2, r3
 800718c:	460b      	mov	r3, r1
 800718e:	72fb      	strb	r3, [r7, #11]
 8007190:	4613      	mov	r3, r2
 8007192:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071a2:	893b      	ldrh	r3, [r7, #8]
 80071a4:	7af9      	ldrb	r1, [r7, #11]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	f7fa ff08 	bl	8001fbc <HAL_PCD_EP_Transmit>
 80071ac:	4603      	mov	r3, r0
 80071ae:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 f85e 	bl	8007274 <USBD_Get_USB_Status>
 80071b8:	4603      	mov	r3, r0
 80071ba:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80071bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b086      	sub	sp, #24
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	461a      	mov	r2, r3
 80071d2:	460b      	mov	r3, r1
 80071d4:	72fb      	strb	r3, [r7, #11]
 80071d6:	4613      	mov	r3, r2
 80071d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071e8:	893b      	ldrh	r3, [r7, #8]
 80071ea:	7af9      	ldrb	r1, [r7, #11]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	f7fa fe97 	bl	8001f20 <HAL_PCD_EP_Receive>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 f83b 	bl	8007274 <USBD_Get_USB_Status>
 80071fe:	4603      	mov	r3, r0
 8007200:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007202:	7dbb      	ldrb	r3, [r7, #22]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	4611      	mov	r1, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f7fa feb6 	bl	8001f94 <HAL_PCD_EP_GetRxCount>
 8007228:	4603      	mov	r3, r0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800723c:	4b02      	ldr	r3, [pc, #8]	; (8007248 <USBD_static_malloc+0x14>)
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr
 8007248:	2000019c 	.word	0x2000019c

0800724c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]

}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr

0800725e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr

08007274 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	2b03      	cmp	r3, #3
 8007286:	d817      	bhi.n	80072b8 <USBD_Get_USB_Status+0x44>
 8007288:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <USBD_Get_USB_Status+0x1c>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072a1 	.word	0x080072a1
 8007294:	080072a7 	.word	0x080072a7
 8007298:	080072ad 	.word	0x080072ad
 800729c:	080072b3 	.word	0x080072b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]
    break;
 80072a4:	e00b      	b.n	80072be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072a6:	2302      	movs	r3, #2
 80072a8:	73fb      	strb	r3, [r7, #15]
    break;
 80072aa:	e008      	b.n	80072be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072ac:	2301      	movs	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
    break;
 80072b0:	e005      	b.n	80072be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072b2:	2302      	movs	r3, #2
 80072b4:	73fb      	strb	r3, [r7, #15]
    break;
 80072b6:	e002      	b.n	80072be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072b8:	2302      	movs	r3, #2
 80072ba:	73fb      	strb	r3, [r7, #15]
    break;
 80072bc:	bf00      	nop
  }
  return usb_status;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop

080072cc <__libc_init_array>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	2500      	movs	r5, #0
 80072d0:	4e0c      	ldr	r6, [pc, #48]	; (8007304 <__libc_init_array+0x38>)
 80072d2:	4c0d      	ldr	r4, [pc, #52]	; (8007308 <__libc_init_array+0x3c>)
 80072d4:	1ba4      	subs	r4, r4, r6
 80072d6:	10a4      	asrs	r4, r4, #2
 80072d8:	42a5      	cmp	r5, r4
 80072da:	d109      	bne.n	80072f0 <__libc_init_array+0x24>
 80072dc:	f000 f82e 	bl	800733c <_init>
 80072e0:	2500      	movs	r5, #0
 80072e2:	4e0a      	ldr	r6, [pc, #40]	; (800730c <__libc_init_array+0x40>)
 80072e4:	4c0a      	ldr	r4, [pc, #40]	; (8007310 <__libc_init_array+0x44>)
 80072e6:	1ba4      	subs	r4, r4, r6
 80072e8:	10a4      	asrs	r4, r4, #2
 80072ea:	42a5      	cmp	r5, r4
 80072ec:	d105      	bne.n	80072fa <__libc_init_array+0x2e>
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f4:	4798      	blx	r3
 80072f6:	3501      	adds	r5, #1
 80072f8:	e7ee      	b.n	80072d8 <__libc_init_array+0xc>
 80072fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072fe:	4798      	blx	r3
 8007300:	3501      	adds	r5, #1
 8007302:	e7f2      	b.n	80072ea <__libc_init_array+0x1e>
 8007304:	080073c8 	.word	0x080073c8
 8007308:	080073c8 	.word	0x080073c8
 800730c:	080073c8 	.word	0x080073c8
 8007310:	080073cc 	.word	0x080073cc

08007314 <memcpy>:
 8007314:	b510      	push	{r4, lr}
 8007316:	1e43      	subs	r3, r0, #1
 8007318:	440a      	add	r2, r1
 800731a:	4291      	cmp	r1, r2
 800731c:	d100      	bne.n	8007320 <memcpy+0xc>
 800731e:	bd10      	pop	{r4, pc}
 8007320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007328:	e7f7      	b.n	800731a <memcpy+0x6>

0800732a <memset>:
 800732a:	4603      	mov	r3, r0
 800732c:	4402      	add	r2, r0
 800732e:	4293      	cmp	r3, r2
 8007330:	d100      	bne.n	8007334 <memset+0xa>
 8007332:	4770      	bx	lr
 8007334:	f803 1b01 	strb.w	r1, [r3], #1
 8007338:	e7f9      	b.n	800732e <memset+0x4>
	...

0800733c <_init>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr

08007348 <_fini>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr
